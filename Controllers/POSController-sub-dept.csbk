using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Diagnostics;
using BigMac.Models;
using System.IO;
using MySql.Data.MySqlClient;
using System.Globalization;
using Newtonsoft.Json; 
namespace BigMac.Controllers
{
    public class POSController : Controller
    {
        //
        // GET: /POS/
        private BigMacEntities db = new BigMacEntities();
        //Added by ZawZO on 21 Mar 2016
        private GeneralController gc = new GeneralController();

        public ActionResult POSListing(string rcode = "POS")
        {

            // Kyaw , for department option
            List<Common_m_StaffDepartment> deptList = new List<Common_m_StaffDepartment>();
            var deptAll = new Common_m_StaffDepartment();

            deptAll.id = 0;
            deptAll.departmentname = "ALL";
            deptAll.description = "ALL";
            deptList.Add(deptAll);
            deptList.AddRange(db.Department.ToList());

            ViewBag.DepartmentName = "";
            ViewBag.DepartmentOptions = deptList;
            ViewBag.Rcode = rcode;
            return View();
        }
        
        [Authorize]
        public ActionResult getPOSListWithPaging(jQueryDataTableParamModel param, string deptname = "ALL")
        {
            try
            {
                //Changed by ZawZO on 11 Dec 2015
                string bcode = Session["branchcode"].ToString();
                ICollection<Invoice_m_Invoice> pTmpList = db.sales.Where(x => x.type == "POS" || x.type == "SOPOS" && x.branchcode == bcode).OrderByDescending(x => x.createdate).ToList();
                var fList = (from inv in pTmpList
                             join salesorder in db.saleorders on inv.salesorderid equals salesorder.id
                             select new { 
                                 id = inv.id, createdate = inv.createdate, 
                                 branchcode = inv.branchcode,
                                 resourcecode = inv.resourcecode,
                                 soresourcecode = salesorder.resourcecode,
                                 cussupname = inv.cussupname,
                                 total_discount = inv.total_discount,
                                 total_subtotal = inv.total_subtotal,
                                 total_salestax = inv.total_salestax,
                                 total_total = inv.total_total,
                                 total_amount = inv.total_total,
                                 total_amountrefund = inv.total_amountrefund,
                                 total_amountvoid = inv.total_amountvoid,
                                 change = inv.changes, 
                                 status = inv.status, 
                                 soid = inv.salesorderid,
                                 type = salesorder.type,
                                 departmentname = db.CusSup.Where(x => x.id == inv.cussupid).Select(x => new { x.departmentname}).FirstOrDefault()                               
                             }).ToList();



                //var pList = fList.Where(x => x.createdate.Value.Year == DateTime.Today.Year && x.createdate.Value.Month == DateTime.Today.Month && x.createdate.Value.Day == DateTime.Today.Day).ToList();


                var pList = (deptname == "ALL") ? fList : fList.Where(x => x.departmentname.departmentname == deptname).ToList();

                
                //var pList = pTmpList.Where(x => x.status.ToUpper() == "ACTIVE" || x.status.ToUpper() == "VOID").ToList();
                //ICollection<CusSup_m_CusSupdtl> mList = getMemberInfo(filter, mobile, name, mid, mcode, cardno, nric);
                //ICollection<CusSup_m_CusSupdtl> mList = getMemberInfo("", mobile, name, mid, mcode, 0, nric);

                var searchValue = "";

             
                if (param.sSearch == null) searchValue = "";
                else searchValue = param.sSearch;
                var filterPList = pList.Where(x => string.Format("dd/MM/yyyy", x.createdate).Contains(searchValue) || x.resourcecode.ToUpper().Contains(searchValue.ToUpper()) || x.branchcode.ToUpper().Contains(searchValue.ToUpper()) || x.cussupname.ToUpper().Contains(searchValue.ToUpper())).OrderByDescending(x => x.createdate).ToList();



                var sortColumnIndex = Convert.ToInt32(Request["iSortCol_0"]);
                var sortDirection = Request["sSortDir_0"]; //asc or desc
                if (sortDirection == "asc")
                {
                    if (sortColumnIndex == 0)
                        filterPList = filterPList.OrderBy(x => x.createdate).ToList();
                    else if (sortColumnIndex == 1)
                        filterPList = filterPList.OrderBy(x => x.branchcode).ToList();
                    else if (sortColumnIndex == 2)
                        filterPList = filterPList.OrderBy(x => x.resourcecode).ToList();
                    else if (sortColumnIndex == 3)
                        filterPList = filterPList.OrderBy(x => x.soresourcecode).ToList();
                    else if (sortColumnIndex == 4)
                        filterPList = filterPList.OrderBy(x => x.cussupname).ToList();
                    else if (sortColumnIndex == 5)
                        filterPList = filterPList.OrderBy(x => x.total_subtotal).ToList();
                    else if (sortColumnIndex == 6)
                        filterPList = filterPList.OrderBy(x => x.total_salestax).ToList();
                    else if (sortColumnIndex == 7)
                        filterPList = filterPList.OrderBy(x => x.total_discount).ToList();
                    else if (sortColumnIndex == 8)
                        filterPList = filterPList.OrderBy(x => x.total_total).ToList();
                    else if (sortColumnIndex == 9)
                        filterPList = filterPList.OrderBy(x => x.total_amount).ToList();
                    else if (sortColumnIndex == 10)
                        filterPList = filterPList.OrderBy(x => x.status).ToList();   
                   
                }
                else
                {
                    if (sortColumnIndex == 0)
                        filterPList = filterPList.OrderByDescending(x => x.createdate).ToList();
                    else if (sortColumnIndex == 1)
                        filterPList = filterPList.OrderByDescending(x => x.branchcode).ToList();
                    else if (sortColumnIndex == 2)
                        filterPList = filterPList.OrderByDescending(x => x.resourcecode).ToList();
                    else if (sortColumnIndex == 3)
                        filterPList = filterPList.OrderByDescending(x => x.soresourcecode).ToList();
                    else if (sortColumnIndex == 4)
                        filterPList = filterPList.OrderByDescending(x => x.cussupname).ToList();
                    else if (sortColumnIndex == 5)
                        filterPList = filterPList.OrderByDescending(x => x.total_subtotal).ToList();
                    else if (sortColumnIndex == 6)
                        filterPList = filterPList.OrderByDescending(x => x.total_salestax).ToList();
                    else if (sortColumnIndex == 7)
                        filterPList = filterPList.OrderByDescending(x => x.total_discount).ToList();
                    else if (sortColumnIndex == 8)
                        filterPList = filterPList.OrderByDescending(x => x.total_total).ToList();
                    else if (sortColumnIndex == 9)
                        filterPList = filterPList.OrderByDescending(x => x.total_amount).ToList();
                    else if (sortColumnIndex == 10)
                        filterPList = filterPList.OrderByDescending(x => x.status).ToList();  
                   
                }

                var paginatedPList = filterPList.Skip(param.iDisplayStart).Take(param.iDisplayLength).ToList();
                return Json(new
                {
                    sEcho = param.sEcho,
                    iTotalRecords = pList.Count, //paginatedQPList.TotalCount,
                    iTotalDisplayRecords = filterPList.Count, //paginatedQPList.TotalCount,
                    aaData = paginatedPList
                },
                JsonRequestBehavior.AllowGet);

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
            //return View(db.products.ToList());
        }

        public JsonResult getSOPOS(int soid)
        {
            try
            {
                using (var context = new BigMacEntities())
                {

                    Salesorder_m_salesorder so = db.saleorders.FirstOrDefault(x => x.id == soid);
                  
                    ICollection<Invoice_m_Invoice> pTmpList = db.sales.Where(x => x.type == "SOPOS" && x.salesorderid == so.invoiceid).OrderByDescending(x => x.createdate).ToList();
                  
                    var fList = (from inv in pTmpList join salesorder in db.saleorders
                                    on inv.salesorderid equals salesorder.id 
                                    select new { id = inv.id,
                                                 createdate = inv.createdate,
                                                 resourcecode = inv.resourcecode,
                                                 soresourcecode = salesorder.resourcecode,
                                                 cussupname = inv.cussupname,
                                                 total_discount = inv.total_discount,
                                                 total_subtotal = inv.total_subtotal,
                                                 total_salestax = inv.total_salestax,
                                                 total_total = inv.total_total,
                                                 change = inv.changes,
                                                 total_amount = salesorder.total_total,
                                                 total_amountrefund = inv.total_amountrefund,
                                                 status = inv.status
                                                }).ToList();

                     var pList = fList.Where(x => x.createdate.Value.Year == DateTime.Today.Year && x.createdate.Value.Month == DateTime.Today.Month && x.createdate.Value.Day == DateTime.Today.Day).ToList();
                    
                     return Json(pList, JsonRequestBehavior.AllowGet);


                }

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        public JsonResult getSOPTS(int soid)
        {
            try
            {
                using (var context = new BigMacEntities())
                {

                    ICollection<Invoice_m_Invoice> pTmpList = db.sales.Where(x => x.type == "REDEEM" && x.salesorderid == soid).OrderByDescending(x => x.createdate).ToList();

                    var fList = (from inv in pTmpList
                                 join item in db.saleItems
                                     on inv.id equals item.invoiceid
                                 select new
                                 {
                                     id = inv.id,
                                     createdate = inv.createdate,
                                     resourcecode = inv.resourcecode,
                                     status = inv.status,
                                     product = item.productdesc
                                 }).ToList();

                    var pList = fList.Where(x => x.createdate.Value.Year == DateTime.Today.Year && x.createdate.Value.Month == DateTime.Today.Month && x.createdate.Value.Day == DateTime.Today.Day).ToList();

                    return Json(pList, JsonRequestBehavior.AllowGet);


                }

            }
            catch (Exception e)
            { return Json(e.Message.ToString(), JsonRequestBehavior.AllowGet); }
        }

        public JsonResult getSOPKG(int soid)
        {
            try
            {
                using (var context = new BigMacEntities())
                {

                    Salesorder_m_salesorder so = db.saleorders.FirstOrDefault(x => x.id == soid);

                    ICollection<CusSup_m_CusRedemption> redemptionList = db.CusSupRedemption.Where(x => x.RefNo == so.resourcecode).ToList();

                    ICollection<CusSup_m_CusRedemption> distinctList = redemptionList
                                                              .GroupBy(r => new { r.productdesc })
                                                              .Select(g => g.First())
                                                              .ToList();

                    return Json(distinctList, JsonRequestBehavior.AllowGet);


                }

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }


        public JsonResult getAllOTReceipt(int soid)
        {
            Salesorder_m_salesorder so = db.saleorders.FirstOrDefault(x => x.id == soid);

            ICollection<Invoice_m_Invoice> pos = db.sales.Where(x => x.type == "SOPOS" && x.salesorderid == so.invoiceid).OrderByDescending(x => x.createdate).ToList();

            var posList = (from inv in pos
                         join salesorder in db.saleorders
                             on inv.salesorderid equals salesorder.id
                         select new
                         {
                             id = inv.id,
                             createdate = inv.createdate,
                             resourcecode = inv.resourcecode,
                             soresourcecode = salesorder.resourcecode,
                             cussupname = inv.cussupname,
                             total_discount = inv.total_discount,
                             total_subtotal = inv.total_subtotal,
                             total_salestax = inv.total_salestax,
                             total_total = inv.total_total,
                             change = inv.changes,
                             total_amount = salesorder.total_total,
                             total_amountrefund = inv.total_amountrefund,
                             status = inv.status
                         }).ToList();


            ICollection<Invoice_m_Invoice> pts = db.sales.Where(x => x.type == "REDEEM" && x.salesorderid == soid).OrderByDescending(x => x.createdate).ToList();

            var ptsList = (from inv in pts
                         join item in db.saleItems
                             on inv.id equals item.invoiceid
                         select new
                         {
                             id = inv.id,
                             createdate = inv.createdate,
                             resourcecode = inv.resourcecode,
                             status = inv.status,
                             product = item.productdesc
                         }).ToList();

            ICollection<CusSup_m_CusRedemption> redemptionList = db.CusSupRedemption.Where(x => x.RefNo == so.resourcecode).ToList();

            ICollection<CusSup_m_CusRedemption> pkgList = redemptionList
                                                      .GroupBy(r => new { r.productdesc })
                                                      .Select(g => g.First())
                                                      .ToList();


             posList = posList.Where(x => x.createdate.Value.Year == DateTime.Today.Year && x.createdate.Value.Month == DateTime.Today.Month && x.createdate.Value.Day == DateTime.Today.Day).ToList();
             ptsList = ptsList.Where(x => x.createdate.Value.Year == DateTime.Today.Year && x.createdate.Value.Month == DateTime.Today.Month && x.createdate.Value.Day == DateTime.Today.Day).ToList();

             var result = new { pos = posList, pts = ptsList ,pkg = pkgList };
             return Json(result, JsonRequestBehavior.AllowGet);
        }

        public JsonResult getSOToday(int assetid)
        {
            try
            {
                int? branchassetid = assetid;

                using (var context = new BigMacEntities())
                {
                    string branchcode = Session["branchcode"].ToString();
               
                    ICollection<Salesorder_m_salesorder> so = db.saleorders.Where(x => x.branchcode == branchcode && x.branchassetid == branchassetid && x.createdate.Value.Year == DateTime.Today.Year && x.createdate.Value.Month == DateTime.Today.Month && x.createdate.Value.Day == DateTime.Today.Day).ToList();
                    var soList = (from s in so
                                 select new
                                 {
                                     id = s.id,
                                     resourcecode = s.resourcecode,
                                     cussupname = s.cussupname,
                                     starttime = s.starttime,
                                     endtime = s.endtime,
                                     starttimeLong = Convert.ToDateTime(s.starttime).ToString("HH:mm")
                                 }).ToList();

                    return Json(soList.OrderBy(x => x.starttimeLong).ToList(), JsonRequestBehavior.AllowGet);

                }

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }


        //public double getAllReceivedAmountBySODID(int posid)
        //{
        //    double amount = 0;

        //    try
        //    {
        //        using (var context = new BigMacEntities())
        //        {
        //            Invoice_m_Invoice pos = db.sales.FirstOrDefault(x => x.id == posid);

        //            if (pos != null)
        //            {
        //                db.sales.Select(t => t.Amount ?? 0).Sum();
                        
                        
        //                ICollection<Invoice_m_Invoice> pTmpList = db.sales.Select(t=> t.) .Where(x => x.salesorderid == pos.salesorderid).OrderByDescending(x => x.createdate).ToList();

        //            }
        //        }
        //    }
        //    catch (Exception e)
        //    { return 0; }

        //    return amount;
        //}



        public JsonResult getDailyClosingByPaymentMode()
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    ICollection<Daily_Closing> dc = context.Database.SqlQuery<Daily_Closing>("call getDailyClosingByPaymentMode()").ToList();

                   // var fList = (from product in pptmp join package in db.products on product.packagecode equals package.productcode select new { id = package.id, packagecode = product.packagecode, packagedesc = product.packagedesc, productdesc = product.productdesc, productid = product.productid, credit = product.credit, debit = product.debit, uom = product.uom, balance = product.balance }).ToList();

                    return Json(dc, JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }


        // Kyaw on 20240613
        public JsonResult getAllPaymentBySOID(int posid)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    Invoice_m_Invoice pos = db.sales.FirstOrDefault(x => x.id == posid);

                    if (pos != null)
                    {
                        ICollection<Invoice_m_Invoice> pTmpList = db.sales.Where(x => x.salesorderid == pos.salesorderid).OrderByDescending(x => x.createdate).ToList();

                        var fList = (from inv in pTmpList
                                     join salesorder in db.saleorders
                                         on inv.salesorderid equals salesorder.id
                                     select new
                                     {
                                         id = inv.id,
                                         createdate = inv.createdate,
                                         resourcecode = inv.resourcecode,
                                         soresourcecode = salesorder.resourcecode,
                                         cussupname = inv.cussupname,
                                         total_discount = inv.total_discount,
                                         total_subtotal = inv.total_subtotal,
                                         total_salestax = inv.total_salestax,
                                         total_total = inv.total_total,
                                         total_amount = salesorder.total_total,
                                         status = inv.status
                                     }).ToList();

                        var pList = fList.Where(x => x.createdate.Value.Year == DateTime.Today.Year && x.createdate.Value.Month == DateTime.Today.Month && x.createdate.Value.Day == DateTime.Today.Day).ToList();
                        return Json(pList, JsonRequestBehavior.AllowGet);
                    }
                    else
                        return Json(null, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }


        public JsonResult getPreviousPaymentPOS(int posid, int soid)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    if (posid > 0)
                    {
                        Invoice_m_Invoice pos = db.sales.FirstOrDefault(x => x.id == posid);
                        if (pos != null)
                        {
                            ICollection<Invoice_m_Invoice> pTmpList = db.sales.Where(x => x.salesorderid == pos.salesorderid && x.id != posid).OrderByDescending(x => x.createdate).ToList();

                            var fList = (from inv in pTmpList
                                         join salesorder in db.saleorders
                                             on inv.salesorderid equals salesorder.id
                                         select new
                                         {
                                             id = inv.id,
                                             createdate = inv.createdate,
                                             resourcecode = inv.resourcecode,
                                             soresourcecode = salesorder.resourcecode,
                                             cussupname = inv.cussupname,
                                             total_discount = inv.total_discount,
                                             total_subtotal = inv.total_subtotal,
                                             total_salestax = inv.total_salestax,
                                             total_total = inv.total_total,
                                             total_amount = salesorder.total_total,
                                             status = inv.status
                                         }).ToList();

                            var pList = fList.Where(x => x.createdate.Value.Year == DateTime.Today.Year && x.createdate.Value.Month == DateTime.Today.Month && x.createdate.Value.Day == DateTime.Today.Day).ToList();
                            return Json(pList, JsonRequestBehavior.AllowGet);
                        }
                        else
                            return Json(null, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                      
                            ICollection<Invoice_m_Invoice> pTmpList = db.sales.Where(x => x.salesorderid == soid).OrderByDescending(x => x.createdate).ToList();

                            var fList = (from inv in pTmpList
                                         join salesorder in db.saleorders
                                             on inv.salesorderid equals salesorder.id
                                         select new
                                         {
                                             id = inv.id,
                                             createdate = inv.createdate,
                                             resourcecode = inv.resourcecode,
                                             soresourcecode = salesorder.resourcecode,
                                             cussupname = inv.cussupname,
                                             total_discount = inv.total_discount,
                                             total_subtotal = inv.total_subtotal,
                                             total_salestax = inv.total_salestax,
                                             total_total = inv.total_total,
                                             total_amount = salesorder.total_total,
                                             status = inv.status
                                         }).ToList();

                            var pList = fList.Where(x => x.createdate.Value.Year == DateTime.Today.Year && x.createdate.Value.Month == DateTime.Today.Month && x.createdate.Value.Day == DateTime.Today.Day).ToList();
                        
                        return Json(pList, JsonRequestBehavior.AllowGet);
                       
                    }
                   
                }

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        public JsonResult getPreviousPaymentSOPOS(int posid, int soid)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    if (posid > 0)
                    {
                        Invoice_m_Invoice pos = db.sales.FirstOrDefault(x => x.id == posid);
                        if (pos != null)
                        {
                            ICollection<Invoice_m_Invoice> pTmpList = db.sales.Where(x => x.salesorderid == pos.salesorderid && x.id != posid).OrderByDescending(x => x.createdate).ToList();

                            var fList = (from inv in pTmpList
                                         join salesorder in db.saleorders
                                             on inv.salesorderid equals salesorder.id
                                         select new
                                         {
                                             id = inv.id,
                                             createdate = inv.createdate,
                                             resourcecode = inv.resourcecode,
                                             soresourcecode = salesorder.resourcecode,
                                             cussupname = inv.cussupname,
                                             total_discount = inv.total_discount,
                                             total_subtotal = inv.total_subtotal,
                                             total_salestax = inv.total_salestax,
                                             total_total = inv.total_total,
                                             total_amount = salesorder.total_total,
                                             total_amountrefund = inv.total_amountrefund,
                                             status = inv.status
                                         }).ToList();

                            var pList = fList.Where(x => x.createdate.Value.Year == DateTime.Today.Year && x.createdate.Value.Month == DateTime.Today.Month && x.createdate.Value.Day == DateTime.Today.Day).ToList();
                            return Json(pList, JsonRequestBehavior.AllowGet);
                        }
                        else
                            return Json(null, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {

                        Salesorder_m_salesorder ot = db.saleorders.FirstOrDefault(x => x.id == soid);

                        ICollection<Invoice_m_Invoice> pTmpList = db.sales.Where(x => x.salesorderid == ot.invoiceid).OrderByDescending(x => x.createdate).ToList();

                        var fList = (from inv in pTmpList
                                     join salesorder in db.saleorders
                                         on inv.salesorderid equals salesorder.id
                                     select new
                                     {
                                         id = inv.id,
                                         createdate = inv.createdate,
                                         resourcecode = inv.resourcecode,
                                         soresourcecode = salesorder.resourcecode,
                                         cussupname = inv.cussupname,
                                         total_discount = inv.total_discount,
                                         total_subtotal = inv.total_subtotal,
                                         total_salestax = inv.total_salestax,
                                         total_total = inv.total_total,
                                         total_amount = salesorder.total_total,
                                         total_amountrefund = inv.total_amountrefund,
                                         status = inv.status
                                     }).ToList();

                        var pList = fList.Where(x => x.createdate.Value.Year == DateTime.Today.Year && x.createdate.Value.Month == DateTime.Today.Month && x.createdate.Value.Day == DateTime.Today.Day).ToList();

                        return Json(pList, JsonRequestBehavior.AllowGet);

                    }

                }

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        [Authorize]
        public ActionResult POS(int id = 0, int soid = 0, string rcode = "POS")
        {
            Invoice_m_Invoice invpos = new Invoice_m_Invoice();
            if (Session["userid"] != null)
            {
                try
                {

                    // Kyaw , for department option
                    List<Common_m_StaffDepartment> deptList = new List<Common_m_StaffDepartment>();
                    var deptAll = new Common_m_StaffDepartment();

                    deptAll.id = 0;
                    deptAll.departmentname = "ALL";
                    deptAll.description = "ALL";
                    deptList.Add(deptAll);
                    deptList.AddRange(db.Department.ToList());

                    ViewBag.DepartmentOptions = deptList;
                    
                    ViewBag.Acode = "Customer";
                    ViewBag.RCode = rcode;
                    ViewBag.CussupCode = "";
                    //Added by ZawZO on 20 May 2015
                    ViewBag.StaffID = "";

                    ViewBag.DepartmentOptions = deptList;
                    ViewBag.CategoryOptions = db.productCategory.ToList();
                    ViewBag.SubCategoryOptions = db.productSubCategory.ToList();
                    ViewBag.RangesNSeriesOptions = db.productRNS.ToList();
                    ViewBag.BrandOptions = db.productBrand.ToList();
                    ViewBag.CardTypeOptions = db.CardType.ToList();
                    //Added by ZawZO on 21 Mar 2016
                    ViewBag.UOMOptions = db.UOM.ToList();

                    string bcode = Session["branchcode"].ToString();
                    //Added by ZawZO on 21 Jul 2015
                    ViewBag.DiscountOptions = db.salesDiscount.OrderBy(x => x.value).ToList();

                    ViewBag.StaffOptions = db.BranchStaff.Join(db.Staffs, bs => bs.staffid, s => s.id, (bs, s) => new { BranchStaff = bs, Staffs = s }).Where(x => x.BranchStaff.branchcode == bcode).Select(x => new { x.Staffs.id, x.Staffs.name }).ToList();
                    string CoCode=Session["cocode"].ToString();
                    Configuration_m_Company co = db.Companies.Where(x => x.cocode == CoCode).FirstOrDefault();
                    ViewBag.CoRegNo= cAESEncryption.getDecryptedString(co.coregno);
                    
                    //Changed by ZawZO on 12 Nov 2015
                    Configuration_m_Branches br = db.Branches.Where(x => x.branchcode== bcode).FirstOrDefault();
                    ViewBag.CoName = cAESEncryption.getDecryptedString(br.branchname);
                    if (br.address!= null) {
                        if (br.address == ""){
                            ViewBag.CoAddress = "-";
                        }
                        else{
                            ViewBag.CoAddress = cAESEncryption.getDecryptedString(br.address);
                        }
                    }
                    else {
                        ViewBag.CoAddress = "-";
                    }
                    if (br.tel != null){
                        if (br.tel == ""){
                            ViewBag.Tel = "-";
                        }
                        else{
                            ViewBag.Tel = cAESEncryption.getDecryptedString(br.tel);
                        }
                   }
                   else {
                        ViewBag.Tel = "-";
                    }
                   if (br.fax != null){
                       if (br.fax == ""){
                           ViewBag.Fax = "-";
                       }
                       else{
                           ViewBag.Fax = cAESEncryption.getDecryptedString(br.fax);
                       }
                    }
                    else {
                        ViewBag.Fax = "-";
                    }
                    if (br.email != null){
                        if (br.email== ""){
                            ViewBag.Email = "-";
                        }
                        else{
                            ViewBag.Email = cAESEncryption.getDecryptedString(br.email);
                        }
                    }
                    else {
                        ViewBag.Email = "-";
                    }
                    int intGSTReg = br.gstreg;
                    if (intGSTReg == 1){
                        ViewBag.GSTRegNo = cAESEncryption.getDecryptedString(br.gstregno);
                    }
                    else {
                        ViewBag.GSTRegNo = "-";
                    }

                    var y = db.ConfigDefault.Where(x => x.key == "CEXPYEAR").FirstOrDefault().value;
                    var yy = 0;
                    if (y != "")
                        yy = Convert.ToInt32(y);
                    ViewBag.ExpYear = DateTime.Today.AddYears(yy).Date;
                    ViewBag.TempExpYear = DateTime.Today.AddMonths(1).Date;

                    var c = db.ConfigDefault.Where(x => x.key == "C$").FirstOrDefault().value;
                    var b = db.ConfigDefault.Where(x => x.key == "B$").FirstOrDefault().value;
                    ViewBag.CitiDesc = c;
                    ViewBag.BonusDesc = b;

                    double gstpercent = 0;
                    var config = db.ConfigDefault.Where(x => x.key == "INVGSTPER").ToList();
                    //Changed by ZawZO on 14 May 2015
                    string cocode = Convert.ToString(Session["cocode"]); 
                    var gstreg = db.Companies.Where(x => x.cocode == cocode).FirstOrDefault().gstreg;
                    if (config.Count > 0) { 
                        if (gstreg == 0)
                            gstpercent = 0;
                        else
                            gstpercent = Convert.ToDouble(config.ElementAt(0).value);
                    }

                    ViewBag.GST = gstpercent;
                    ViewBag.PaymentModeOptions = db.PaymentModes.Select(x => new { x.id, x.paymentmode }).OrderBy(x => x.paymentmode).ToList();
                    //Added by ZawZO on 21 Jan 2016
                    if (soid > 0)
                    {
                        ViewBag.SoID = soid;
                    }
                    else
                    {
                        ViewBag.SoID = 0;
                    }
                    
                    if (id == 0)
                    {
                        invpos.id = 0;
                        invpos.status = "Active";
                        invpos.resourcecode = "";
                        invpos.printcount = 0;
                        //Added by ZawZO on 21 Jan 2016
                        if (soid > 0)
                        {
                            Salesorder_m_salesorder so = db.saleorders.Where(x => x.id == soid).FirstOrDefault();
                            invpos.branchcode = so.branchcode;
                            invpos.cussupid = so.cussupid;
                            invpos.cussupname = so.cussupname;
                            CusSup_m_CusSup cs = db.CusSup.Where(x => x.id == so.cussupid).FirstOrDefault();
                            @ViewBag.CussupCode = cs.inhousecode;
                            ViewBag.StaffID = so.staffid;
                        }
                    }
                    else
                    {
                        invpos = db.sales.Where(x => x.id == id).FirstOrDefault();
                        if (invpos == null)
                        {
                            invpos.id = 0;
                            invpos.status = "Active";
                            invpos.resourcecode = "";
                            invpos.printcount = 0;
                        }
                        else
                        {
                            //Added by ZawZO on 20 May 2015
                            ViewBag.StaffID=invpos.staffid;

                            var ctmp = db.CusSup.Where(x => x.id == invpos.cussupid).FirstOrDefault();
                            if (ctmp != null) ViewBag.CussupCode = ctmp.inhousecode;
                        }
                    }
                    //return View(m);
                    return View(invpos);
                }
                catch (Exception e)
                {
                    return View(invpos);
                }
            }
            else
                return RedirectToAction("Login", "Access");

                //ActionResult(new { controller = "Access", action = "Login" });
          
        }

        [Authorize]
        public ActionResult SOPOS(int id = 0, int soid = 0, string rcode = "SOPOS")
        {
            Invoice_m_Invoice invpos = new Invoice_m_Invoice();
            if (Session["userid"] != null)
            {
                try
                {
                    ViewBag.Acode = "Customer";
                    ViewBag.RCode = rcode;
                    ViewBag.CussupCode = "";
                    //Added by ZawZO on 20 May 2015
                    ViewBag.StaffID = "";

                    ViewBag.CategoryOptions = db.productCategory.ToList();
                    ViewBag.SubCategoryOptions = db.productSubCategory.ToList();
                    ViewBag.RangesNSeriesOptions = db.productRNS.ToList();
                    ViewBag.BrandOptions = db.productBrand.ToList();
                    ViewBag.CardTypeOptions = db.CardType.ToList();
                    //Added by ZawZO on 21 Mar 2016
                    ViewBag.UOMOptions = db.UOM.ToList();

                    string bcode = Session["branchcode"].ToString();
                    //Added by ZawZO on 21 Jul 2015
                    ViewBag.DiscountOptions = db.salesDiscount.OrderBy(x => x.value).ToList();

                    ViewBag.StaffOptions = db.BranchStaff.Join(db.Staffs, bs => bs.staffid, s => s.id, (bs, s) => new { BranchStaff = bs, Staffs = s }).Where(x => x.BranchStaff.branchcode == bcode).Select(x => new { x.Staffs.id, x.Staffs.name }).ToList();
                    string CoCode = Session["cocode"].ToString();
                    Configuration_m_Company co = db.Companies.Where(x => x.cocode == CoCode).FirstOrDefault();
                    ViewBag.CoRegNo = cAESEncryption.getDecryptedString(co.coregno);

                    //Changed by ZawZO on 12 Nov 2015
                    Configuration_m_Branches br = db.Branches.Where(x => x.branchcode == bcode).FirstOrDefault();
                    ViewBag.CoName = cAESEncryption.getDecryptedString(br.branchname);
                    if (br.address != null)
                    {
                        if (br.address == "")
                        {
                            ViewBag.CoAddress = "-";
                        }
                        else
                        {
                            ViewBag.CoAddress = cAESEncryption.getDecryptedString(br.address);
                        }
                    }
                    else
                    {
                        ViewBag.CoAddress = "-";
                    }
                    if (br.tel != null)
                    {
                        if (br.tel == "")
                        {
                            ViewBag.Tel = "-";
                        }
                        else
                        {
                            ViewBag.Tel = cAESEncryption.getDecryptedString(br.tel);
                        }
                    }
                    else
                    {
                        ViewBag.Tel = "-";
                    }
                    if (br.fax != null)
                    {
                        if (br.fax == "")
                        {
                            ViewBag.Fax = "-";
                        }
                        else
                        {
                            ViewBag.Fax = cAESEncryption.getDecryptedString(br.fax);
                        }
                    }
                    else
                    {
                        ViewBag.Fax = "-";
                    }
                    if (br.email != null)
                    {
                        if (br.email == "")
                        {
                            ViewBag.Email = "-";
                        }
                        else
                        {
                            ViewBag.Email = cAESEncryption.getDecryptedString(br.email);
                        }
                    }
                    else
                    {
                        ViewBag.Email = "-";
                    }
                    int intGSTReg = br.gstreg;
                    if (intGSTReg == 1)
                    {
                        ViewBag.GSTRegNo = cAESEncryption.getDecryptedString(br.gstregno);
                    }
                    else
                    {
                        ViewBag.GSTRegNo = "-";
                    }

                    var y = db.ConfigDefault.Where(x => x.key == "CEXPYEAR").FirstOrDefault().value;
                    var yy = 0;
                    if (y != "")
                        yy = Convert.ToInt32(y);
                    ViewBag.ExpYear = DateTime.Today.AddYears(yy).Date;
                    ViewBag.TempExpYear = DateTime.Today.AddMonths(1).Date;

                    var c = db.ConfigDefault.Where(x => x.key == "C$").FirstOrDefault().value;
                    var b = db.ConfigDefault.Where(x => x.key == "B$").FirstOrDefault().value;
                    ViewBag.CitiDesc = c;
                    ViewBag.BonusDesc = b;

                    double gstpercent = 0;
                    var config = db.ConfigDefault.Where(x => x.key == "INVGSTPER").ToList();
                    //Changed by ZawZO on 14 May 2015
                    string cocode = Convert.ToString(Session["cocode"]);
                    var gstreg = db.Companies.Where(x => x.cocode == cocode).FirstOrDefault().gstreg;
                    if (config.Count > 0)
                    {
                        if (gstreg == 0)
                            gstpercent = 0;
                        else
                            gstpercent = Convert.ToDouble(config.ElementAt(0).value);
                    }

                    ViewBag.GST = gstpercent;
                    ViewBag.PaymentModeOptions = db.PaymentModes.Select(x => new { x.id, x.paymentmode }).OrderBy(x => x.paymentmode).ToList();
                    //Added by ZawZO on 21 Jan 2016
                    if (soid > 0)
                    {
                        ViewBag.SoID = soid;
                    }
                    else
                    {
                        ViewBag.SoID = 0;
                    }

                    if (id == 0)
                    {
                        invpos.id = 0;
                        invpos.status = "Active";
                        invpos.resourcecode = "";
                        invpos.printcount = 0;
                        //Added by ZawZO on 21 Jan 2016
                        if (soid > 0)
                        {
                            Salesorder_m_salesorder so = db.saleorders.Where(x => x.id == soid).FirstOrDefault();
                            invpos.branchcode = so.branchcode;
                            invpos.cussupid = so.cussupid;
                            invpos.cussupname = so.cussupname;
                            CusSup_m_CusSup cs = db.CusSup.Where(x => x.id == so.cussupid).FirstOrDefault();
                            @ViewBag.CussupCode = cs.inhousecode;
                            ViewBag.InvoiceId = so.invoiceid;
                            ViewBag.StaffID = so.staffid;
                        }
                    }
                    else
                    {
                        invpos = db.sales.Where(x => x.id == id).FirstOrDefault();
                        if (invpos == null)
                        {
                            invpos.id = 0;
                            invpos.status = "Active";
                            invpos.resourcecode = "";
                            invpos.printcount = 0;
                        }
                        else
                        {
                            //Added by ZawZO on 20 May 2015
                            ViewBag.StaffID = invpos.staffid;

                            var ctmp = db.CusSup.Where(x => x.id == invpos.cussupid).FirstOrDefault();
                            if (ctmp != null) ViewBag.CussupCode = ctmp.inhousecode;
                        }
                    }
                    //return View(m);
                    return View(invpos);
                }
                catch (Exception e)
                {
                    return View(invpos);
                }
            }
            else
                return RedirectToAction("Login", "Access");

            //ActionResult(new { controller = "Access", action = "Login" });

        }


        //Added by ZawZO on 14 May 2015
        [Authorize]
        public ActionResult getDiscpercentbyUserName(string uname, string pwd)
        {
            var returnStr = "0";
            int disPerc ;
            ICollection<Access_m_Users> ulist = db.Users.Include("Role").Where(x => x.status.ToUpper() == "ACTIVE").ToList();
            Access_m_Users u = ulist.Where(x => cAESEncryption.getDecryptedString(x.username) == uname.ToUpper() && cAESEncryption.getDecryptedString(x.password) == pwd).FirstOrDefault();
            if (u != null)
            {
                Common_m_Staff s =db.Staffs.Where(x => x.userid == u.id).FirstOrDefault();
                if (s!=null){
                    disPerc=s.maxdiscpc;
                }
                else{
                    disPerc=-1;
                }
                returnStr = disPerc.ToString();
            }
            else
            {
                returnStr = "-1";
            }
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }
        //Added by ZawZO on 22 Mar 2016
        [Authorize]
        public ActionResult isValidUserForMiscEntry(string uname, string pwd)
        {
            var returnStr = "0";
            ICollection<Access_m_Users> ulist = db.Users.Include("Role").Where(x => x.status.ToUpper() == "ACTIVE").ToList();
            Access_m_Users u = ulist.Where(x => cAESEncryption.getDecryptedString(x.username) == uname.ToUpper() && cAESEncryption.getDecryptedString(x.password) == pwd).FirstOrDefault();
            if (u != null)
            {
                returnStr = "1";
            }
            else
            {
                returnStr = "0";
            }
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }
        [Authorize]
        public ActionResult getItemDetail(int posid=0)
        {
            try
            {
                var itemlist = db.saleItems.Where(x => x.invoiceid == posid).ToList();
                var plist = itemlist.Join(db.products, item => item.productid, prod => prod.id, (item, prod) => new { itemlist = item, products = prod }).Select(x => new { x.itemlist.id, x.itemlist.lineno, x.itemlist.productid, x.itemlist.productcode, x.itemlist.productdesc, x.itemlist.servicecommission, x.itemlist.unitprice, x.itemlist.qty, x.itemlist.uom, x.itemlist.lineamount, x.itemlist.discountamount, x.itemlist.awardbonus,x.itemlist.awarddollars, x.products.category, x.products.categorysub, x.products.brand, x.products.RangesNSeries }).OrderBy(x => x.lineno).ToList();
                return Json(plist, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }
        //Added by ZawZO on 21 Jan 2016
        [Authorize]
        public ActionResult getItemDetailFromFacilityOrder(int soid = 0)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    string strsql = "call getItemDetailFromFacilityOrder(" + soid.ToString() + ")";
                    var itemlist = context.Database.SqlQuery<Invoice_Itemsdtl_fromSOdetl>(strsql).ToList();
                    var plist = itemlist.Join(db.products, item => item.productid, prod => prod.id, (item, prod) => new { itemlist = item, products = prod }).Select(x => new { 
                        x.itemlist.id,
                        x.itemlist.lineno,
                        x.itemlist.productid,
                        x.itemlist.productcode,
                        x.itemlist.productdesc,
                        x.itemlist.servicecommission,
                        x.itemlist.unitprice,
                        qty = x.itemlist.qty - x.itemlist.redeemedqty,
                        x.itemlist.uom,
                        x.itemlist.lineamount,
                        x.itemlist.discountamount,
                        x.products.category,
                        x.products.categorysub,
                        x.products.brand,
                        x.products.RangesNSeries,
                        x.itemlist.awardbonus,
                        x.itemlist.awarddollars,
                        x.itemlist.redeemedqty,
                        status = "",
                        x.itemlist.detailid
                       
                    }).OrderBy(x => x.lineno).ToList();

                    return Json(plist, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        [Authorize]
        public ActionResult getSaleStaffs(int posid = 0)
        {
            try
            {
                var sList = db.saleStaffs.Where(x => x.invoiceid == posid).Join(db.saleItems.Where(x => x.invoiceid == posid), staff => staff.resourcedetailid, item => item.id, (staff, item) => new { saleStaffs = staff, saleItems = item }).Select(x => new { oldpid = x.saleItems.lineno, x.saleStaffs.id, x.saleStaffs.invoiceid, x.saleStaffs.resourcecode, x.saleStaffs.resourcedetailid, x.saleStaffs.lineno, x.saleStaffs.staffid, x.saleStaffs.percent }).OrderBy(x => new { x.resourcedetailid,x.lineno }).ToList();
                return Json(sList, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        [Authorize]
        public ActionResult getPOSPayment(int posid = 0)
        {
            try
            {
                var plist = db.invoicePayment.Where(x => x.invoiceid == posid).Select(x => new { x.id, x.paymentmode, x.amountrecd }).OrderBy(x => x.id).ToList();                    
                return Json(plist, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        [Authorize]
        public ActionResult getPreviousPOSPayment(int posid = 0)
        {
            try
            {
                Invoice_m_Invoice inv = db.sales.FirstOrDefault(x=>x.id == posid);
                var plist = db.sales.Where(x => x.salesorderid == inv.salesorderid && x.status == "CLOSE" && x.id != posid).ToList();
                return Json(plist, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }



        [Authorize]
        public ActionResult getAllPreviousPOSPaymentBySOID(int soid = 0)
        {
            try
            {
                Salesorder_m_salesorder salesorder = db.saleorders.FirstOrDefault(x => x.id == soid);

                if (salesorder != null)
                {
                    Invoice_m_Invoice inv = db.sales.FirstOrDefault(x => x.id == salesorder.invoiceid);
                    if (inv != null)
                    {
                        var plist = db.sales.Where(x => x.salesorderid == inv.salesorderid && x.status == "CLOSE").ToList();
                        return Json(plist, JsonRequestBehavior.AllowGet);
                    }
                    else
                        return Json(null, JsonRequestBehavior.AllowGet);
                }
                else
                    return Json(null, JsonRequestBehavior.AllowGet);

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        [Authorize]
        public ActionResult getPreviousPOSPaymentBySOID(int soid = 0)
        {
            try
            {
                Salesorder_m_salesorder salesorder = db.saleorders.FirstOrDefault(x => x.id == soid);


                if (salesorder != null)
                {
                    Invoice_m_Invoice inv = db.sales.FirstOrDefault(x => x.id == salesorder.invoiceid);
                    if (inv != null)
                    {
                        var plist = db.sales.Where(x => x.salesorderid == inv.salesorderid && x.status == "CLOSE").ToList();
                        return Json(plist, JsonRequestBehavior.AllowGet);
                    }
                    else
                        return Json(null, JsonRequestBehavior.AllowGet);
                }
                else
                    return Json(null, JsonRequestBehavior.AllowGet);
               
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        [Authorize]
        public ActionResult getPreviousSOPOSPaymentBySOID(int soid = 0)
        {
            try
            {
                Salesorder_m_salesorder salesorder = db.saleorders.FirstOrDefault(x => x.id == soid);
                Salesorder_m_salesorder salesorderpos = db.saleorders.FirstOrDefault(x => x.id == salesorder.invoiceid);

                if (salesorderpos != null)
                {
                    Invoice_m_Invoice inv = db.sales.FirstOrDefault(x => x.id == salesorderpos.invoiceid);
                    if (inv != null)
                    {
                        var plist = db.sales.Where(x => x.salesorderid == inv.salesorderid && x.status == "CLOSE").ToList();
                        return Json(plist, JsonRequestBehavior.AllowGet);
                    }
                    else
                        return Json(null, JsonRequestBehavior.AllowGet);
                }
                else
                    return Json(null, JsonRequestBehavior.AllowGet);

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        [Authorize]
        public ActionResult getVoidedBySOID(int soid = 0)
        {
            try
            {
                Salesorder_m_salesorder salesorder = db.saleorders.FirstOrDefault(x => x.id == soid);
                Salesorder_m_salesorder salesorderpos = db.saleorders.FirstOrDefault(x => x.id == salesorder.invoiceid);

                if (salesorderpos != null)
                {
                    Invoice_m_Invoice inv = db.sales.FirstOrDefault(x => x.id == salesorderpos.invoiceid);
                    if (inv != null)
                    {
                        var plist = db.sales.Where(x => x.salesorderid == inv.salesorderid && x.status == "CLOSE" && x.total_amountrefund > 0).ToList();
                        return Json(plist, JsonRequestBehavior.AllowGet);
                    }
                    else
                        return Json(null, JsonRequestBehavior.AllowGet);
                }
                else
                    return Json(null, JsonRequestBehavior.AllowGet);

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        //Added by ZawZO on 6 Dec 2015
        [Authorize]
        public ActionResult getPaymentModes()
        {
            try
            {
                var plist = db.PaymentModes.OrderBy(x => x.id).ToList();
                return Json(plist, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        [Authorize]
        public Boolean chkUserAccessRightForPOSVoid(string uname, string pwd)
        {
            Boolean returnValue = false ;
            try
            {
                ICollection<Access_m_Users> ulist = db.Users.Include("Role").Where(x => x.status.ToUpper() == "ACTIVE").ToList();
                Access_m_Users u = ulist.Where(x => cAESEncryption.getDecryptedString(x.username) == uname && cAESEncryption.getDecryptedString(x.password) == pwd).FirstOrDefault();
                if (u != null)
                {
                    if (u.roldid == 1)
                    { returnValue = true; }
                    else
                    {
                        var aList = db.RoleAccessRights.Where(x => x.roleid == u.roldid && x.resource == "POS" && x.voidField == true).Select(x => new { x.resource }).Distinct().Union(db.AccessRights.Include("Resources").Where(x => x.userid == u.id && x.resource == "POS" && x.voidField == true).Select(x => new { x.Resources.resource }).Distinct()).ToList();
                        if (aList != null)
                        {
                            if (aList.Count > 0)
                                returnValue =true;
                        }
                    }
                }
            }
            catch (Exception e)
            {  }

            return returnValue;
        }
        
        [Authorize]
        public JsonResult POSVOID(int posid = 0, string uname = "", string pwd = "", string remarks = "", string resource = "POS")
        {
            var returnStr = "FAIL";
            Boolean redFlag = true;
            //Boolean payFlag = true;
            double? totaldollars = 0;
            double? totalbonus = 0;
            if (Session["userid"] != null)
            {
                try
                {
                    if (chkUserAccessRightForPOSVoid(uname.ToUpper(), pwd) == true)
                    {
                        var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                        int rid = 0;
                        if (ridtmp != null) rid = Convert.ToInt32(ridtmp);

                        var ptmp = db.sales.Where(x => x.id == posid).FirstOrDefault();
                        if (ptmp != null)
                        {

                            saveToLog(rid, ptmp.id, "Update", "Void POS refid" + ptmp.id + " , POS# " + ptmp.resourcecode);
                            if (ptmp.status.ToUpper() == "CLOSE")
                            {
                                totaldollars = db.saleItems.Where(x => x.invoiceid == posid).Sum(x => (x.awarddollars * x.qty));
                                totalbonus = db.saleItems.Where(x => x.invoiceid == posid).Sum(x => (x.awardbonus * x.qty));

                                if (totaldollars > 0)
                                {
                                    if (addToRedemptionTableForVoidItem(ptmp, totaldollars, "C$", resource) == false)
                                        redFlag=false;                                        
                                    else
                                        returnStr = "SUCCESS";
                                }

                                if (totalbonus > 0)
                                {
                                    if (addToRedemptionTableForVoidItem(ptmp, totalbonus, "B$", resource) == false)
                                        redFlag=false;                                        
                                    else
                                        returnStr = "SUCCESS"; 
                                }    
                       
                                //var plist = prodlist.Join(db.productprices, prod => prod.id, price => price.productid, (prod, price) => new { prodlist = prod, productprices = price }).Select(x => new { x.prodlist.id, x.prodlist.desc, x.prodlist.category, x.prodlist.categorysub, x.prodlist.brand, x.prodlist.RangesNSeries, x.prodlist.productcode, x.productprices.uom, x.productprices.sellprice, x.productprices.servicecommission }).Distinct().ToList();
                                //var itemlist = db.saleItems.Where(x => x.invoiceid == posid).Join(db.CusSupRedemption, sales => sales.id, red => red.invoiceitemid, (sales, red) => new { saleItems = sales, CusSupRedemption = red }).Select(x => new { x.saleItems.invoiceid}).ToList();
                                addToRedemptionTableForVoidPackage(ptmp.resourcecode, "POS");
                            }

                            double totalpayment = 0;
                            totalpayment = db.invoicePayment.Where(x => x.invoiceid == posid).Sum(x => x.amountrecd);

                            if (totalpayment > 0)
                            {
                                Invoice_m_Payment paytmp = new Invoice_m_Payment();
                                paytmp.paymentmode = "Refund";
                                paytmp.amountrecd = totalpayment * (-1);

                                int uid = Convert.ToInt32(Session["userid"]);
                                int staffid = 0;
                                var stmp = db.Staffs.Where(x => x.userid == uid).ToList();
                                if (stmp != null)
                                {
                                    if (stmp.Count > 0)
                                        staffid = stmp.ElementAt(0).id;
                                }
                                SaveNewPayment(paytmp, ptmp.id, resource, ptmp.resourcecode, rid, ptmp.currency, ptmp.exchangerate, ptmp.status, staffid);

                                // Kyaw on 20240614 - Also update the SO amount received.
                                   Invoice_m_Invoice  pos = db.sales.Where(x => x.id == posid ).FirstOrDefault();
                                   Salesorder_m_salesorder so = db.saleorders.Where(x => x.id == pos.salesorderid).FirstOrDefault();

                                   so.total_amountreceived -= pos.total_amountreceived;
                                   db.SaveChanges();

                            }

                            POSVoidStockIssue(ptmp, rid, resource);
                            //cc.recalculateSaleFigure(cd, Session["cocode"].ToString(), 0, Session["branchcode"].ToString(), 1, 0, resource);
                            if (redFlag == true)
                            {                                
                                ptmp.status = "VOID";
                                //Added by ZawZO on 4 Sep 2015
                                ptmp.remark = remarks;

                                db.SaveChanges();
                                CampaignController cc = new CampaignController();
                                DateTime cd = Convert.ToDateTime(ptmp.postdate);
                                recalculateSaleFigure(cd, Session["cocode"].ToString(), 0, Session["branchcode"].ToString(), 1, 0, resource);
                                returnStr = "SUCCESS";
                            }
                            else
                            {                                
                                ptmp.status = "VOID";
                                //Added by ZawZO on 4 Sep 2015
                                ptmp.remark = remarks;

                                db.SaveChanges();
                                returnStr = "There is an issue for Club Point Recalculating";
                            }                        
                        }// End of checking pos header                      
                    }// End of checking valid user
                    else
                        returnStr = "Wrong username and password or user doesn't have access to void.";

                }
                catch (Exception e)
                { returnStr = e.Message.ToString(); }
            }
            else
            {
                Response.RedirectToRoute(new { controller = "Access", action = "Login" });
                returnStr = "SESSION EXPIRED";
            }
            
            return Json(returnStr, JsonRequestBehavior.AllowGet);

        }

        [Authorize]
        //public ActionResult SaveDetailSalesAmountEntry(int campaignid, string branchcode, int groupid, int t1,int t2, int t3,ICollection<DetailEntry> dtls)
        public JsonResult recalculateSaleFigure(DateTime campaigndate, string cocode = "", int gid = 0, string bcode = "ALL", int campaignid = 0, int staffid = 0, string resource = "")
        {
            var returnStr = "FAIL";

            try
            {
                //int id = 0;
                if (campaignid == 0) campaignid = 1;


                var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                int rid = 0;
                int uid = 0;

                string sessionid = "";
                string visitorIPAddress = "";
                try
                {
                    sessionid = Session.SessionID;
                    visitorIPAddress = System.Web.HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
                    if (String.IsNullOrEmpty(visitorIPAddress))
                        visitorIPAddress = System.Web.HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

                    if (string.IsNullOrEmpty(visitorIPAddress))
                        visitorIPAddress = System.Web.HttpContext.Current.Request.UserHostAddress;
                }
                catch (Exception ee)
                { }


                if (Session["userid"] != null)
                {
                    if (Session["userid"] != "")
                    {
                        uid = Convert.ToInt32(Session["userid"]);

                        if (cocode == "")
                        {
                            cocode = Session["cocode"].ToString();
                        }
                        var gblist = db.BranchGroupLinks.Where(x => (x.groupid == gid || gid == 0) && (x.branchcode == bcode || bcode == "ALL")).ToList();
                        for (int gcount = 0; gcount < gblist.Count; gcount++)
                        {
                            int gidtmp = gblist.ElementAt(gcount).groupid;
                            string bcodetmp = gblist.ElementAt(gcount).branchcode;
                            //string ipaddress = "";
                            var context = new BigMacEntities();
                            var value = context.Database.ExecuteSqlCommand("call ReCalculateSalesAcutal('" + cocode + "'," + campaignid.ToString() + "," + gidtmp.ToString() + ",'" + bcodetmp + "'," + staffid.ToString() + "," + uid.ToString() + ",'" + campaigndate.ToString("yyyy-MM-dd") + "','" + visitorIPAddress + "','" + sessionid + "'," + rid + ")");

                        }
                        returnStr = "SUCCESS";
                    }
                }

            }
            catch (Exception e)
            { returnStr = e.Message.ToString(); }

            //return Content(returnStr);
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }
        [Authorize]
        public Boolean POSVoidStockIssue(Invoice_m_Invoice tmpobj, int rid, string rcode = "Invoice")
        {
            Boolean returnValue = false;
            try
            {
                int posid = tmpobj.id;
                ICollection<Invoice_m_Invoice_Items> items = db.saleItems.Where(x => x.invoiceid == posid).ToList();
                for (int i = 0; i < items.Count; i++)
                {
                    var invdtl = items.ElementAt(i);
                    //int tmppid = items.ElementAt(i).productid;
                    var prodtmp = db.products.Where(x => x.id == invdtl.productid).FirstOrDefault();
                    if (prodtmp.category.ToUpper() == "PACKAGE")
                    {

                        int prdid = prodtmp.id;
                        ICollection<Product_m_ProductBundles> pbdl = db.productBundle.Include("Product").Where(x => x.productid == prdid).ToList();
                        if (pbdl != null)
                        {
                            if (pbdl.Count > 0)
                            {
                                for (int p = 0; p < pbdl.Count; p++)
                                {
                                    int itemid = pbdl.ElementAt(p).itemid;
                                    string itemdesc = pbdl.ElementAt(p).Product.desc;
                                    string itemuom = pbdl.ElementAt(p).Product.uom;
                                    double itemqty = pbdl.ElementAt(p).qty * invdtl.qty;
                                    var prdbdltmp = db.products.Where(x => x.id == itemid).FirstOrDefault();
                                    if (prdbdltmp != null)
                                    {
                                        if (prdbdltmp.stock == 1)
                                        {
                                            Invoice_m_Invoice_Items invtmp = new Invoice_m_Invoice_Items();
                                            invtmp = invdtl;
                                            invtmp.productid = itemid;
                                            invtmp.productdesc = itemdesc;
                                            invtmp.productcode = prdbdltmp.productcode;
                                            invtmp.uom = itemuom;
                                            invtmp.qty = Convert.ToInt32(itemqty);
                                            AddStockMovementTableForVoidInvoiceItem(invtmp, tmpobj.branchcode, "VOID POS", tmpobj.resourcecode, rid);
                                            //AddIssueToMovementTable(invdtl, branchcode, stktype, resourcecode, rid);
                                        }
                                        else
                                        {
                                            //AddPackageToRedemptionTable(invdtl.id, itemid, itemdesc, itemuom, cussupid, "INVOICE", resourcecode, rid, itemqty,cussupid);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (prodtmp.stock == 1)
                        AddStockMovementTableForVoidInvoiceItem(invdtl, tmpobj.branchcode, "VOID POS", tmpobj.resourcecode, rid);
                }
                returnValue = true;
            }
            catch (Exception e)
            { 
            }
            return returnValue;
        }

        public void AddStockMovementTableForVoidInvoiceItem(dynamic item, string branchcode, string resource, string resourcecode, int rid = 0)
        {
            int pid = item.productid;
            if (item.qty != 0)
            {
                stock_m_stockmovement tmp = db.StockMovement.Where(x => x.productid == pid && x.branchcode == branchcode).OrderByDescending(x => x.id).FirstOrDefault();
                double? prebalance = 0;
                if (tmp != null)
                    prebalance = tmp.productbalance;

                stock_m_stockmovement mov = new stock_m_stockmovement();
                //mov.id = 0;
                mov.resourcecode = resourcecode; //topupDtl.resourcecode;
                mov.productid = item.productid;
                mov.productcode = item.productcode;
                mov.productdesc = item.productdesc;
                mov.uom = item.uom;
                mov.unitprice = item.unitprice;
                mov.currency = item.currency;
                mov.exchangerate = item.exchangerate;
                mov.createid = Convert.ToInt32(Session["userid"]);//topupDtl.createid;   
                mov.stockmoduletype = resource;
                mov.cocode = Convert.ToString(Session["cocode"]);
                mov.branchcode = branchcode; //Convert.ToString(Session["branchcode"]);

                if (item.qty > 0)
                {
                    tmp = db.StockMovement.Where(x => x.productid == pid && x.branchcode == branchcode && x.lastbalance > 0).OrderBy(x => x.id).FirstOrDefault();
                    if (tmp != null)
                    {
                        double? plbal = 0;
                        plbal = tmp.lastbalance;
                        tmp.lastbalance = tmp.lastbalance + item.qty;
                        db.SaveChanges();
                        saveToLog(rid, tmp.id, "Update", "Update LastBalance for Adjustment ProductID -" + pid + ",Branch Code-" + tmp.branchcode, "Ref no- " + tmp.resourcecode + ", Item ID- " + tmp.id.ToString() + ", Qty-" + item.qty + ", Old last balance -" + plbal.ToString() + ", New lastbalance-" + tmp.lastbalance.ToString());
                        mov.stockrefid = tmp.id;
                        mov.lastbalance = 0;
                    }
                    else
                        mov.lastbalance = item.qty;

                    mov.createdate = DateTime.Now;
                    mov.lastmodifieddate = DateTime.Now;
                    mov.qty = item.qty;
                    mov.taxamount = item.taxamount;
                    mov.discountamount = item.discountamount;
                    mov.lineamount = item.lineamount;//(item.unitprice * item.qty) + item.taxamount - item.discountamount;                                 
                    mov.productbalance = prebalance + mov.qty;
                    //redemp.remark = "Top Up";
                    db.StockMovement.Add(mov);
                    db.SaveChanges();
                    saveToLog(rid, mov.id, "CREATE", "Add New Balance  ProductID -" + item.productid + ",Branch Code-" + branchcode, "Ref no- " + resourcecode + ", Item ID- " + item.id.ToString() + "Movement ID -" + mov.id.ToString());
                }
            }
        }
        [Authorize]
        public Boolean addToRedemptionTableForVoidItem(Invoice_m_Invoice inv, double? total, string rtype, string ttype)
        {
            Boolean returnValue = false;
            try {
                CusSup_m_CusRedemption obj = new CusSup_m_CusRedemption();
                int mid = inv.cussupid;
                CusSup_m_CusRedemption redempttmp = db.CusSupRedemption.Where(x => x.cussupid == mid && x.redemptiontype == rtype).OrderByDescending(x => x.id).FirstOrDefault();
                double? prebalance = 0;
                if (redempttmp != null)
                { prebalance = redempttmp.balance; }

                if (total != 0)
                {
                    obj.createdate = DateTime.Now;
                    obj.lastmodifieddate = DateTime.Now;
                    obj.invoiceitemid = 0;
                    obj.cussupid = inv.cussupid;
                    obj.productid = 0;
                    obj.productdesc = "Void " + ttype + "# " + inv.resourcecode + " - Reverse back point";
                    obj.remark = "Void " + ttype + "# " + inv.resourcecode;
                    obj.resource = ttype + "VOID";
                    obj.RefNo = inv.resourcecode;
                    obj.branchcode = Convert.ToString(Session["branchcode"]);
                    obj.cocode = Convert.ToString(Session["cocode"]);
                    obj.redemptiontype = rtype;
                    obj.createid = Convert.ToInt32(Session["userid"]);
                    if (total > 0)
                    {
                        obj.credit = 0;
                        obj.debit = total;
                    }
                    else
                    {
                        obj.debit = 0;
                        obj.credit = (total * (-1));
                    }

                    obj.balance = prebalance + obj.credit - obj.debit;
                    db.CusSupRedemption.Add(obj);
                    db.SaveChanges();
                    returnValue = true;
                }
            }
            catch (Exception e)
            {
            }
            return returnValue;
        }

        [Authorize]
        public Boolean addToRedemptionTableForVoidPackage(string  refno, string ttype)
        {

            Boolean returnValue = false;
            try
            {
                ICollection<CusSup_m_CusRedemption> cusRedList = db.CusSupRedemption.Where(x => x.RefNo == refno && x.redemptiontype == "PACKAGE").ToList();
                for (int i = 0; i < cusRedList.Count; i++)
                {
                    CusSup_m_CusRedemption obj = new CusSup_m_CusRedemption();
                    int mid = cusRedList.ElementAt(i).cussupid;
                    int pid =cusRedList.ElementAt(i).productid;
                    CusSup_m_CusRedemption redempttmp = db.CusSupRedemption.Where(x => x.cussupid == mid && x.productid == pid && x.redemptiontype == "PACKAGE").OrderByDescending(x => x.id).FirstOrDefault();
                    double? prebalance = 0;
                    if (redempttmp != null)
                    { prebalance = redempttmp.balance; }
                    double? total = cusRedList.ElementAt(i).credit - cusRedList.ElementAt(i).debit;
                    if (total != 0)
                    {
                        obj.createdate = DateTime.Now;
                        obj.lastmodifieddate = DateTime.Now;
                        obj.invoiceitemid = cusRedList.ElementAt(i).invoiceitemid;
                        obj.cussupid = cusRedList.ElementAt(i).cussupid;
                        obj.productid = pid;
                        obj.productdesc = cusRedList.ElementAt(i).productdesc;
                        obj.remark = "Void " + ttype + "# " + refno;
                        obj.resource = ttype + "VOID";
                        obj.RefNo = refno;
                        obj.branchcode = Convert.ToString(Session["branchcode"]);
                        obj.cocode = Convert.ToString(Session["cocode"]);
                        obj.redemptiontype = "PACKAGE";
                        obj.createid = Convert.ToInt32(Session["userid"]);
                        obj.uom = cusRedList.ElementAt(i).uom;
                        if (total > 0)
                        {
                            obj.credit = 0;
                            obj.debit = total;
                        }
                        else
                        {
                            obj.debit = 0;
                            obj.credit = (total * (-1));
                        }

                        obj.balance = prebalance + obj.credit - obj.debit;
                        db.CusSupRedemption.Add(obj);
                        db.SaveChanges();
                        returnValue = true;
                    }
                }
            }
            catch (Exception e)
            {
            }
            return returnValue;
        }

        [HttpPost]
        [Authorize]
        //public JsonResult POSClose(int posid=0, string resource="POS",string branchcode ="")
        public string POSClose(int posid = 0, string resource = "POS", string branchcode = "")
        {
            var returnStr = "FAIL";
            if (Session["userid"] != null)
            {
                try
                {

                    var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                    int rid = 0;
                    if (ridtmp != null) rid = Convert.ToInt32(ridtmp);

                    var ptmp = db.sales.Where(x => x.id == posid).FirstOrDefault();
                    if (ptmp != null)
                    {
                        //if (ptmp.status.ToUpper() == "ACTIVE")
                        //{
                            //ptmp.status = "CLOSE";
                            //db.SaveChanges();
                            //saveToLog(rid, ptmp.id, "Update", "Close POS refid" + ptmp.id + " , POS# " + ptmp.resourcecode);
                        ICollection<Invoice_m_Invoice_Items> positem = db.saleItems.Where(x => x.invoiceid == posid).ToList();
                        for (int i = 0; i < positem.Count; i++)
                        {
                            if (positem.ElementAt(i).awarddollars > 0 || positem.ElementAt(i).awardbonus > 0)
                                AddToRedemptionTable(positem.ElementAt(i), ptmp.cussupid, resource, ptmp.resourcecode, rid);

                            int pid = positem.ElementAt(i).productid;
                            //int positemid = positem.ElementAt(i).id;
                            //var pkgtmp = db.products.Where(x => x.id == pid && (x.category == "PACKAGE" || x.category == "Package")).FirstOrDefault();
                            var pkgtmp = db.products.Where(x => x.id == pid ).FirstOrDefault();

                            if (pkgtmp != null)
                            {
                                if (pkgtmp.category.ToUpper() == "PACKAGE")
                                {
                                    ICollection<Product_m_ProductBundles> pbdl = db.productBundle.Include("Product").Where(x => x.productid == pid).ToList();
                                    if (pbdl != null)
                                    {
                                        if (pbdl.Count > 0)
                                        {
                                            for (int p = 0; p < pbdl.Count; p++)
                                            {
                                                int itemid = pbdl.ElementAt(p).itemid;
                                                string itemdesc = pbdl.ElementAt(p).Product.desc;
                                                string itemuom = pbdl.ElementAt(p).Product.uom;
                                                double itemqty = pbdl.ElementAt(p).qty * positem.ElementAt(i).qty;                                                
                                                var prdbdltmp = db.products.Where(x => x.id == itemid).FirstOrDefault();
                                                if (prdbdltmp != null)
                                                {
                                                    if (prdbdltmp.stock == 1)
                                                    {
                                                        Invoice_m_Invoice_Items invtmp = new Invoice_m_Invoice_Items();
                                                        //invtmp =  positem.ElementAt(i);
                                                        invtmp.unitprice = positem.ElementAt(i).unitprice;
                                                        invtmp.currency = positem.ElementAt(i).currency;
                                                        invtmp.exchangerate = positem.ElementAt(i).exchangerate;
                                                        invtmp.lineamount = positem.ElementAt(i).lineamount;
                                                        invtmp.taxamount = positem.ElementAt(i).taxamount;
                                                        invtmp.discountamount = positem.ElementAt(i).discountamount;                                                        
                                                        invtmp.productid = itemid;
                                                        invtmp.productdesc = itemdesc;
                                                        invtmp.productcode = prdbdltmp.productcode;
                                                        invtmp.uom = itemuom;
                                                        invtmp.qty = itemqty;
                                                        AddIssueToMovementTable(invtmp, branchcode, "ISSUE", positem.ElementAt(i).resourcecode, rid);
                                                    }
                                                    else
                                                    {
                                                        // When the POS was hold, the insertion to packageredemption is already done. no need to add again.
                                                        //    AddPackageToRedemptionTable(positem.ElementAt(i).id, positem.ElementAt(i).productcode, positem.ElementAt(i).productdesc, itemid, itemdesc, itemuom, ptmp.cussupid, resource, ptmp.resourcecode, rid, itemqty);
                                                    }                                                        
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (pkgtmp.stock == 1)
                                {
                                    AddIssueToMovementTable(positem.ElementAt(i), branchcode, "ISSUE", positem.ElementAt(i).resourcecode, rid);
                                }
                            }

                            AddSalesFigure(positem.ElementAt(i));
                        }
                        returnStr = "SUCCESS";
                        //}
                    }
                }
                catch (Exception e)
                { returnStr = e.Message.ToString(); }
            }
            else
            {
                Response.RedirectToRoute(new { controller = "Access", action = "Login" });
                returnStr = "SESSION EXPIRED";
            }            
            //return Json(returnStr, JsonRequestBehavior.AllowGet);
            return returnStr;
        }

        public void AddSalesFigure(Invoice_m_Invoice_Items item,int rid=0)
        { 
            string branchcode = Session["branchcode"].ToString();
            string cocode = Session["cocode"].ToString();
            int uid = Convert.ToInt32(Session["userid"].ToString());
            int campaignid = 1; int groupid = 0;
            double? prevactual = 0;
            var cmptmp = db.ConfigDefault.Where(x=> x.key == "CAMPAIGNID").FirstOrDefault();
            if (cmptmp != null)
            { campaignid = Convert.ToInt16(cmptmp.value);  }
            var bgtmp = db.BranchGroupLinks.Where(x => x.branchcode == branchcode).FirstOrDefault();
            if (bgtmp != null)
            { groupid = bgtmp.groupid; }
            var saleFig = db.CampaignBranchSalesTarget.Where(x => x.createdate == DateTime.Today && x.branchcode == branchcode && x.groupid == groupid && x.cocode == cocode && x.staffid == 0).FirstOrDefault();
            Campaign_m_CampaignDetails campaigndtl;
            if (saleFig != null)
            {
                prevactual = saleFig.salesactual;
                saleFig.salesactual = saleFig.salesactual + item.lineamount;
                saveToLog(rid, saleFig.id, "Update", "Update sales actual figure : -" + saleFig.id.ToString()  + ", campaign id " + saleFig.campaignid  + ", Group:" + saleFig.groupid.ToString()  + ",Branch Code-" +  saleFig.branchcode + ", Date " + saleFig.createdate.ToString() , "Previous Sales Actual- " + prevactual.ToString() , "New Actual - " + saleFig.salesactual.ToString());
            }
            else
            {
                saleFig = new campaign_m_branchsalestarget();
                saleFig.createdate = DateTime.Today;
                saleFig.lastmodifieddate = DateTime.Now; 
                saleFig.cocode = cocode;
                saleFig.branchcode = branchcode;
                saleFig.groupid = groupid;
                saleFig.campaignid = campaignid;
                saleFig.staffid = 0;
                saleFig.salesactual = item.lineamount;
                saleFig.salesforecast = 0;
                saleFig.userid = uid;
                db.CampaignBranchSalesTarget.Add(saleFig);
                saveToLog(rid, saleFig.id, "CREATE", "CREATE SALES Fig: campaign id " + saleFig.campaignid + ", Group:" + saleFig.groupid.ToString() + ",Branch Code-" + saleFig.branchcode + ", Date " + saleFig.createdate.ToString() + " , Sales Actual - " + saleFig.salesactual.ToString());
            }
            db.SaveChanges();
            var stafflist = db.saleStaffs.Where(x => x.invoiceid == item.invoiceid && x.resourcedetailid == item.id).ToList();
            for (int i = 0; i < stafflist.Count; i++)
            {
                int sid = stafflist.ElementAt(i).staffid;
                int? dtlid = stafflist.ElementAt(i).resourcedetailid;
                campaigndtl = new Campaign_m_CampaignDetails();
                campaigndtl.createdate = DateTime.Today;
                campaigndtl.cocode = cocode;
                campaigndtl.branchcode = branchcode;
                campaigndtl.groupid = groupid;
                campaigndtl.campaignid = campaignid;
                campaigndtl.staffid = stafflist.ElementAt(i).staffid;
                campaigndtl.salesactual = item.lineamount * stafflist.ElementAt(i).percent / 100.0;
                campaigndtl.salesforecast = 0;
                campaigndtl.resourceid = item.invoiceid;
                campaigndtl.resourcedetailid = dtlid;
                campaigndtl.productactual = 0;
                campaigndtl.productforecast = 0;
                campaigndtl.categoryid = 0;
                campaigndtl.categorytypeid = 1;
                campaigndtl.userid = uid;
                campaigndtl.time = new TimeSpan(DateTime.Now.TimeOfDay.Hours,0,0);
                db.CampaignDetails.Add(campaigndtl);
                db.SaveChanges();
                saveToLog(rid, saleFig.id, "CREATE", "CREATE SALES Fig in campaigndetail : campaign id " + saleFig.campaignid + ", Group:" + saleFig.groupid.ToString() + ",Branch Code-" + saleFig.branchcode + ", Date " + saleFig.createdate.ToString() + ", Staff ID: " + saleFig.staffid.ToString() + " , Sales Actual - " + saleFig.salesactual.ToString());

            //    saleFig = db.CampaignBranchSalesTarget.Where(x => x.createdate == DateTime.Today && x.branchcode == branchcode && x.groupid == groupid && x.cocode == cocode && x.staffid == sid).FirstOrDefault();
            //    if (saleFig != null)
            //    {
            //        prevactual = saleFig.salesactual;
            //        saleFig.salesactual = saleFig.salesactual + (item.lineamount * stafflist.ElementAt(i).percent /100.0);
            //        saveToLog(rid, saleFig.id, "Update", "Update sales actual figure : -" + saleFig.id.ToString() + ", campaign id " + saleFig.campaignid + ", Group:" + saleFig.groupid.ToString() + ",Branch Code-" + saleFig.branchcode + ", Date " + saleFig.createdate.ToString() + ",Staffid -" + saleFig.staffid.ToString()  , "Previous Sales Actual- " + prevactual.ToString(), "New Actual - " + saleFig.salesactual.ToString());
            //    }
            //    else
            //    {
            //        saleFig = new campaign_m_branchsalestarget();
            //        saleFig.createdate = DateTime.Today;
            //        saleFig.cocode = cocode;
            //        saleFig.branchcode = branchcode;
            //        saleFig.groupid = groupid;
            //        saleFig.campaignid = campaignid;
            //        saleFig.staffid = stafflist.ElementAt(i).staffid;
            //        saleFig.salesactual = item.lineamount * stafflist.ElementAt(i).percent / 100.0;
            //        saleFig.salesforecast = 0;
            //        saleFig.userid = uid;
            //        db.CampaignBranchSalesTarget.Add(saleFig);
            //        saveToLog(rid, saleFig.id, "CREATE", "CREATE SALES Fig: campaign id " + saleFig.campaignid + ", Group:" + saleFig.groupid.ToString() + ",Branch Code-" + saleFig.branchcode + ", Date " + saleFig.createdate.ToString() + ", Staff ID: " + saleFig.staffid.ToString()  + " , Sales Actual - " + saleFig.salesactual.ToString());
            //    }
            //    db.SaveChanges();
            }
        }

        public void AddIssueToMovementTable(dynamic item, string branchcode, string resource, string resourcecode, int rid = 0)
        {
            int pid = item.productid;
            if (item.qty != 0)
            {
                stock_m_stockmovement tmp = db.StockMovement.Where(x => x.productid == pid && x.branchcode == branchcode).OrderByDescending(x => x.id).FirstOrDefault();
                double? prebalance = 0;
                if (tmp != null)
                    prebalance = tmp.productbalance;

                stock_m_stockmovement mov = new stock_m_stockmovement();
                mov.lastbalance = 0;
                mov.productid = item.productid;
                mov.productcode = item.productcode;
                mov.productdesc = item.productdesc;
                mov.resourcecode = resourcecode;
                mov.uom = item.uom;
                mov.unitprice = item.unitprice;
                mov.currency = item.currency;
                mov.exchangerate = Convert.ToDouble(item.exchangerate);
                mov.createid = Convert.ToInt32(Session["userid"]);
                mov.stockmoduletype = resource;
                mov.cocode = Convert.ToString(Session["cocode"]);
                mov.branchcode = branchcode; //Convert.ToString(Session["branchcode"]);

                double? tmpbalance = item.qty;
                Boolean bflag = true;
                while (tmpbalance > 0 && bflag)
                {
                    //mov = new stock_m_stockmovement();
                    //mov.id = 0;
                    mov.lastbalance = 0;
                    //Finish receive last balace count
                    tmp = db.StockMovement.Where(x => x.productid == pid && x.branchcode == branchcode && x.lastbalance > 0).OrderBy(x => x.id).FirstOrDefault();
                    if (tmp != null)
                    {
                        double? plbal = 0;
                        double? pqty = 0;
                        plbal = tmp.lastbalance;
                        if (tmp.lastbalance >= tmpbalance)
                        {
                            pqty = tmpbalance;
                            tmp.lastbalance = tmp.lastbalance - tmpbalance;
                            tmpbalance = 0;
                        }
                        else
                        {
                            pqty = tmp.lastbalance;
                            tmpbalance = tmpbalance - tmp.lastbalance;
                            tmp.lastbalance = 0;
                            //tmp.lastbalance - item.qty;                            
                        }

                        db.SaveChanges();
                        saveToLog(rid, tmp.id, "Update", "Update LastBalance for Adjustment ProductID -" + pid + ",Branch Code-" + tmp.branchcode, "Ref no- " + tmp.resourcecode + ", Item ID- " + tmp.id.ToString() + ", Qty-" + item.qty + ", Old last balance -" + plbal.ToString() + ", New lastbalance-" + tmp.lastbalance.ToString());
                        //Finish receive last balace count

                        mov.stockrefid = tmp.id;
                        mov.createdate = DateTime.Now;
                        mov.lastmodifieddate = DateTime.Now;
                        mov.qty = pqty * (-1); //item.qty;                        
                        mov.taxamount = (item.taxamount / item.qty) * pqty;
                        mov.discountamount = (item.discountamount / item.qty) * pqty;
                        mov.lineamount = (item.lineamount / item.qty) * pqty;
                        mov.productbalance = prebalance + mov.qty;
                        prebalance = mov.productbalance;
                        db.StockMovement.Add(mov);
                        db.SaveChanges();
                        saveToLog(rid, mov.id, "CREATE", "Add New Balance ProductID -" + item.productid + ",Branch Code-" + branchcode, "Ref no- " + resourcecode + ", Item ID- " + item.id.ToString() + "Movement ID -" + mov.id.ToString());
                        if (tmpbalance > 0)
                        {
                            tmp = db.StockMovement.Where(x => x.productid == pid && x.branchcode == branchcode).OrderByDescending(x => x.id).FirstOrDefault();
                            //prebalance = 0;
                            if (tmp != null)
                                prebalance = tmp.productbalance;
                        }
                    }
                    else
                        bflag = false;
                }

                //if (resource.Trim().ToUpper() == "ISSUE")
                if (bflag == false && tmpbalance > 0)
                {
                    //mov.id = 0;
                    mov.lastbalance = tmpbalance * (-1);
                    mov.stockrefid = 0;
                    mov.createdate = DateTime.Now;
                    mov.lastmodifieddate = DateTime.Now;
                    mov.qty = tmpbalance * (-1);
                    mov.taxamount = (item.taxamount / item.qty) * tmpbalance;
                    mov.discountamount = (item.discountamount / item.qty) * tmpbalance;
                    mov.lineamount = (item.lineamount / item.qty) * tmpbalance;
                    mov.productbalance = prebalance + mov.qty;
                    db.StockMovement.Add(mov);
                    db.SaveChanges();
                    saveToLog(rid, mov.id, "CREATE", "Add New Balance ProductID -" + item.productid + ",Branch Code-" + branchcode, "Ref no- " + resourcecode + ", Item ID- " + item.id.ToString() + "Movement ID -" + mov.id.ToString());
                }
            }
        }

        [Authorize]
        public void AddPackageToRedemptionTable(int itemid,string pkgcode,string pkgdesc, int pid,string pdesc, string uom,int memberid, string resource, string resourcecode, int rid = 0, double qty=0)
        {
            if (qty > 0)
            {
                CusSup_m_CusRedemption redempt = db.CusSupRedemption.Where(x => x.cussupid == memberid && x.productid == pid && x.resource == "PACKAGEREDEEM" && x.redemptiontype == "PQ" && x.uom == uom).OrderByDescending(x => x.id).FirstOrDefault();
                double? prebalance = 0;
                if (redempt != null)
                { prebalance = redempt.balance; }

                CusSup_m_CusRedemption topuptmp = new CusSup_m_CusRedemption();
                topuptmp.invoiceitemid = itemid;
                topuptmp.cussupid = memberid;
                topuptmp.createdate = DateTime.Now;
                topuptmp.lastmodifieddate = DateTime.Now;
                topuptmp.RefNo = resourcecode; //posdtl.resourcecode;
                topuptmp.productid = pid;
                topuptmp.productdesc = pdesc;
                topuptmp.debit = 0;
                topuptmp.credit = qty;
                topuptmp.uom = uom;
                topuptmp.redemptiontype = "PQ";
                topuptmp.balance = prebalance + topuptmp.credit;
                topuptmp.createid = Convert.ToInt32(Session["userid"]);// posdtl.createid;                
                topuptmp.resource = resource;
                topuptmp.cocode = Convert.ToString(Session["cocode"]);
                topuptmp.branchcode = Convert.ToString(Session["branchcode"]);
                //Added by ZawZO on 1 Dec 2015
                topuptmp.packagecode = pkgcode;
                topuptmp.packagedesc = pkgdesc;
                db.CusSupRedemption.Add(topuptmp);
                db.SaveChanges();
                saveToLog(rid, topuptmp.id, "CREATE", "Add New Balance for Award Citi$ - ProductID -" + pid, "Ref no- " + resourcecode + ", Item ID- " + itemid + "Redemption ID -" + topuptmp.id.ToString());
            }
        }

      
        //[Authorize]
        //public void AddServiceQuantityToRedemptionTable(Invoice_m_Invoice_Items posdtl, int memberid, string resource, string resourcecode, int rid = 0)
        //{
        //    if (posdtl.awarddollars > 0)
        //    {
        //        CusSup_m_CusRedemption redempt = db.CusSupRedemption.Where(x => x.cussupid == memberid && x.redemptiontype == "C$").OrderByDescending(x => x.id).FirstOrDefault();
        //        double? prebalance = 0;
        //        if (redempt != null)
        //        { prebalance = redempt.balance; }

        //        CusSup_m_CusRedemption topuptmp = new CusSup_m_CusRedemption();
        //        topuptmp.invoiceitemid = posdtl.id;
        //        topuptmp.cussupid = memberid;
        //        topuptmp.createdate = DateTime.Now;
        //        topuptmp.lastmodifieddate = DateTime.Now;
        //        topuptmp.RefNo = resourcecode;
        //        topuptmp.productid = posdtl.productid;
        //        topuptmp.productdesc = posdtl.productdesc;
        //        topuptmp.debit = 0;
        //        topuptmp.credit = (posdtl.awarddollars * posdtl.qty);
        //        topuptmp.redemptiontype = "SQ";
        //        topuptmp.balance = prebalance + topuptmp.credit - posdtl.redeemdollars;
        //        topuptmp.createid = Convert.ToInt32(Session["userid"]);
        //        //redemp.remark = "Top Up";
        //        topuptmp.resource = resource;
        //        topuptmp.cocode = Convert.ToString(Session["cocode"]);
        //        topuptmp.branchcode = Convert.ToString(Session["branchcode"]);
        //        db.CusSupRedemption.Add(topuptmp);
        //        db.SaveChanges();
        //        saveToLog(rid, topuptmp.id, "CREATE", "Add New Balance for Service Quantity - ProductID -" + posdtl.productid, "Ref no- " + resourcecode + ", Item ID- " + posdtl.id.ToString() + "Redemption ID -" + topuptmp.id.ToString());
        //    }

           
        //}
     
        [Authorize]
        public void AddToRedemptionTable(Invoice_m_Invoice_Items posdtl, int memberid, string resource, string resourcecode, int rid = 0)
        {
            if (posdtl.awarddollars > 0)
            {
                CusSup_m_CusRedemption redempt = db.CusSupRedemption.Where(x => x.cussupid == memberid && x.redemptiontype == "C$").OrderByDescending(x => x.id).FirstOrDefault();
                double? prebalance = 0;
                if (redempt != null)
                { prebalance = redempt.balance; }

                CusSup_m_CusRedemption topuptmp = new CusSup_m_CusRedemption();
                topuptmp.invoiceitemid = posdtl.id;
                topuptmp.cussupid = memberid;
                topuptmp.createdate = DateTime.Now;
                topuptmp.lastmodifieddate = DateTime.Now;
                topuptmp.RefNo = resourcecode; 
                topuptmp.productid = posdtl.productid;
                topuptmp.productdesc = posdtl.productdesc;
                topuptmp.debit = 0;
                topuptmp.credit = (posdtl.awarddollars * posdtl.qty);
                topuptmp.redemptiontype = "C$";
                topuptmp.balance = prebalance + topuptmp.credit - posdtl.redeemdollars;
                topuptmp.createid = Convert.ToInt32(Session["userid"]);
                //redemp.remark = "Top Up";
                topuptmp.resource = resource;
                topuptmp.cocode = Convert.ToString(Session["cocode"]);
                topuptmp.branchcode = Convert.ToString(Session["branchcode"]);
                db.CusSupRedemption.Add(topuptmp);
                db.SaveChanges();
                saveToLog(rid, topuptmp.id, "CREATE", "Add New Balance for Award Citi$ - ProductID -" + posdtl.productid, "Ref no- " + resourcecode + ", Item ID- " + posdtl.id.ToString() + "Redemption ID -" + topuptmp.id.ToString());
            }

            if (posdtl.awardbonus > 0)
            {
                CusSup_m_CusRedemption redempttmp = db.CusSupRedemption.Where(x => x.cussupid == memberid && x.redemptiontype == "B$").OrderByDescending(x => x.id).FirstOrDefault();
                double? prebalance = 0;
                if (redempttmp != null)
                { prebalance = redempttmp.balance; }

                CusSup_m_CusRedemption topupB = new CusSup_m_CusRedemption();
                topupB.invoiceitemid = posdtl.id;
                topupB.cussupid = memberid;
                topupB.createdate = DateTime.Now;
                topupB.lastmodifieddate = DateTime.Now;
                topupB.RefNo = resourcecode; 
                topupB.productid = posdtl.productid;
                topupB.productdesc = posdtl.productdesc;
                topupB.debit = 0;
                topupB.credit = (posdtl.awardbonus * posdtl.qty);
                topupB.redemptiontype = "B$";
                topupB.balance = prebalance + topupB.credit - posdtl.redeembonus;
                topupB.createid = Convert.ToInt32(Session["userid"]); //posdtl.createid;
                topupB.resource = resource;
                topupB.cocode = Convert.ToString(Session["cocode"]);
                topupB.branchcode = Convert.ToString(Session["branchcode"]);
                db.CusSupRedemption.Add(topupB);
                db.SaveChanges();
                saveToLog(rid, topupB.id, "CREATE", "Add New Balance for Award Bonus$ - ProductID -" + posdtl.productid, "Ref no- " + resourcecode + ", Item ID- " + posdtl.id.ToString() + "Redemption ID -" + topupB.id.ToString());
            }

            // Kyaw on 20240810 - Add Service Quantity
            if (posdtl.qty > 0) {
                CusSup_m_CusRedemption redempttmp = db.CusSupRedemption.Where(x => x.cussupid == memberid && x.redemptiontype == "SQ" && x.productid == posdtl.productid).OrderByDescending(x => x.id).FirstOrDefault();
                double? prebalance = 0;
                if (redempttmp != null)
                { prebalance = redempttmp.balance; }

                CusSup_m_CusRedemption topupB = new CusSup_m_CusRedemption();
                topupB.invoiceitemid = posdtl.id;
                topupB.cussupid = memberid;
                topupB.createdate = DateTime.Now;
                topupB.lastmodifieddate = DateTime.Now;
                topupB.RefNo = resourcecode;
                topupB.productid = posdtl.productid;
                topupB.productdesc = posdtl.productdesc;
                topupB.debit = 0;
                topupB.credit = posdtl.qty;
                topupB.uom = posdtl.uom;
                topupB.redemptiontype = "SQ";
                topupB.balance = prebalance + posdtl.qty;
                topupB.createid = Convert.ToInt32(Session["userid"]); //posdtl.createid;
                topupB.resource = resource;
                topupB.cocode = Convert.ToString(Session["cocode"]);
                topupB.branchcode = Convert.ToString(Session["branchcode"]);
                db.CusSupRedemption.Add(topupB);
                db.SaveChanges();
                saveToLog(rid, topupB.id, "CREATE", "Add New Balance for Service Quantity - ProductID -" + posdtl.productid, "Ref no- " + resourcecode + ", Item ID- " + posdtl.id.ToString() + "Redemption ID -" + topupB.id.ToString());
            }
        }

        public void AddToRedemptionTableForEditItem(Invoice_m_Invoice_Items tmp, Invoice_m_Invoice_Items topupDtl, int memberid, string resource, string resourcecode)
        {
            double? prevc = 0;
            double? prevb = 0;

            if (tmp.redeemdollars != topupDtl.redeemdollars)
            {
                tmp.awarddollars = topupDtl.awarddollars;
                CusSup_m_CusRedemption redempttmp = db.CusSupRedemption.Where(x => x.cussupid == memberid && x.redemptiontype == "C$").OrderByDescending(x => x.id).FirstOrDefault();
                double? prebalance = 0;
                if (redempttmp != null)
                { prebalance = redempttmp.balance; }

                tmp.awarddollars = topupDtl.awarddollars;
                CusSup_m_CusRedemption redempt = new CusSup_m_CusRedemption(); 
                redempt.cussupid = memberid;
                redempt.createdate = DateTime.Now;
                redempt.lastmodifieddate = DateTime.Now;
                redempt.RefNo = resourcecode; 
                redempt.productid = topupDtl.productid;
                redempt.productdesc = topupDtl.productdesc;
                redempt.credit = 0;
                redempt.debit = (topupDtl.redeemdollars - tmp.redeemdollars);
                redempt.redemptiontype = "C$";
                redempt.balance = prebalance - redempt.debit;
                redempt.createid = topupDtl.createid;
                redempt.remark = "Edit " + resource + " Citi$ from -" + tmp.redeemdollars + " - " + topupDtl.redeemdollars;
                redempt.resource = resource;
                redempt.cocode = Convert.ToString(Session["cocode"]);
                redempt.branchcode = Convert.ToString(Session["branchcode"]);
                prevc = redempt.debit;
                db.CusSupRedemption.Add(redempt);
            }

            if (tmp.redeembonus != topupDtl.redeembonus)
            {
                tmp.awardbonus = topupDtl.awardbonus;
                CusSup_m_CusRedemption redempttmp = db.CusSupRedemption.Where(x => x.cussupid == memberid && x.redemptiontype == "B$").OrderByDescending(x => x.id).FirstOrDefault();
                double? prebalance = 0;
                if (redempttmp != null)
                { prebalance = redempttmp.balance; }

                tmp.awarddollars = topupDtl.awarddollars;
                CusSup_m_CusRedemption redemptB = new CusSup_m_CusRedemption(); 
                redemptB.cussupid = memberid;
                redemptB.createdate = DateTime.Now;
                redemptB.lastmodifieddate = DateTime.Now;
                redemptB.RefNo = resourcecode; 
                redemptB.productid = topupDtl.productid;
                redemptB.productdesc = topupDtl.productdesc;
                redemptB.credit = 0;
                redemptB.debit = (topupDtl.awardbonus - tmp.awardbonus);
                redemptB.redemptiontype = "B$";
                redemptB.balance = prebalance - redemptB.debit;
                redemptB.createid = topupDtl.createid;
                redemptB.remark = "Edit " + resource + " Bonus$ from -" + tmp.redeembonus + " - " + topupDtl.redeembonus;
                redemptB.resource = resource;
                redemptB.cocode = Convert.ToString(Session["cocode"]);
                redemptB.branchcode = Convert.ToString(Session["branchcode"]);
                prevb = redemptB.debit;
                db.CusSupRedemption.Add(redemptB);
            }
            if (tmp.awarddollars != topupDtl.awarddollars)
            {
                tmp.awarddollars = topupDtl.awarddollars;
                CusSup_m_CusRedemption redempttmp = db.CusSupRedemption.Where(x => x.cussupid == memberid && x.redemptiontype == "C$").OrderByDescending(x => x.id).FirstOrDefault();
                double? prebalance = 0;
                if (redempttmp != null)
                { prebalance = redempttmp.balance; }

                tmp.awarddollars = topupDtl.awarddollars;
                CusSup_m_CusRedemption Aredempt = new CusSup_m_CusRedemption(); 
                Aredempt.cussupid = memberid;
                Aredempt.createdate = DateTime.Now;
                Aredempt.lastmodifieddate = DateTime.Now;
                Aredempt.RefNo = resourcecode; 
                Aredempt.productid = topupDtl.productid;
                Aredempt.productdesc = topupDtl.productdesc;
                Aredempt.debit = 0;
                Aredempt.credit = (topupDtl.awarddollars - tmp.awarddollars);
                Aredempt.redemptiontype = "C$";
                Aredempt.balance = prebalance + Aredempt.credit - prevc;
                Aredempt.createid = topupDtl.createid;
                Aredempt.remark = "Edit " + resource + " Citi$ from -" + tmp.awarddollars + " - " + topupDtl.awarddollars;
                Aredempt.resource = resource;
                Aredempt.cocode = Convert.ToString(Session["cocode"]);
                Aredempt.branchcode = Convert.ToString(Session["branchcode"]);
                db.CusSupRedemption.Add(Aredempt);
            }

            if (tmp.awardbonus != topupDtl.awardbonus)
            {
                tmp.awardbonus = topupDtl.awardbonus;
                CusSup_m_CusRedemption redempttmp = db.CusSupRedemption.Where(x => x.cussupid == memberid && x.redemptiontype == "B$").OrderByDescending(x => x.id).FirstOrDefault();
                double? prebalance = 0;
                if (redempttmp != null)
                { prebalance = redempttmp.balance; }

                tmp.awarddollars = topupDtl.awarddollars;
                CusSup_m_CusRedemption AredemptB = new CusSup_m_CusRedemption(); 
                AredemptB.cussupid = memberid;
                AredemptB.createdate = DateTime.Now;
                AredemptB.lastmodifieddate = DateTime.Now;
                AredemptB.RefNo = resourcecode; 
                AredemptB.productid = topupDtl.productid;
                AredemptB.productdesc = topupDtl.productdesc;
                AredemptB.debit = 0;
                AredemptB.credit = (topupDtl.awardbonus - tmp.awardbonus);
                AredemptB.redemptiontype = "B$";
                AredemptB.balance = prebalance + AredemptB.credit - prevb;
                AredemptB.createid = topupDtl.createid;
                AredemptB.remark = "Edit " + resource + " Bonus$ from -" + tmp.awardbonus + " - " + topupDtl.awardbonus;
                AredemptB.resource = resource;
                AredemptB.cocode = Convert.ToString(Session["cocode"]);
                AredemptB.branchcode = Convert.ToString(Session["branchcode"]);
                db.CusSupRedemption.Add(AredemptB);
            }
        }
        [Authorize]
        public void AddToRedemptionTableForOrderTaking(Invoice_m_Invoice_Items posdtl, int memberid, string resource, string resourcecode, int rid = 0)
        {

            if (posdtl.redeemdollars > 0)
            {
                CusSup_m_CusRedemption redempt = db.CusSupRedemption.Where(x => x.cussupid == memberid && x.redemptiontype == "C$").OrderByDescending(x => x.id).FirstOrDefault();
                double? prebalance = 0;
                if (redempt != null)
                { prebalance = redempt.balance; }

                CusSup_m_CusRedemption topuptmp = new CusSup_m_CusRedemption();
                topuptmp.invoiceitemid = posdtl.id;
                topuptmp.cussupid = memberid;
                topuptmp.createdate = DateTime.Now;
                topuptmp.lastmodifieddate = DateTime.Now;
                topuptmp.RefNo = resourcecode;
                topuptmp.productid = posdtl.productid;
                topuptmp.productdesc = posdtl.productdesc;
                topuptmp.debit = (posdtl.redeemdollars * posdtl.qty);
                topuptmp.credit = 0;
                topuptmp.redemptiontype = "C$";
                topuptmp.balance = prebalance - topuptmp.debit;
                topuptmp.createid = Convert.ToInt32(Session["userid"]);
                topuptmp.resource = resource;
                topuptmp.cocode = Convert.ToString(Session["cocode"]);
                topuptmp.branchcode = Convert.ToString(Session["branchcode"]);
                topuptmp.uom = posdtl.uom;
                db.CusSupRedemption.Add(topuptmp);
                db.SaveChanges();
                saveToLog(rid, topuptmp.id, "CREATE", "Add New Balance for Redeem Citi$ - ProductID -" + posdtl.productid, "Ref no- " + resourcecode + ", Item ID- " + posdtl.id.ToString() + "Redemption ID -" + topuptmp.id.ToString());
            }

            if (posdtl.awarddollars > 0)
            {
                CusSup_m_CusRedemption redempt = db.CusSupRedemption.Where(x => x.cussupid == memberid && x.redemptiontype == "C$").OrderByDescending(x => x.id).FirstOrDefault();
                double? prebalance = 0;
                if (redempt != null)
                { prebalance = redempt.balance; }

                CusSup_m_CusRedemption topuptmp = new CusSup_m_CusRedemption();
                topuptmp.invoiceitemid = posdtl.id;
                topuptmp.cussupid = memberid;
                topuptmp.createdate = DateTime.Now;
                topuptmp.lastmodifieddate = DateTime.Now;
                topuptmp.RefNo = resourcecode;
                topuptmp.productid = posdtl.productid;
                topuptmp.productdesc = posdtl.productdesc;
                topuptmp.debit = 0;
                topuptmp.credit = (posdtl.awarddollars * posdtl.qty);
                topuptmp.redemptiontype = "C$";
                topuptmp.balance = prebalance + topuptmp.credit;
                topuptmp.createid = Convert.ToInt32(Session["userid"]);
                topuptmp.resource = resource;
                topuptmp.cocode = Convert.ToString(Session["cocode"]);
                topuptmp.branchcode = Convert.ToString(Session["branchcode"]);
                topuptmp.uom = posdtl.uom;
                db.CusSupRedemption.Add(topuptmp);
                db.SaveChanges();
                saveToLog(rid, topuptmp.id, "CREATE", "Add New Balance for Award Citi$ - ProductID -" + posdtl.productid, "Ref no- " + resourcecode + ", Item ID- " + posdtl.id.ToString() + "Redemption ID -" + topuptmp.id.ToString());
            }

            if (posdtl.redeembonus > 0)
            {
                CusSup_m_CusRedemption redempttmp = db.CusSupRedemption.Where(x => x.cussupid == memberid && x.redemptiontype == "B$").OrderByDescending(x => x.id).FirstOrDefault();
                double? prebalance = 0;
                if (redempttmp != null)
                { prebalance = redempttmp.balance; }

                CusSup_m_CusRedemption topupB = new CusSup_m_CusRedemption();
                topupB.invoiceitemid = posdtl.id;
                topupB.cussupid = memberid;
                topupB.createdate = DateTime.Now;
                topupB.lastmodifieddate = DateTime.Now;
                topupB.RefNo = resourcecode;
                topupB.productid = posdtl.productid;
                topupB.productdesc = posdtl.productdesc;
                topupB.debit = (posdtl.redeembonus * posdtl.qty);
                topupB.credit = 0;
                topupB.redemptiontype = "B$";
                topupB.balance = prebalance - topupB.debit;
                topupB.createid = Convert.ToInt32(Session["userid"]); //posdtl.createid;
                topupB.resource = resource;
                topupB.cocode = Convert.ToString(Session["cocode"]);
                topupB.branchcode = Convert.ToString(Session["branchcode"]);
                topupB.uom = topupB.uom;
                db.CusSupRedemption.Add(topupB);
                db.SaveChanges();
                saveToLog(rid, topupB.id, "CREATE", "Add New Balance for Redeem Bonus$ - ProductID -" + posdtl.productid, "Ref no- " + resourcecode + ", Item ID- " + posdtl.id.ToString() + "Redemption ID -" + topupB.id.ToString());
            }

            if (posdtl.awardbonus > 0)
            {
                CusSup_m_CusRedemption redempttmp = db.CusSupRedemption.Where(x => x.cussupid == memberid && x.redemptiontype == "B$").OrderByDescending(x => x.id).FirstOrDefault();
                double? prebalance = 0;
                if (redempttmp != null)
                { prebalance = redempttmp.balance; }

                CusSup_m_CusRedemption topupB = new CusSup_m_CusRedemption();
                topupB.invoiceitemid = posdtl.id;
                topupB.cussupid = memberid;
                topupB.createdate = DateTime.Now;
                topupB.lastmodifieddate = DateTime.Now;
                topupB.RefNo = resourcecode;
                topupB.productid = posdtl.productid;
                topupB.productdesc = posdtl.productdesc;
                topupB.debit = 0;
                topupB.credit = (posdtl.awardbonus * posdtl.qty);
                topupB.redemptiontype = "B$";
                topupB.balance = prebalance + topupB.credit;
                topupB.createid = Convert.ToInt32(Session["userid"]); //posdtl.createid;
                topupB.resource = resource;
                topupB.cocode = Convert.ToString(Session["cocode"]);
                topupB.branchcode = Convert.ToString(Session["branchcode"]);
                topupB.uom = topupB.uom;
                db.CusSupRedemption.Add(topupB);
                db.SaveChanges();
                saveToLog(rid, topupB.id, "CREATE", "Add New Balance for Award Bonus$ - ProductID -" + posdtl.productid, "Ref no- " + resourcecode + ", Item ID- " + posdtl.id.ToString() + "Redemption ID -" + topupB.id.ToString());
            }
        }
      
        
        [HttpPost]
        [Authorize]
        public JsonResult POSSave(Invoice_m_Invoice pos, string resource = "POS", int soid = 0, double bal = 0, string itemids = "", string pitemids = "", int insertToRedemption = 0)
        {
            var returnStr = "FAIL";
            int itemcount = 0;
            double gstItemTotal = 0;
            Boolean chkflag = true;
            string rewardMsg = "";
            bool rewardStatus = true;

            if (Session["userid"] != null)
            {
                try
                {
                    string curr = "";
                    double exrate = 0;
                    ICollection<Configuration_m_Default> config = db.ConfigDefault.Where(x => x.key == "CURR").ToList();

                    if (config.Count > 0)
                        curr = config.ElementAt(0).value;
                    else
                        curr = "";

                    config = db.ConfigDefault.Where(x => x.key == "EXCH").ToList();
                    if (config.Count > 0)
                        exrate = Convert.ToDouble(config.ElementAt(0).value);
                    else
                        exrate = 0;

                    double gstpercent = 0;
                    config = db.ConfigDefault.Where(x => x.key == "INVGSTPER").ToList();
                    if (config.Count > 0)
                        gstpercent = Convert.ToDouble(config.ElementAt(0).value);

                    var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                    int rid = 0;
                    if (ridtmp != null) rid = Convert.ToInt32(ridtmp);

                    int uid = Convert.ToInt32(Session["userid"]);
                    int staffid = 0;
                    var stmp = db.Staffs.Where(x => x.userid == uid).ToList();
                    /*if (stmp != null)
                    {
                        if (stmp.Count > 0)
                            staffid = stmp.ElementAt(0).id;
                    }*/


                    if (pos.id == 0)
                    {
                        
                        pos.createdate = DateTime.Now;
                        pos.lastmodifieddate = DateTime.Now;
                        //Added by ZawZO on 26 Aug 2015
                        pos.resourcedate = DateTime.Now;
                       
                        pos.cocode = Convert.ToString(Session["cocode"]);
                        pos.createid = uid;
                        //pos.staffid = staffid;
                        pos.branchcode = Convert.ToString(Session["branchcode"]);
                        pos.currency = curr;
                        pos.exchangerate = exrate;
                        pos.aracctid = ""; // db.ConfigDefault.Where(x => x.key == "ARID").FirstOrDefault().value;
                        pos.salestaxacctid = ""; // db.ConfigDefault.Where(x => x.key == "ARGD").FirstOrDefault().value;
                        pos.discountacctid = ""; // db.ConfigDefault.Where(x => x.key == "ARDD").FirstOrDefault().value;
                        //Added by ZawZO on 31 Dec 2015
                        double curpymnt = 0; var isPaid = false;
                        double SOSubTot = 0, SOTot = 0, SOTax = 0, SODisc = 0;
                        SOSubTot = pos.total_subtotal; SOTot = pos.total_total; SOTax = pos.total_salestax; SODisc = pos.total_discount;
                        if (pos.payments != null)
                        {
                            for (int i = 0; i < (pos.payments.Count()); i++)
                            {
                                curpymnt = curpymnt + pos.payments.ElementAt(i).amountrecd;
                            }
                        }
                        //Changed by ZawZO on 31 Dec 2015
                        if (pos.total_total > curpymnt)
                        {
                            pos.total_subtotal = curpymnt;
                            pos.total_salestax = 0;
                            pos.total_total = curpymnt;
                            pos.total_amountreceived = curpymnt;

                            pos.status = "ACTIVE";
                            isPaid = false;
                        }
                        else
                        {
                            pos.total_amountreceived = pos.total_total;

                            pos.status = "CLOSE";
                            isPaid = true;
                        }

                        pos.total_amountrefund = 0;
                        pos.total_amountvoid = 0;
                        pos.printcount = 0;
                        pos.resourcecode = GeneralController.getGeneratedNewID("Invoice_m_Invoice", "resourcecode", "POSPREFIX", "INVPOS");
                        if (pos.post == 1)
                        {
                            pos.postdate = DateTime.Now;
                            pos.postid = Convert.ToInt32(Session["userid"]);
                        }
                        db.sales.Add(pos);
                        db.SaveChanges();
                        if (pos.items != null) itemcount = pos.items.Count();
                        saveToLog(rid, pos.id, "CREATE", "Add New POS for cust id - " + pos.cussupid.ToString() + ", Refno-" + pos.resourcecode.ToString() + ", Item Count -" + itemcount.ToString() + ", Total - " + pos.total_total.ToString(), "Redeem Ref no- " + pos.resourcecode + ", ID- " + pos.id.ToString());


                        if (pos.items != null)
                        {
                            for (int i = 0; i < (pos.items.Count()); i++)
                            {
                                if (isPaid == true)
                                {
                                    if (i == (pos.items.Count() - 1))
                                        pos.items.ElementAt(i).taxamount = pos.total_salestax - gstItemTotal;
                                    else
                                        pos.items.ElementAt(i).taxamount = (pos.items.ElementAt(i).unitprice * pos.items.ElementAt(i).qty) * gstpercent / 100.0;

                                    gstItemTotal += pos.items.ElementAt(i).taxamount;
                                }
                                else
                                {
                                    pos.items.ElementAt(i).taxamount = 0;
                                    if (i == 0)
                                    {
                                        pos.items.ElementAt(i).unitprice = curpymnt;
                                        //pos.items.ElementAt(i).qty = 1;
                                        pos.items.ElementAt(i).lineamount = curpymnt;
                                        pos.items.ElementAt(i).discountamount = 0;
                                    }
                                    else
                                    {
                                        pos.items.ElementAt(i).unitprice = 0;
                                        pos.items.ElementAt(i).lineamount = 0;
                                        pos.items.ElementAt(i).discountamount = 0;
                                    }
                                    pos.items.ElementAt(i).taxamount = 0;
                                }
                              //  SaveNewDetailItem(pos.items.ElementAt(i), pos.id, pos.cussupid, resource, pos.resourcecode, rid, curr, exrate, pos.status, staffid, uid, 1);
                                SaveNewDetailItem(pos.items.ElementAt(i), pos.id, pos.cussupid, resource, pos.resourcecode, rid, curr, exrate, pos.status, staffid, uid, 1);
                            }
                            //db.SaveChanges();
                        }

                        if (pos.payments != null)
                        {
                            for (int i = 0; i < (pos.payments.Count()); i++)
                            {
                                SaveNewPayment(pos.payments.ElementAt(i), pos.id, resource, pos.resourcecode, rid, curr, exrate, pos.status, staffid);
                            }
                            //db.SaveChanges();
                        }
                        //Added by ZawZO on 7 Dec 2015
                        if (soid > 0)
                        {
                            Salesorder_m_salesorder so = db.saleorders.Where(x => x.id == soid).FirstOrDefault();
                            if ((so.total_amountreceived + curpymnt) >= so.total_total)
                            {
                                so.status = "CLOSE";
                                // Kyaw 20241023 // Perform Insert To Redemption & POS Close
                                if (insertToRedemption == 1)
                                {
                                    performInsertToRedemption(insertToRedemption, pos, staffid);
                                }
                                POSClose(pos.id, resource, pos.branchcode);
                            }
                            so.total_amountreceived = so.total_amountreceived + curpymnt;
                            db.SaveChanges();
                            //Added by ZawZO on 28 Dec 2015
                            Invoice_m_Invoice posso = db.sales.Find(pos.id);
                            posso.salesorderid = soid;
                            db.SaveChanges();
                        }
                        else
                        {
                            var SOStatus = "";
                            if (bal > 0)
                            {
                                SOStatus = "ACTIVE";
                            }
                            else
                            {
                                SOStatus = "CLOSE";
                                // Kyaw 20241023 // Perform Insert To Redemption & POS Close
                                if (insertToRedemption == 1)
                                {
                                    performInsertToRedemption(insertToRedemption, pos, staffid);
                                }
                                POSClose(pos.id, resource, pos.branchcode);
                            }

                            SaveInvoicetoSalesOrder(pos, SOSubTot, SOTot, SOTax, SODisc, SOStatus);
                        }
                    }
                        // Existing Sale Order
                    else
                    {
                        Invoice_m_Invoice postmp = db.sales.Find(pos.id);
                        Salesorder_m_salesorder so = db.saleorders.Where(x => x.id == postmp.salesorderid).FirstOrDefault();


                        //Added by ZawZO on 26 Aug 2015
                        //postmp.lastmodifieddate = DateTime.Now;

                      

                        //postmp.total_subtotal = pos.total_subtotal;
                        postmp.total_total = pos.total_total;
                        postmp.total_amountreceived = pos.total_amountreceived;
                        postmp.payments = pos.payments;
                        postmp.items = pos.items;


                        double curpymnt = 0;
                        if (pos.payments != null)
                        {
                            for (int i = 0; i < (pos.payments.Count()); i++)
                            {
                                curpymnt = curpymnt + pos.payments.ElementAt(i).amountrecd;
                            }
                        }

                       // if (so.total_total >= so.total_amountreceived + curpymnt)
                        if ((so.total_amountreceived + curpymnt) >= so.total_total)
                        {
                            pos.status = "CLOSE";
                        }
                        else{
                            pos.status = "ACTIVE";
                        }

                    
                        string prevStatus = postmp.status.Trim().ToUpper();
                        string newStatus = pos.status.Trim().ToUpper();


                        // save invoice and items
                        pos =  SaveInvoiceAndItem(postmp, resource);



                        if (prevStatus == "ACTIVE" && newStatus == "CLOSE")
                        {
                            if (POSClose(pos.id, resource, postmp.branchcode) != "SUCCESS")
                                chkflag = false;
                            else
                            {
                                // Kyaw 20241023 // Perform Insert To Redemption & POS Close
                                if (insertToRedemption == 1)
                                {
                                    performInsertToRedemption(insertToRedemption, pos, staffid);
                                }
                            }
                        }
                   
                        Invoice_m_Invoice invoice = db.sales.Where(x => x.id == pos.id).FirstOrDefault();

                       // Salesorder_m_salesorder so = db.saleorders.Where(x => x.id == invoice.salesorderid).FirstOrDefault();

                        if ((so.total_amountreceived + curpymnt) >= so.total_total)
                        {
                            so.status = "CLOSE";
                            closeAllInvoiceAndPaymentsBySOID(so.id);
                        }
                        so.total_amountreceived = so.total_amountreceived + curpymnt;
                        db.SaveChanges();
                   
                        //Invoice_m_Invoice posso = db.sales.Find(pos.id);
                        //posso.salesorderid = soid;
                        //db.SaveChanges();
                 
                    }

                    //returnStr = "SUCCESS";
                    if (chkflag)
                        returnStr = "SUCCESS" + "," + pos.id.ToString() + "," + pos.resourcecode.ToString() + "," + pos.status.ToString() + "," + rewardStatus + "," + rewardMsg;
                    else
                        returnStr = "POSTFAIL" + "," + pos.id.ToString() + "," + pos.resourcecode.ToString() + "," + pos.status.ToString() + "," + rewardStatus + "," + rewardMsg;

                    //returnStr = pos.resourcecode.ToString();
                }
                catch (Exception e)
                { returnStr = e.Message.ToString(); }
            }
            else
            {
                Response.RedirectToRoute(new { controller = "Access", action = "Login" });
                returnStr = "SESSIONEXPIRED";
            }
            //return Content(returnStr);
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }

        public string performInsertToRedemption(int insertToRedemption, Invoice_m_Invoice pos, int staffid) {
            CusSup_m_CusSup customer = db.CusSup.Where(x => x.id == pos.cussupid).FirstOrDefault();
            string name = customer.cussupname;
            string mobile = cAESEncryption.getDecryptedString(customer.mobile);
            string email = customer.email;
            string nric = cAESEncryption.getDecryptedString(customer.nric);
            string dateofbirth = customer.dateofbirth.ToString();
            string receiptno = pos.resourcecode.ToString();
            string gender = customer.gender ?? "";
            decimal amount = Convert.ToDecimal(pos.total_total);
            string branchcode = Session["branchcode"].ToString();
            string createid = staffid.ToString();

            RewardsService.QWS rewardWebService = new RewardsService.QWS();
            string rewardObj = rewardWebService.Rewards_InsertSubmission(name, mobile, email, nric, dateofbirth, receiptno, gender, amount, branchcode, createid);

            Reward reward = JsonConvert.DeserializeObject<Reward>(rewardObj);
            return reward.result[0].msg + ", " + reward.result[0].isSuccess;
        }

      

        // Kyaw on 20240623 // POS Receipt Report
        public JsonResult getPOSReceiptData(int posId = 0)
        {

            // customer data
            try
            {
                var pos = db.sales.Where(x => x.id == posId).FirstOrDefault();

                var posItems = db.saleItems.Where(x => x.invoiceid == posId).ToList();


                var staff = db.Staffs.Where(x => x.id == pos.staffid).FirstOrDefault();

                var cust = db.CusSup.Where(x => x.id == pos.cussupid).FirstOrDefault();

                var bundles = db.CusSupRedemption.Where(x => x.RefNo == pos.resourcecode && x.resource == "PACKAGEREDEEM")
                        .Select(x=> new {x.RefNo,  x.productdesc, x.credit, x.packagecode, x.invoiceitemid })
                        .Distinct()
                        .ToList();

                

                // ICollection<Invoice_m_Invoice> pos = db.sales.Where(x => x.type == "SOPOS" && x.salesorderid == so.invoiceid).OrderByDescending(x => x.createdate).ToList();

                var paymentList = (from pay in db.invoicePayment
                                   join inv in db.sales
                                   on pay.invoiceid equals inv.id
                                   select new
                                   {
                                       salesorderid = inv.salesorderid,
                                       invoiceid = inv.id,
                                       resourcecode = pay.resourcecode,
                                       createdate = pay.createdate,
                                       //pay.createdate.GetValueOrDefault().ToString("dd/MM/yyyy"),
                                       //string.Format("dd/MM/yyyy", pay.createdate),
                                       paymentmode = pay.paymentmode,
                                       amountreceived = pay.amountrecd
                                   }).ToList();

                paymentList = paymentList.Where(x => x.salesorderid == pos.salesorderid).ToList();

                var salesorder = db.saleorders.Where(x => x.id == pos.salesorderid).FirstOrDefault();


                var cPoint = db.Database.SqlQuery<int>("SELECT getMemberClosingBalance(" + cust.id + ",'C$')");
                var bPoint = db.Database.SqlQuery<int>("SELECT getMemberClosingBalance(" + cust.id + ",'B$')");


                var result = new
                {
                    customer = cust,
                    pos = pos,
                    posItems = posItems,
                    payments = paymentList,
                    staff = staff,
                    salesorder = salesorder,
                    cPoint = cPoint,
                    bPoint = bPoint,
                    bundles = bundles
                };

                return Json(result, JsonRequestBehavior.AllowGet);


            }
            catch (Exception e)
            {
                return Json("Getting POS Receipt Data Failed", JsonRequestBehavior.AllowGet);
            }


        }

        // Kyaw on 20240604
        private void closeAllInvoiceAndPaymentsBySOID(int soid)
        {
            ICollection<Invoice_m_Invoice> posList = db.sales.Where(x => x.salesorderid == soid).ToList();
            Invoice_m_Payment payment;

            foreach (Invoice_m_Invoice pos in posList) {
                pos.status = "CLOSE";

                payment = db.invoicePayment.Where(x => x.resourcecode == pos.resourcecode).FirstOrDefault();
                payment.status = "CLOSE";

                db.SaveChanges();
            }

        }

        // Kyaw on 20240613
        private Invoice_m_Invoice SaveInvoiceAndItem(Invoice_m_Invoice pos, string resource = "POS")
        {
            int itemcount = 0;
            double gstItemTotal = 0;
            string curr = "";
            double exrate = 0;
            ICollection<Configuration_m_Default> config = db.ConfigDefault.Where(x => x.key == "CURR").ToList();

            if (config.Count > 0)
                curr = config.ElementAt(0).value;
            else
                curr = "";

            config = db.ConfigDefault.Where(x => x.key == "EXCH").ToList();
            if (config.Count > 0)
                exrate = Convert.ToDouble(config.ElementAt(0).value);
            else
                exrate = 0;

            double gstpercent = 0;
            config = db.ConfigDefault.Where(x => x.key == "INVGSTPER").ToList();
            if (config.Count > 0)
                gstpercent = Convert.ToDouble(config.ElementAt(0).value);

            var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
            int rid = 0;
            if (ridtmp != null) rid = Convert.ToInt32(ridtmp);

            int uid = Convert.ToInt32(Session["userid"]);
            int staffid = 0;
            var stmp = db.Staffs.Where(x => x.userid == uid).ToList();

            pos.createdate = DateTime.Now;
            pos.lastmodifieddate = DateTime.Now;
          
            pos.resourcedate = DateTime.Now;

            pos.cocode = Convert.ToString(Session["cocode"]);
            pos.createid = uid;
            //pos.staffid = staffid;
            pos.branchcode = Convert.ToString(Session["branchcode"]);
            pos.currency = curr;
            pos.exchangerate = exrate;
            pos.aracctid = ""; // db.ConfigDefault.Where(x => x.key == "ARID").FirstOrDefault().value;
            pos.salestaxacctid = ""; // db.ConfigDefault.Where(x => x.key == "ARGD").FirstOrDefault().value;
            pos.discountacctid = ""; // db.ConfigDefault.Where(x => x.key == "ARDD").FirstOrDefault().value;
            //Added by ZawZO on 31 Dec 2015
            double curpymnt = 0; var isPaid = false;
            double SOSubTot = 0, SOTot = 0, SOTax = 0, SODisc = 0;
            SOSubTot = pos.total_subtotal; SOTot = pos.total_total; SOTax = pos.total_salestax; SODisc = pos.total_discount;
          
            if (pos.payments != null)
            {
                for (int i = 0; i < (pos.payments.Count()); i++)
                {
                    curpymnt = curpymnt + pos.payments.ElementAt(i).amountrecd;
                }
            }

            //Changed by ZawZO on 31 Dec 2015
            if (pos.total_total > curpymnt)
            {
                pos.total_subtotal = curpymnt;
                pos.total_salestax = 0;
                pos.total_total = curpymnt;
                pos.total_amountreceived = curpymnt;
                isPaid = false;
            }
            else
            {
                pos.total_amountreceived = pos.total_total;
                isPaid = true;
            }

            pos.total_amountrefund = 0;
            pos.total_amountvoid = 0;
            pos.printcount = 0;
            pos.resourcecode = GeneralController.getGeneratedNewID("Invoice_m_Invoice", "resourcecode", "POSPREFIX", "INVPOS");
            if (pos.post == 1)
            {
                pos.postdate = DateTime.Now;
                pos.postid = Convert.ToInt32(Session["userid"]);
            }
            db.sales.Add(pos);
            db.SaveChanges();


            if (pos.items != null) itemcount = pos.items.Count();
            saveToLog(rid, pos.id, "CREATE", "Add New POS for cust id - " + pos.cussupid.ToString() + ", Refno-" + pos.resourcecode.ToString() + ", Item Count -" + itemcount.ToString() + ", Total - " + pos.total_total.ToString(), "Redeem Ref no- " + pos.resourcecode + ", ID- " + pos.id.ToString());

            if (pos.items != null)
            {
                for (int i = 0; i < (pos.items.Count()); i++)
                {
                    if (isPaid == true)
                    {
                        if (i == (pos.items.Count() - 1))
                            pos.items.ElementAt(i).taxamount = pos.total_salestax - gstItemTotal;
                        else
                            pos.items.ElementAt(i).taxamount = (pos.items.ElementAt(i).unitprice * pos.items.ElementAt(i).qty) * gstpercent / 100.0;

                        gstItemTotal += pos.items.ElementAt(i).taxamount;
                    }
                    else
                    {
                        pos.items.ElementAt(i).taxamount = 0;
                        if (i == 0)
                        {
                            pos.items.ElementAt(i).unitprice = curpymnt;
                            //pos.items.ElementAt(i).qty = 1;
                            pos.items.ElementAt(i).lineamount = curpymnt;
                            pos.items.ElementAt(i).discountamount = 0;
                        }
                        else
                        {
                            pos.items.ElementAt(i).unitprice = 0;
                            pos.items.ElementAt(i).lineamount = 0;
                            pos.items.ElementAt(i).discountamount = 0;
                        }
                        pos.items.ElementAt(i).taxamount = 0;
                    }

                //  SaveNewDetailItem(pos.items.ElementAt(i), pos.id, pos.cussupid, resource, pos.resourcecode, rid, curr, exrate, pos.status, staffid, uid, 1);
                   SaveNewDetailItem(pos.items.ElementAt(i), pos.id, pos.cussupid, resource, pos.resourcecode, rid, curr, exrate, pos.status, staffid, uid, 0);
                }
                
                db.SaveChanges();
            }

            // save to payment
            if (pos.payments != null)
            {
                for (int i = 0; i < (pos.payments.Count()); i++)
                {
                    SaveNewPayment(pos.payments.ElementAt(i), pos.id, resource, pos.resourcecode, rid, curr, exrate, pos.status, staffid);
                }
            }

            return pos;

        }

        [HttpPost]
        [Authorize]
        public JsonResult SOPOSSave(Invoice_m_Invoice pos, string resource = "POS", int soid = 0, int orderid = 0, double bal = 0, string itemids = "", string pitemids = "", int insertToRedemption = 0)
        {
            var returnStr = "FAIL";
            int itemcount = 0;
            double gstItemTotal = 0;
            Boolean chkflag = true;
 
            if (Session["userid"] != null)
            {
                try
                {
                    string curr = "";
                    double exrate = 0;
                    ICollection<Configuration_m_Default> config = db.ConfigDefault.Where(x => x.key == "CURR").ToList();

                    if (config.Count > 0)
                        curr = config.ElementAt(0).value;
                    else
                        curr = "";

                    config = db.ConfigDefault.Where(x => x.key == "EXCH").ToList();
                    if (config.Count > 0)
                        exrate = Convert.ToDouble(config.ElementAt(0).value);
                    else
                        exrate = 0;

                    double gstpercent = 0;
                    config = db.ConfigDefault.Where(x => x.key == "INVGSTPER").ToList();
                    if (config.Count > 0)
                        gstpercent = Convert.ToDouble(config.ElementAt(0).value);

                    var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                    int rid = 0;
                    if (ridtmp != null) rid = Convert.ToInt32(ridtmp);

                    int uid = Convert.ToInt32(Session["userid"]);
                    int staffid = 0;
                    var stmp = db.Staffs.Where(x => x.userid == uid).ToList();
                    /*if (stmp != null)
                    {
                        if (stmp.Count > 0)
                            staffid = stmp.ElementAt(0).id;
                    }*/


                    if (pos.id == 0)
                    {
                        if(pos.payments != null && pos.payments.ElementAt(0).paymentmode != "Refund"){

                        pos.createdate = DateTime.Now;
                        pos.lastmodifieddate = DateTime.Now;
                        //Added by ZawZO on 26 Aug 2015
                        pos.resourcedate = DateTime.Now;
                        pos.cocode = Convert.ToString(Session["cocode"]);
                        pos.createid = uid;
                        //pos.staffid = staffid;
                        pos.branchcode = Convert.ToString(Session["branchcode"]);
                        pos.currency = curr;
                        pos.exchangerate = exrate;
                        pos.aracctid = ""; // db.ConfigDefault.Where(x => x.key == "ARID").FirstOrDefault().value;
                        pos.salestaxacctid = ""; // db.ConfigDefault.Where(x => x.key == "ARGD").FirstOrDefault().value;
                        pos.discountacctid = ""; // db.ConfigDefault.Where(x => x.key == "ARDD").FirstOrDefault().value;
                        //Added by ZawZO on 31 Dec 2015
                        double curpymnt = 0; var isPaid = false;
                        double SOSubTot = 0, SOTot = 0, SOTax = 0, SODisc = 0;
                        SOSubTot = pos.total_subtotal; SOTot = pos.total_total; SOTax = pos.total_salestax; SODisc = pos.total_discount;
                        if (pos.payments != null)
                        {
                            for (int i = 0; i < (pos.payments.Count()); i++)
                            {
                                curpymnt = curpymnt + pos.payments.ElementAt(i).amountrecd;
                            }
                        }
                        //Changed by ZawZO on 31 Dec 2015
                        if (pos.total_total > curpymnt)
                        {
                            pos.total_subtotal = curpymnt;
                            pos.total_salestax = 0;
                            pos.total_total = curpymnt;
                            pos.total_amountreceived = curpymnt;
                            isPaid = false;
                        }
                        else
                        {
                            pos.total_amountreceived = curpymnt - pos.changes;
                            pos.total_subtotal = curpymnt - pos.changes;
                            pos.total_salestax = 0;
                            pos.total_total = curpymnt - pos.changes;
                            isPaid = true;
                        }

                        pos.total_amountrefund = 0;
                        pos.total_amountvoid = 0;
                        pos.printcount = 0;
                        pos.resourcecode = GeneralController.getGeneratedNewID("Invoice_m_Invoice", "resourcecode", "POSPREFIX", "INVPOS");
                        if (pos.post == 1)
                        {
                            pos.postdate = DateTime.Now;
                            pos.postid = Convert.ToInt32(Session["userid"]);
                        }
                        db.sales.Add(pos);
                        db.SaveChanges();
                        if (pos.items != null) itemcount = pos.items.Count();
                        saveToLog(rid, pos.id, "CREATE", "Add New POS for cust id - " + pos.cussupid.ToString() + ", Refno-" + pos.resourcecode.ToString() + ", Item Count -" + itemcount.ToString() + ", Total - " + pos.total_total.ToString(), "Redeem Ref no- " + pos.resourcecode + ", ID- " + pos.id.ToString());


                        if (pos.items != null)
                        {
                            for (int i = 0; i < (pos.items.Count()); i++)
                            {
                                if (isPaid == true)
                                {
                                    if (i == (pos.items.Count() - 1))
                                        pos.items.ElementAt(i).taxamount = pos.total_salestax - gstItemTotal;
                                    else
                                        pos.items.ElementAt(i).taxamount = (pos.items.ElementAt(i).unitprice * pos.items.ElementAt(i).qty) * gstpercent / 100.0;

                                    gstItemTotal += pos.items.ElementAt(i).taxamount;
                                }
                                else
                                {
                                    pos.items.ElementAt(i).taxamount = 0;
                                    if (i == 0)
                                    {
                                        pos.items.ElementAt(i).unitprice = curpymnt;
                                        //pos.items.ElementAt(i).qty = 1;
                                        pos.items.ElementAt(i).lineamount = curpymnt;
                                        pos.items.ElementAt(i).discountamount = 0;
                                    }
                                    else
                                    {
                                        pos.items.ElementAt(i).unitprice = 0;
                                        pos.items.ElementAt(i).lineamount = 0;
                                        pos.items.ElementAt(i).discountamount = 0;
                                    }
                                    pos.items.ElementAt(i).taxamount = 0;
                                }
                                SaveNewSODetailItem(pos.items.ElementAt(i), pos.id, pos.cussupid, resource, pos.resourcecode, rid, curr, exrate, pos.status, staffid, uid, insertToRedemption);
                            }
                            //db.SaveChanges();
                        }
                        if (pos.payments != null)
                        {
                            for (int i = 0; i < (pos.payments.Count()); i++)
                            {
                                SaveNewPayment(pos.payments.ElementAt(i), pos.id, resource, pos.resourcecode, rid, curr, exrate, pos.status, staffid);
                            }
                            //db.SaveChanges();
                        }
                        //Added by ZawZO on 7 Dec 2015
                        if (soid > 0)
                        {
                            Salesorder_m_salesorder so = db.saleorders.Where(x => x.id == soid).FirstOrDefault();
                            if (((so.total_amountreceived + curpymnt)) >= so.total_total)
                            {
                                so.status = "CLOSE";
                            }

                            if ((so.total_amountreceived + curpymnt) > so.total_total)
                            {
                                so.total_amountreceived = so.total_total;
                            }
                            else
                            {
                                so.total_amountreceived = so.total_amountreceived + curpymnt;
                            }
             
                         
                            db.SaveChanges();
                            //Added by ZawZO on 28 Dec 2015
                            Invoice_m_Invoice posso = db.sales.Find(pos.id);
                            posso.salesorderid = soid;
                            db.SaveChanges();

                            for (int i = 0; i < pos.items.Count(); i++ )
                            {
                                int lineno = pos.items.ElementAt(i).lineno;
                                int detailid = pos.items.ElementAt(i).detailid ?? 0;
                                int salesorderdetailCount = db.saleordersItems.Where(x => x.salesorderid == soid).ToList().Count();
                                salesorder_m_detail detail = db.saleordersItems.FirstOrDefault(x => x.salesorderid == soid && x.detailid == detailid);
                                if (detail==null)
                                {

                                    pos.items.ElementAt(i).lineno = salesorderdetailCount + 1;
                                    SaveNewSaleOrderDetails(pos.items.ElementAt(i), so.resourcecode, so.id);
                                    Salesorder_m_salesorder salesorderParent = db.saleorders.Where(x => x.id == soid).FirstOrDefault();
                                    salesorderParent.total_subtotal = salesorderParent.total_subtotal + (pos.items.ElementAt(i).unitprice * pos.items.ElementAt(i).qty);
                                    salesorderParent.total_total = salesorderParent.total_total + (pos.items.ElementAt(i).unitprice * pos.items.ElementAt(i).qty);
                                }
                            }

                            Salesorder_m_salesorder orderTakingSo = db.saleorders.FirstOrDefault(x => x.invoiceid == so.id);
                            if (orderTakingSo != null)
                            {
                                orderTakingSo.total_total = so.total_total;
                                orderTakingSo.total_amountrefund = so.total_amountrefund;
                                orderTakingSo.total_discount = so.total_discount;
                                db.SaveChanges();
                            }
                        }
                        else
                        {
                            var SOStatus = "";
                            if (bal > 0)
                            {
                                SOStatus = "ACTIVE";
                            }
                            else
                            {
                                SOStatus = "CLOSE";
                                POSClose(pos.id, resource, pos.branchcode);
                            }
                            SaveSOInvoicetoSalesOrder(pos, SOSubTot, SOTot, SOTax, SODisc, SOStatus, orderid);
                        }


                        if (orderid > 0)
                        {
                            Salesorder_m_salesorder so = db.saleorders.Where(x => x.id == orderid).FirstOrDefault();
                            if (so != null)
                            {

                                ICollection<salesorder_m_detail> sodetail = db.saleordersItems.Where(x => x.salesorderid == orderid && x.pos == 1 && x.status != "VOID").ToList();
                               
                                if (sodetail != null)
                                {
                                    foreach (salesorder_m_detail posSodetail in sodetail)
                                    {
                                        string oldstatus = posSodetail.status;
                                        if (bal > 0)
                                        {
                                            posSodetail.status = "PARTIAL";
                                        }
                                        else
                                        {
                                            posSodetail.status = "PAID";
                                        }

                                        db.SaveChanges();
                                        saveToLog(rid, posSodetail.id, "Update", "Update Sales Order Details #" + posSodetail.id + " status from " + oldstatus + " to PAID");

                                        string pckgId = posSodetail.productid.ToString();
                                        ICollection<salesorder_m_detail> pkgdetail = db.saleordersItems.Where(x => x.salesorderid == orderid && x.packagecode == pckgId && x.status != "VOID").ToList();
                                       
                                        foreach (salesorder_m_detail pkgSodetail in pkgdetail)
                                        {
                                            string oldPkgstatus = pkgSodetail.status;
                                            if (bal > 0)
                                            {
                                                pkgSodetail.status = "PARTIAL";
                                            }
                                            else
                                            {
                                                pkgSodetail.status = "PAID";
                                            }
                                            db.SaveChanges();
                                            saveToLog(rid, pkgSodetail.id, "Update", "Update Sales Order Details #" + pkgSodetail.id + " status from " + oldPkgstatus + " to PAID");
                                        }

                                    }
                              }

                              updateSalesOrderStatus(so.resourcecode, resource);
                            }
                        }
                      }
                      else
                      {
                            //refund

                          //Salesorder_m_salesorder so = db.saleorders.Where(x => x.id == soid).FirstOrDefault();
                          //so.total_amountrefund = Math.Abs(pos.payments.ElementAt(0).amountrecd);
                          //db.SaveChanges();


                          pos.createdate = DateTime.Now;
                          pos.lastmodifieddate = DateTime.Now;
                          //Added by ZawZO on 26 Aug 2015
                          pos.resourcedate = DateTime.Now;
                          pos.cocode = Convert.ToString(Session["cocode"]);
                          pos.createid = uid;
                          //pos.staffid = staffid;
                          pos.branchcode = Convert.ToString(Session["branchcode"]);
                          pos.currency = curr;
                          pos.exchangerate = exrate;
                          pos.aracctid = ""; // db.ConfigDefault.Where(x => x.key == "ARID").FirstOrDefault().value;
                          pos.salestaxacctid = ""; // db.ConfigDefault.Where(x => x.key == "ARGD").FirstOrDefault().value;
                          pos.discountacctid = ""; // db.ConfigDefault.Where(x => x.key == "ARDD").FirstOrDefault().value;
                          //Added by ZawZO on 31 Dec 2015
                          double curpymnt = 0; var isPaid = false;
                          double SOSubTot = 0, SOTot = 0, SOTax = 0, SODisc = 0;
                          SOSubTot = pos.total_subtotal; SOTot = pos.total_total; SOTax = pos.total_salestax; SODisc = pos.total_discount;
                          if (pos.payments != null)
                          {
                              for (int i = 0; i < (pos.payments.Count()); i++)
                              {
                                  curpymnt = curpymnt + pos.payments.ElementAt(i).amountrecd;
                              }
                          }
                          //Changed by ZawZO on 31 Dec 2015
                          pos.total_total = 0;
                          pos.total_subtotal = curpymnt;
                          pos.total_salestax = 0;
                          pos.total_amountrefund = curpymnt;
                        
                          pos.total_amountvoid = 0;
                          pos.printcount = 0;
                          pos.resourcecode = GeneralController.getGeneratedNewID("Invoice_m_Invoice", "resourcecode", "POSPREFIX", "INVPOS");
                          if (pos.post == 1)
                          {
                              pos.postdate = DateTime.Now;
                              pos.postid = Convert.ToInt32(Session["userid"]);
                          }
                          db.sales.Add(pos);
                          db.SaveChanges();
                          if (pos.items != null) itemcount = pos.items.Count();
                          saveToLog(rid, pos.id, "CREATE", "Add New POS for cust id - " + pos.cussupid.ToString() + ", Refno-" + pos.resourcecode.ToString() + ", Item Count -" + itemcount.ToString() + ", Total - " + pos.total_total.ToString(), "Redeem Ref no- " + pos.resourcecode + ", ID- " + pos.id.ToString());


                          if (pos.items != null)
                          {
                              for (int i = 0; i < (pos.items.Count()); i++)
                              {
                                  if (isPaid == true)
                                  {
                                      if (i == (pos.items.Count() - 1))
                                          pos.items.ElementAt(i).taxamount = pos.total_salestax - gstItemTotal;
                                      else
                                          pos.items.ElementAt(i).taxamount = (pos.items.ElementAt(i).unitprice * pos.items.ElementAt(i).qty) * gstpercent / 100.0;

                                      gstItemTotal += pos.items.ElementAt(i).taxamount;
                                  }
                                  else
                                  {
                                      pos.items.ElementAt(i).taxamount = 0;
                                      if (i == 0)
                                      {
                                          pos.items.ElementAt(i).unitprice = curpymnt;
                                          //pos.items.ElementAt(i).qty = 1;
                                          pos.items.ElementAt(i).lineamount = curpymnt;
                                          pos.items.ElementAt(i).discountamount = 0;
                                      }
                                      else
                                      {
                                          pos.items.ElementAt(i).unitprice = 0;
                                          pos.items.ElementAt(i).lineamount = 0;
                                          pos.items.ElementAt(i).discountamount = 0;
                                      }
                                      pos.items.ElementAt(i).taxamount = 0;
                                  }
                                  SaveNewSODetailItem(pos.items.ElementAt(i), pos.id, pos.cussupid, resource, pos.resourcecode, rid, curr, exrate, pos.status, staffid, uid, insertToRedemption);
                              }
                              //db.SaveChanges();
                          }
                          if (pos.payments != null)
                          {
                              for (int i = 0; i < (pos.payments.Count()); i++)
                              {
                                  SaveNewPayment(pos.payments.ElementAt(i), pos.id, resource, pos.resourcecode, rid, curr, exrate, pos.status, staffid);
                              }
                              //db.SaveChanges();
                          }
                          //Added by ZawZO on 7 Dec 2015
                          if (soid > 0)
                          {
                              Salesorder_m_salesorder so = db.saleorders.Where(x => x.id == soid).FirstOrDefault();
                              if (((so.total_amountrefund + curpymnt)) >= so.total_total)
                              {
                                  so.status = "CLOSE";
                              }

                              if ((so.total_amountreceived + curpymnt) > so.total_total)
                              {
                                  so.total_amountreceived = so.total_total;
                              }
                              else
                              {
                                  so.total_amountreceived = so.total_amountreceived + curpymnt;
                              }
                            
                              db.SaveChanges();
                              //Added by ZawZO on 28 Dec 2015
                              Invoice_m_Invoice posso = db.sales.Find(pos.id);
                              posso.salesorderid = soid;
                              db.SaveChanges();

                              Salesorder_m_salesorder orderTakingSo = db.saleorders.FirstOrDefault(x => x.invoiceid == so.id);
                              if (orderTakingSo != null)
                              {
                                  orderTakingSo.total_total = so.total_total;
                                  orderTakingSo.total_amountrefund = so.total_amountrefund;
                                  orderTakingSo.total_discount = so.total_discount;
                                  db.SaveChanges();
                              }
                          }
                          else
                          {
                              var SOStatus = "";
                              if (bal > 0)
                              {
                                  SOStatus = "ACTIVE";
                              }
                              else
                              {
                                  SOStatus = "CLOSE";
                                  POSClose(pos.id, resource, pos.branchcode);
                              }
                              SaveSOInvoicetoSalesOrder(pos, SOSubTot, SOTot, SOTax, SODisc, SOStatus, orderid);
                          }


                          if (orderid > 0)
                          {
                              Salesorder_m_salesorder so = db.saleorders.Where(x => x.id == orderid).FirstOrDefault();
                              if (so != null)
                              {

                                  ICollection<salesorder_m_detail> sodetail = db.saleordersItems.Where(x => x.salesorderid == orderid && x.pos == 1 && x.status != "VOID").ToList();

                                  if (sodetail != null)
                                  {
                                      foreach (salesorder_m_detail posSodetail in sodetail)
                                      {
                                          string oldstatus = posSodetail.status;
                                          if (bal > 0)
                                          {
                                              posSodetail.status = "PARTIAL";
                                          }
                                          else
                                          {
                                              posSodetail.status = "PAID";
                                          }

                                          db.SaveChanges();
                                          saveToLog(rid, posSodetail.id, "Update", "Update Sales Order Details #" + posSodetail.id + " status from " + oldstatus + " to PAID");

                                          string pckgId = posSodetail.productid.ToString();
                                          ICollection<salesorder_m_detail> pkgdetail = db.saleordersItems.Where(x => x.salesorderid == orderid && x.packagecode == pckgId && x.status != "VOID").ToList();

                                          foreach (salesorder_m_detail pkgSodetail in pkgdetail)
                                          {
                                              string oldPkgstatus = pkgSodetail.status;
                                              if (bal > 0)
                                              {
                                                  pkgSodetail.status = "PARTIAL";
                                              }
                                              else
                                              {
                                                  pkgSodetail.status = "PAID";
                                              }
                                              db.SaveChanges();
                                              saveToLog(rid, pkgSodetail.id, "Update", "Update Sales Order Details #" + pkgSodetail.id + " status from " + oldPkgstatus + " to PAID");
                                          }

                                      }
                                  }

                                  updateSalesOrderStatus(so.resourcecode, resource);
                              }
                          }
                      }
                    }
                    else
                    {
                        Invoice_m_Invoice postmp = db.sales.Find(pos.id);
                        //Added by ZawZO on 26 Aug 2015
                        postmp.lastmodifieddate = DateTime.Now;

                        string from = ""; string to = "";
                        string prevStatus = postmp.status.Trim().ToUpper();
                        string newStatus = pos.status.Trim().ToUpper();
                        from = "Status -" + postmp.status + ", Create By -" + postmp.staffid + ", total -" + postmp.total_total.ToString();
                        to = "Status -" + pos.status + ", Create By -" + pos.staffid + ", total -" + pos.total_total.ToString() + ", items -" + itemids;
                        postmp.cocode = Convert.ToString(Session["cocode"]);
                        postmp.branchcode = Convert.ToString(Session["branchcode"]);
                        //postmp.currency = curr;
                        //postmp.exchangerate = exrate;
                        postmp.cussupid = pos.cussupid;
                        postmp.cussupname = pos.cussupname;
                        postmp.total_subtotal = pos.total_subtotal;
                        postmp.total_total = pos.total_total;
                        postmp.total_salestax = pos.total_salestax;
                        postmp.total_discount = pos.total_discount;
                        postmp.aracctid = ""; // db.ConfigDefault.Where(x => x.key == "ARID").FirstOrDefault().value;
                        postmp.salestaxacctid = ""; // db.ConfigDefault.Where(x => x.key == "ARGD").FirstOrDefault().value;
                        postmp.discountacctid = ""; // db.ConfigDefault.Where(x => x.key == "ARDD").FirstOrDefault().value;
                        postmp.total_amountrefund = 0;
                        postmp.total_amountvoid = 0;
                        postmp.status = pos.status;
                        postmp.staffid = pos.staffid;
                        postmp.post = pos.post;
                        if (prevStatus == "ACTIVE" && pos.post == 1)
                        {
                            postmp.postdate = DateTime.Now;
                            postmp.postid = Convert.ToInt32(Session["userid"]);
                        }

                        if (postmp.printcount == null)
                            postmp.printcount = 1;

                        pos.resourcecode = postmp.resourcecode;
                        db.SaveChanges();
                        if (pos.items != null) itemcount = pos.items.Count();
                        saveToLog(rid, postmp.id, "UPDATE", "UPDATE Redeem - refno -" + postmp.resourcecode + " , id - " + postmp.id.ToString() + ", Item Count -" + itemcount.ToString() + ", Total - " + pos.total_total.ToString(), from, to);
                        using (var context = new BigMacEntities())
                        {
                            itemids = itemids + "0";
                            var value = context.Database.ExecuteSqlCommand("Delete from Invoice_m_Invoice_Items where invoiceid=" + pos.id.ToString() + " and id not in (" + itemids + ")");

                        }

                        if (pos.items != null)
                        {
                            for (int i = 0; i < (pos.items.Count()); i++)
                            {
                                if (i == (pos.items.Count() - 1))
                                    pos.items.ElementAt(i).taxamount = pos.total_salestax - gstItemTotal;
                                else
                                    pos.items.ElementAt(i).taxamount = (pos.items.ElementAt(i).unitprice * pos.items.ElementAt(i).qty) * gstpercent / 100.0;

                                gstItemTotal += pos.items.ElementAt(i).taxamount;

                                if (pos.items.ElementAt(i).id == 0)
                                {
                                    SaveNewSODetailItem(pos.items.ElementAt(i), pos.id, pos.cussupid, resource, pos.resourcecode, rid, curr, exrate, pos.status, staffid, uid, insertToRedemption);
                                }
                                else
                                {
                                    pos.items.ElementAt(i).staffserviceid = staffid;
                                    UpdateDetailItem(pos.items.ElementAt(i), pos.cussupid, resource, pos.resourcecode, rid, staffid, uid);
                                }
                            }


                        }

                        using (var context = new BigMacEntities())
                        {
                            pitemids = pitemids + "0";
                            var value = context.Database.ExecuteSqlCommand("Delete from invoice_m_payment where invoiceid=" + pos.id.ToString() + " and id not in (" + pitemids + ")");
                            ;
                        }
                        double curpymnt = 0;
                        if (pos.payments != null)
                        {
                            for (int i = 0; i < (pos.payments.Count()); i++)
                            {
                                curpymnt = curpymnt + pos.payments.ElementAt(i).amountrecd;
                                if (pos.payments.ElementAt(i).id == 0)
                                {
                                    SaveNewPayment(pos.payments.ElementAt(i), pos.id, resource, pos.resourcecode, rid, curr, exrate, pos.status, staffid);
                                }
                                else
                                    UpdatePaymentAmount(pos.payments.ElementAt(i), pos.resourcecode, rid);
                            }

                        }

                        if (prevStatus == "ACTIVE" && newStatus == "CLOSE")
                        {
                            if (POSClose(pos.id, resource, postmp.branchcode) != "SUCCESS")
                                chkflag = false;
                        }

                        Invoice_m_Invoice invoice = db.sales.Where(x => x.id == pos.id).FirstOrDefault();

                        Salesorder_m_salesorder so = db.saleorders.Where(x => x.id == invoice.salesorderid).FirstOrDefault();
                        if ((so.total_amountreceived + curpymnt) >= so.total_total)
                        {
                            so.status = "CLOSE";
                        }
                        so.total_amountreceived = so.total_amountreceived + curpymnt;
                        db.SaveChanges();

                        //Invoice_m_Invoice posso = db.sales.Find(pos.id);
                        //posso.salesorderid = soid;
                        //db.SaveChanges();

                    }
                    //returnStr = "SUCCESS";
                    if (chkflag)
                        returnStr = "SUCCESS" + "," + pos.id.ToString() + "," + pos.resourcecode.ToString() + "," + pos.status.ToString() + "," + pos.salesorderid.ToString();
                    else
                        returnStr = "POSTFAIL" + "," + pos.id.ToString() + "," + pos.resourcecode.ToString() + "," + pos.status.ToString() + "," + pos.salesorderid.ToString();

                    //returnStr = pos.resourcecode.ToString();
                }
                catch (Exception e)
                { returnStr = e.InnerException.ToString(); }
            }
            else
            {
                Response.RedirectToRoute(new { controller = "Access", action = "Login" });
                returnStr = "SESSIONEXPIRED";
            }
            //return Content(returnStr);
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }


        [Authorize]
        public void SaveNewDetailItem(Invoice_m_Invoice_Items dtl, int tid, int memberid, string resource, string resourcecode, int rid = 0, string curr = "SGD", double exrate = 0, string status = "Close", int staffid = 0, int uid = 0, int insertToRedemption = 0)
        {
            dtl.awarddollars = 0;
            dtl.awardbonus = 0;
            dtl.redeembonus = 0;
            dtl.redeemdollars = 0;
            //var ptmp = db.products.Where(x => x.id == dtl.productid && (x.category == "Topup" || x.category == "TOPUP" || x.category == "TopUp")).FirstOrDefault();
            var ptmp = db.products.Where(x => x.id == dtl.productid).FirstOrDefault();
         
            if (ptmp !=null)
            {
                var tmpprice = db.productprices.Where(x => x.productid == dtl.productid && x.uom == dtl.uom).FirstOrDefault();
                if (tmpprice != null)
                {
                    dtl.awarddollars = tmpprice.awarddollars ?? 0 ;
                    dtl.awardbonus = tmpprice.awardbonus ?? 0;
                    dtl.unitprice = Convert.ToDouble(tmpprice.sellprice);
                }
            }
            
            dtl.currency = curr;
            dtl.exchangerate = exrate;
            dtl.createdate = DateTime.Now;
            dtl.lastmodifieddate = DateTime.Now;
            //dtl.productid = tid;
            dtl.resourcecode = resourcecode;
            dtl.createid = Convert.ToInt32(Session["userid"]);
            //Commented by ZawZO on 18 Dec 2015
            //dtl.discountamount = 0;

            dtl.taxamount = 0;
            dtl.lineamount = dtl.qty * dtl.unitprice;
            dtl.gstcode = "";
            dtl.invoiceid = tid;
            dtl.staffserviceid = staffid;
            db.saleItems.Add(dtl);
            db.SaveChanges();
            saveToLog(rid, dtl.id, "CREATE", "Add New Detail Item - product ID -" + dtl.productid, "RefNo no- " + resourcecode + ", Item ID- " + dtl.id.ToString());
            //Added by ZawZO on 1 Dec 2015, to update cusredemption table for package items
            var pkgtmp = db.products.Where(x => x.id == dtl.productid && (x.category == "Package" || x.category == "package")).FirstOrDefault();
            if (pkgtmp != null)
            {
                var tmpbundle = db.productBundle.Where(x => x.productid == pkgtmp.id).ToList();
                for (int i = 0; i < tmpbundle.Count; i++)
                {
                    int itmid = tmpbundle[i].itemid;
                    double bdlqty = (tmpbundle[i].qty * dtl.qty);

                    if (itmid > 0 && insertToRedemption == 1)
                    {
                         var bdlp = db.products.Where(x => x.id == itmid).FirstOrDefault();
                         AddPackageToRedemptionTable(dtl.id, dtl.productcode, dtl.productdesc, bdlp.id, bdlp.desc, bdlp.uom, memberid, "PACKAGEREDEEM", resourcecode, rid, bdlqty);
                    }
                }
            }
            //Added by ZawZO on 3 Jun 2016, to add top up item 
            //var topuptmp = db.products.Where(x => x.id == dtl.productid && (x.category == "Topup" || x.category == "TOPUP" || x.category == "TopUp")).FirstOrDefault();
            var topuptmp = db.products.Where(x => x.id == dtl.productid).FirstOrDefault();


            // by Kyaw on 20250427
            //if (topuptmp != null && insertToRedemption == 1)
            //{
            //    AddToRedemptionTable(dtl, memberid, resource,resourcecode, rid);
            //}

            if (dtl.salestaffs != null)
                SaveSalesStaff(dtl, rid, staffid, uid);
        }

        [Authorize]
        public void SaveNewSODetailItem(Invoice_m_Invoice_Items dtl, int tid, int memberid, string resource, string resourcecode, int rid = 0, string curr = "SGD", double exrate = 0, string status = "Close", int staffid = 0, int uid = 0, int insertToRedemption = 0)
        {
            dtl.awarddollars = 0;
            dtl.awardbonus = 0;
            dtl.redeembonus = 0;
            dtl.redeemdollars = 0;
            //var ptmp = db.products.Where(x => x.id == dtl.productid && (x.category == "Topup" || x.category == "TOPUP" || x.category == "TopUp")).FirstOrDefault();
            var ptmp = db.products.Where(x => x.id == dtl.productid).FirstOrDefault();

            if (ptmp != null)
            {
                var tmpprice = db.productprices.Where(x => x.productid == dtl.productid && x.uom == dtl.uom).FirstOrDefault();
                if (tmpprice != null)
                {
                    dtl.awarddollars = tmpprice.awarddollars ?? 0;
                    dtl.awardbonus = tmpprice.awardbonus ?? 0;
                    dtl.unitprice = Convert.ToDouble(tmpprice.sellprice);
                }
            }

            dtl.currency = curr;
            dtl.exchangerate = exrate;
            dtl.createdate = DateTime.Now;
            dtl.lastmodifieddate = DateTime.Now;
            //dtl.productid = tid;
            dtl.resourcecode = resourcecode;
            dtl.createid = Convert.ToInt32(Session["userid"]);
            //Commented by ZawZO on 18 Dec 2015
            //dtl.discountamount = 0;

            dtl.taxamount = 0;
            dtl.lineamount = dtl.qty * dtl.unitprice;
            dtl.gstcode = "";
            dtl.invoiceid = tid;
            dtl.staffserviceid = staffid;
            db.saleItems.Add(dtl);
            db.SaveChanges();
            saveToLog(rid, dtl.id, "CREATE", "Add New Detail Item - product ID -" + dtl.productid, "RefNo no- " + resourcecode + ", Item ID- " + dtl.id.ToString());
            //Added by ZawZO on 1 Dec 2015, to update cusredemption table for package items
            var pkgtmp = db.products.Where(x => x.id == dtl.productid && (x.category == "Package" || x.category == "package")).FirstOrDefault();
            //if (pkgtmp != null)
            //{
            //    var tmpbundle = db.productBundle.Where(x => x.productid == pkgtmp.id).ToList();
            //    for (int i = 0; i < tmpbundle.Count; i++)
            //    {
            //        int itmid = tmpbundle[i].itemid;
            //        double bdlqty = (tmpbundle[i].qty * dtl.qty);
            //        var bdlp = db.products.Where(x => x.id == itmid).FirstOrDefault();
            //        AddPackageToRedemptionTable(dtl.id, dtl.productcode, dtl.productdesc, bdlp.id, bdlp.desc, bdlp.uom, memberid, "PACKAGEREDEEM", resourcecode, rid, bdlqty);
            //    }
            //}
            //Added by ZawZO on 3 Jun 2016, to add top up item 
            //var topuptmp = db.products.Where(x => x.id == dtl.productid && (x.category == "Topup" || x.category == "TOPUP" || x.category == "TopUp")).FirstOrDefault();
            var topuptmp = db.products.Where(x => x.id == dtl.productid).FirstOrDefault();

            //if (topuptmp != null && insertToRedemption == 1)
            //{
            //    AddToRedemptionTable(dtl, memberid, resource, resourcecode, rid);
            //}

            if (dtl.salestaffs != null)
                SaveSalesStaff(dtl, rid, staffid, uid);
        }


        [Authorize]
        public void UpdateDetailItem(Invoice_m_Invoice_Items dtl, int memberid, string resource, string resourcecode, int rid, int staffid=0, int uid=0)
        {
            //var ptmp = db.products.Where(x => x.id == dtl.productid && (x.category == "Topup" || x.category == "TOPUP" || x.category == "TopUp")).FirstOrDefault();
            var ptmp = db.products.Where(x => x.id == dtl.productid).FirstOrDefault();
          
            if (ptmp != null)
            {
                var tmpprice = db.productprices.Where(x => x.productid == dtl.productid && x.uom == dtl.uom).FirstOrDefault();
                if (tmpprice != null)
                {
                    dtl.awarddollars = tmpprice.awarddollars ?? 0;
                    dtl.awardbonus = tmpprice.awardbonus ?? 0;
                    dtl.unitprice = Convert.ToDouble(tmpprice.sellprice);
                }
            }
            Invoice_m_Invoice_Items tmp = db.saleItems.Find(dtl.id);
            string from = ""; string to = "";
            if (tmp != null)
            {
                from = "proudctid -" + tmp.productid + ",product desc -" + tmp.productdesc + ",Price -" + tmp.unitprice.ToString() + ",commission-" + tmp.servicecommission.ToString() + ",gst-" + tmp.taxamount.ToString() + ", discount -" + tmp.discountamount.ToString() + ",lineamt -" + tmp.lineamount.ToString() + ",qty-" + tmp.qty.ToString();
                to = "proudctid -" + dtl.productid + ",product desc -" + dtl.productdesc + ",Price -" + dtl.unitprice.ToString() + ",commission-" + dtl.servicecommission.ToString() + ",gst-" + dtl.taxamount.ToString() + ", discount -" + dtl.discountamount.ToString() + ",lineamt -" + dtl.lineamount.ToString() + ",qty-" + dtl.qty.ToString();
                tmp.productid = dtl.productid;
                tmp.productcode = dtl.productcode;
                tmp.productdesc = dtl.productdesc;
                tmp.servicecommission = dtl.servicecommission;
                tmp.unitprice = dtl.unitprice;
                tmp.qty = dtl.qty;
                tmp.taxamount = dtl.taxamount;
                tmp.discountamount = dtl.discountamount;
                tmp.lineamount = dtl.lineamount;
                tmp.staffserviceid = dtl.staffserviceid;
                db.SaveChanges();
                saveToLog(rid, dtl.id, "UPDATE", "Update Detail Item ID-" + dtl.id.ToString() + " RefNo -" + resourcecode, from, to);
                dtl.resourcecode = tmp.resourcecode;
                dtl.invoiceid = tmp.invoiceid;
                if (dtl.salestaffs != null)
                    SaveSalesStaff(dtl, rid, staffid, uid);
            }
        }
        
        [Authorize]
        public void SaveNewPayment(Invoice_m_Payment pmt, int hid, string resource, string resourcecode, int rid = 0, string curr = "SGD", double exrate = 0, string status = "Close", int staffid = 0)
        {
            pmt.invoiceid = hid;
            pmt.cocode = Convert.ToString(Session["cocode"]);
            pmt.branchcode = Convert.ToString(Session["branchcode"]);
            pmt.currency = curr;
            pmt.exchangerate = exrate;            
            pmt.createdate = DateTime.Now;
            pmt.lastmodifieddate = DateTime.Now;
            pmt.resourcecode = resourcecode;
            pmt.createid = Convert.ToInt32(Session["userid"]);
            pmt.receivedid = staffid;
            pmt.status = "Active";
            db.invoicePayment.Add(pmt);
            db.SaveChanges();
            saveToLog(rid, pmt.id, "CREATE", "Add New Payment Item - Invoice ID -" + pmt.id, "Invoice no- " + resourcecode + ", Payment Info- " + pmt.paymentmode  + ":"+  pmt.amountrecd.ToString());
        }


        [Authorize]
        public void UpdatePaymentAmount(Invoice_m_Payment pmt, string resourcecode, int rid = 0)
        {
            Invoice_m_Payment tmp = db.invoicePayment.Find(pmt.id);
            string from = ""; string to = "";
            if (tmp != null)
            {
                from = "paymentmode -" + tmp.paymentmode.ToString() + ", Amount -" + tmp.amountrecd.ToString();
                to = "paymentmode -" + pmt.paymentmode.ToString() + ", Amount -" + pmt.amountrecd.ToString();
                //" proudctid -" + dtl.productid + ", product desc -" + dtl.productdesc + ",Price -" + dtl.unitprice.ToString() + ",commission-" + dtl.servicecommission.ToString() + ",gst-" + dtl.taxamount.ToString() + ", discount -" + dtl.discountamount.ToString() + ",lineamt -" + dtl.lineamount.ToString() + ",qty-" + dtl.qty.ToString();
                tmp.paymentmode = pmt.paymentmode;
                tmp.amountrecd = pmt.amountrecd;
                //tmp.currency = curr;
                //tmp.exchangerate = exrate;  
                //tmp.status = "Active";
                db.SaveChanges();
                saveToLog(rid, pmt.id, "UPDATE", "Update Detail Item ID-" + pmt.id.ToString() + " RefNo -" + resourcecode, from, to);
            }
        }

        [Authorize]
        public JsonResult UpdatePrintCount(int posid = 0, string resource = "POS")
        {
            var returnStr = "FAIL";

            try
            {
                var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                int rid = 0;
                if (ridtmp != null) rid = Convert.ToInt32(ridtmp);
                Invoice_m_Invoice tmp = db.sales.Find(posid);
                string from = "";

                if (tmp != null)
                {
                    from = "Print Count -" + tmp.printcount.ToString();
                    //" proudctid -" + dtl.productid + ", product desc -" + dtl.productdesc + ",Price -" + dtl.unitprice.ToString() + ",commission-" + dtl.servicecommission.ToString() + ",gst-" + dtl.taxamount.ToString() + ", discount -" + dtl.discountamount.ToString() + ",lineamt -" + dtl.lineamount.ToString() + ",qty-" + dtl.qty.ToString();               
                    if (tmp.printcount == null) 
                        tmp.printcount=1;
                    else
                        tmp.printcount = tmp.printcount + 1;
                    returnStr = tmp.printcount.ToString();
                    db.SaveChanges();
                    saveToLog(rid, posid, "UPDATE", "Update Print Count  ID-" + posid.ToString() + " RefNo -" + tmp.resourcecode, from, "Print Count -" + tmp.printcount.ToString());
                }
            }
            catch (Exception e)
            { 
            }

            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }

        [Authorize]
        public void SaveSalesStaff(Invoice_m_Invoice_Items item,int rid=0, int staffid=0,int uid=0)
        {
            var slist = item.salestaffs.ToList();
            string itemids = "";
            for (int i = 0; i < slist.Count; i++)
            {
                if (slist.ElementAt(i).id == 0)
                {
                    //SaveNewSalesStaff(slist.ElementAt(i), resource, item.invoiceid, item.resourcecode, rid, staffid);
                    Invoice_m_Invoice_SalesStaff staff = new Invoice_m_Invoice_SalesStaff();
                    staff = slist.ElementAt(i);
                    staff.invoiceid = item.invoiceid;
                    staff.resourcecode = item.resourcecode;
                    staff.resourcedetailid = item.id;
                    staff.createdate = DateTime.Now;
                    staff.lastmodifieddate = DateTime.Now;
                    staff.createid = uid;
                    db.saleStaffs.Add(staff);
                    db.SaveChanges();
                    itemids = itemids + staff.id + ",";
                    saveToLog(rid, slist.ElementAt(i).id, "CREATE", "Add New Staff Item - Invoice ID -" + staff.id, "Invoice no- " + item.resourcecode + ", Staff Info- " + staff.staffid + ":" + staff.percent.ToString());
                }
                else
                {
                    itemids = itemids + slist.ElementAt(i).id + ",";
                    Invoice_m_Invoice_SalesStaff stmp = db.saleStaffs.Find(slist.ElementAt(i).id);
                    stmp.lineno = slist.ElementAt(i).lineno;
                    stmp.staffid = slist.ElementAt(i).staffid;
                    stmp.percent = slist.ElementAt(i).percent;
                    db.SaveChanges();
                    saveToLog(rid, slist.ElementAt(i).id, "UPDATE", "UPDATE - Invoice ID -" + stmp.id, "Invoice no- " + stmp.resourcecode + ", Staff Info- " + stmp.staffid + ":" + stmp.percent.ToString());
                    //var tmp = db.saleStaffs.Find(slist.ElementAt(i).id);
                    //if (tmp != null)
                    //{
                    //    staffid = staffid + tmp.id + ",";
                    //    tmp.staffid = 
                    //}
                }
            }

            using (var context = new BigMacEntities())
            {
                itemids = itemids + "0";
                var value = context.Database.ExecuteSqlCommand("Delete from invoice_m_invoice_salesstaff where invoiceid=" + item.invoiceid.ToString() + " and resourcedetailid = " + item.id.ToString() + " and id not in (" + itemids + ")");
                //return View(pList);
            }
        }
        [Authorize]
        public void SaveInvoicetoSalesOrder(Invoice_m_Invoice pos,double SubTot,double Tot,double STax,double Disc, string SOStatus)
        {
            Salesorder_m_salesorder s = new Salesorder_m_salesorder();
            var uniquecode = "";
            uniquecode = DateTime.Now.Year.ToString().Trim() + DateTime.Now.Month.ToString().Trim() + DateTime.Now.Day.ToString().Trim() + DateTime.Now.Hour.ToString().Trim() + DateTime.Now.Minute.ToString().Trim() + DateTime.Now.Second.ToString().Trim();
            s.cussupid = pos.cussupid;
            s.type = pos.type;
            s.cussupname = pos.cussupname;
            s.createdate=DateTime.Now;
            s.lastmodifieddate = DateTime.Now;
            s.resourcedate = pos.resourcedate;
            //s.status = "ACTIVE";
            s.status = SOStatus;

            s.cocode = pos.cocode;
            s.createid = pos.createid;
            s.branchcode = pos.branchcode;
            s.currency = pos.currency;
            s.exchangerate = pos.exchangerate;
            s.aracctid = ""; 
            s.salestaxacctid = ""; 
            s.discountacctid = "";
            //Added by ZawZO on 14 Dec 2015
            s.remark = pos.remark;
            //Added by ZawZO on 15 Dec 2015
            s.staffid = pos.staffid.ToString();
            //Added by ZawZO on 16 Dec 2015
            s.invoiceid = pos.id;

            s.total_amountrefund = 0;
            s.total_amountvoid = 0;
            s.resourcecode = GeneralController.getGeneratedNewID("Salesorder_m_salesorder", "resourcecode", "SOPREFIX", "SLSORD");
            s.uniquecode = uniquecode;
            s.total_subtotal = SubTot;
            s.total_salestax = STax;
            s.total_discount = Disc;
            s.total_total = Tot;
            s.total_amountreceived = pos.total_amountreceived;
            //Added by ZawZO on 1 Feb 2016
            s.starttime = "";
            s.endtime = "";

            db.saleorders.Add(s);
            db.SaveChanges();

            if (pos.items != null)
            {
                for (int i = 0; i < (pos.items.Count()); i++)
                {
                    //Changed by ZawZO on 24 Dec 2015
                    //SaveNewSaleOrderDetails(pos.items.ElementAt(i),i,pos.total_total, s.resourcecode,s.id);
                    SaveNewSaleOrderDetails(pos.items.ElementAt(i),s.resourcecode, s.id);
                }
            }
            //Added by ZawZO on 24 Dec 2015
            Invoice_m_Invoice postmp = db.sales.Find(pos.id);
            postmp.salesorderid = s.id;
            db.SaveChanges();

        }

        //Added by jayson
        [Authorize]
        public void SaveSOInvoicetoSalesOrder(Invoice_m_Invoice pos, double SubTot, double Tot, double STax, double Disc, string SOStatus, int soid)
        {
            Salesorder_m_salesorder s = new Salesorder_m_salesorder();
            var uniquecode = "";
            uniquecode = DateTime.Now.Year.ToString().Trim() + DateTime.Now.Month.ToString().Trim() + DateTime.Now.Day.ToString().Trim() + DateTime.Now.Hour.ToString().Trim() + DateTime.Now.Minute.ToString().Trim() + DateTime.Now.Second.ToString().Trim();
            s.cussupid = pos.cussupid;
            s.type = pos.type;
            s.cussupname = pos.cussupname;
            s.createdate = DateTime.Now;
            s.lastmodifieddate = DateTime.Now;
            s.resourcedate = pos.resourcedate;
            //s.status = "ACTIVE";
            s.status = SOStatus;

            s.cocode = pos.cocode;
            s.createid = pos.createid;
            s.branchcode = pos.branchcode;
            s.currency = pos.currency;
            s.exchangerate = pos.exchangerate;
            s.aracctid = "";
            s.salestaxacctid = "";
            s.discountacctid = "";
            //Added by ZawZO on 14 Dec 2015
            s.remark = pos.remark;
            //Added by ZawZO on 15 Dec 2015
            s.staffid = pos.staffid.ToString();
            //Added by ZawZO on 16 Dec 2015
            s.invoiceid = pos.id;

            s.total_amountrefund = 0;
            s.total_amountvoid = 0;
            s.resourcecode = GeneralController.getGeneratedNewID("Salesorder_m_salesorder", "resourcecode", "SOPREFIX", "SLSORD");
            s.uniquecode = uniquecode;
            s.total_subtotal = SubTot;
            s.total_salestax = STax;
            s.total_discount = Disc;
            s.total_total = Tot;
            s.total_amountreceived = pos.total_amountreceived;
            //Added by ZawZO on 1 Feb 2016
            s.starttime = "";
            s.endtime = "";

       
            db.saleorders.Add(s);
            db.SaveChanges();

            if (pos.items != null)
            {
                for (int i = 0; i < (pos.items.Count()); i++)
                {
                    //Changed by ZawZO on 24 Dec 2015
                    //SaveNewSaleOrderDetails(pos.items.ElementAt(i),i,pos.total_total, s.resourcecode,s.id);
                    SaveNewSaleOrderDetails(pos.items.ElementAt(i), s.resourcecode, s.id);
                }
            }
            //Added by ZawZO on 24 Dec 2015
            Invoice_m_Invoice postmp = db.sales.Find(pos.id);
            postmp.salesorderid = s.id;
            db.SaveChanges();

            //Update OT data
            Salesorder_m_salesorder salesorder = db.saleorders.Find(soid);
            salesorder.invoiceid = s.id;
            salesorder.total_total = Tot;
            db.SaveChanges();

        }
       
       
        [Authorize]
        public void SaveNewSaleOrderDetails(Invoice_m_Invoice_Items dtl, string resourcecode, int salesorderid)
        {
            salesorder_m_detail sodetls = new salesorder_m_detail();
            sodetls.resourcecode = dtl.resourcecode;
            sodetls.salesorderid = salesorderid;
            sodetls.lineno = dtl.lineno;
            sodetls.productid = dtl.productid;
            sodetls.productcode = dtl.productcode;
            sodetls.productdesc = dtl.productdesc;
            sodetls.servicecommission = dtl.servicecommission;
         
            sodetls.qty = dtl.qty;
            sodetls.unitprice = dtl.unitprice;
            sodetls.lineamount = dtl.lineamount;

            sodetls.uom = dtl.uom;
            sodetls.awarddollars = 0;
            sodetls.awardbonus = 0;
            sodetls.redeembonus = 0;
            sodetls.redeemdollars = 0;
            sodetls.currency = dtl.currency;
            sodetls.exchangerate = dtl.exchangerate;
            sodetls.createdate = dtl.createdate;
            sodetls.lastmodifieddate = dtl.lastmodifieddate;
           
            sodetls.resourcecode = dtl.resourcecode;
            sodetls.createid = dtl.createid;
            sodetls.discountamount = dtl.discountamount;
            sodetls.taxamount = 0;
            sodetls.gstcode = "";
            sodetls.staffserviceid = dtl.staffserviceid;
            sodetls.detailid = dtl.detailid ?? 0;
            db.saleordersItems.Add(sodetls);
            db.SaveChanges();
        }

        //Added by ZawZO on 8 Dec 2015
        public ActionResult getActiveSalesOrderListWithPaging(jQueryDataTableParamModel param)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    //ICollection<Salesorder_m_salesorder> sList = db.saleorders.Where(x => x.status == "ACTIVE").OrderByDescending(x => x.createdate).ToList();
                    var sList = context.Database.SqlQuery<Salesorder_m_salesorder>("call getActiveSOList()").ToList();
                    sList = sList.Where(x => x.type == "POS").ToList();
                    var searchValue = "";
                    if (param.sSearch == null) searchValue = "";
                    else searchValue = param.sSearch;
                    var filterPList = sList.Where(x => string.Format("dd/MM/yyyy", x.createdate).Contains(searchValue) || x.resourcecode.ToUpper().Contains(searchValue.ToUpper()) || x.cussupname.ToUpper().Contains(searchValue.ToUpper())).OrderByDescending(x => x.createdate).ToList();

                    var sortColumnIndex = Convert.ToInt32(Request["iSortCol_0"]);
                    var sortDirection = Request["sSortDir_0"]; //asc or desc
                    if (sortDirection == "asc")
                    {
                        if (sortColumnIndex == 0)
                            filterPList = filterPList.OrderBy(x => x.createdate).ToList();
                        else if (sortColumnIndex == 1)
                            filterPList = filterPList.OrderBy(x => x.resourcecode).ToList();
                        else if (sortColumnIndex == 2)
                            filterPList = filterPList.OrderBy(x => x.cussupname).ToList();
                        else if (sortColumnIndex == 3)
                            filterPList = filterPList.OrderBy(x => x.total_amountreceived).ToList();
                        else if (sortColumnIndex == 4)
                            filterPList = filterPList.OrderBy(x => x.total_subtotal).ToList();
                        else if (sortColumnIndex == 5)
                            filterPList = filterPList.OrderBy(x => x.total_total).ToList();
                    }
                    else
                    {
                        if (sortColumnIndex == 0)
                            filterPList = filterPList.OrderByDescending(x => x.createdate).ToList();
                        else if (sortColumnIndex == 1)
                            filterPList = filterPList.OrderByDescending(x => x.resourcecode).ToList();
                        else if (sortColumnIndex == 2)
                            filterPList = filterPList.OrderByDescending(x => x.cussupname).ToList();
                        else if (sortColumnIndex == 3)
                            filterPList = filterPList.OrderByDescending(x => x.total_amountreceived).ToList();
                        else if (sortColumnIndex == 4)
                            filterPList = filterPList.OrderByDescending(x => x.total_subtotal).ToList();
                        else if (sortColumnIndex == 5)
                            filterPList = filterPList.OrderByDescending(x => x.total_total).ToList();
                    }

                    var paginatedPList = filterPList.Skip(param.iDisplayStart).Take(param.iDisplayLength).ToList();
                    return Json(new
                    {
                        sEcho = param.sEcho,
                        iTotalRecords = sList.Count, //paginatedQPList.TotalCount,
                        iTotalDisplayRecords = filterPList.Count, //paginatedQPList.TotalCount,
                        aaData = paginatedPList
                    },
                    JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        public ActionResult getActiveOTSalesOrderListWithPaging(jQueryDataTableParamModel param)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    //ICollection<Salesorder_m_salesorder> sList = db.saleorders.Where(x => x.status == "ACTIVE").OrderByDescending(x => x.createdate).ToList();
                    var sList = context.Database.SqlQuery<Salesorder_m_salesorder>("call getActiveSOList()").ToList();
                    var bcode = Session["branchcode"].ToString();
                    sList = sList.Where(x => x.type == "SOPOS" && x.branchcode == bcode).ToList();
                    var searchValue = "";
                    if (param.sSearch == null) searchValue = "";
                    else searchValue = param.sSearch;
                    var filterPList = sList.Where(x => string.Format("dd/MM/yyyy", x.createdate).Contains(searchValue) || x.resourcecode.ToUpper().Contains(searchValue.ToUpper()) || x.cussupname.ToUpper().Contains(searchValue.ToUpper())).OrderByDescending(x => x.createdate).ToList();

                    var sortColumnIndex = Convert.ToInt32(Request["iSortCol_0"]);
                    var sortDirection = Request["sSortDir_0"]; //asc or desc
                    if (sortDirection == "asc")
                    {
                        if (sortColumnIndex == 0)
                            filterPList = filterPList.OrderBy(x => x.createdate).ToList();
                        else if (sortColumnIndex == 1)
                            filterPList = filterPList.OrderBy(x => x.resourcecode).ToList();
                        else if (sortColumnIndex == 2)
                            filterPList = filterPList.OrderBy(x => x.cussupname).ToList();
                        else if (sortColumnIndex == 3)
                            filterPList = filterPList.OrderBy(x => x.total_amountreceived).ToList();
                        else if (sortColumnIndex == 4)
                            filterPList = filterPList.OrderBy(x => x.total_subtotal).ToList();
                        else if (sortColumnIndex == 5)
                            filterPList = filterPList.OrderBy(x => x.total_total).ToList();
                    }
                    else
                    {
                        if (sortColumnIndex == 0)
                            filterPList = filterPList.OrderByDescending(x => x.createdate).ToList();
                        else if (sortColumnIndex == 1)
                            filterPList = filterPList.OrderByDescending(x => x.resourcecode).ToList();
                        else if (sortColumnIndex == 2)
                            filterPList = filterPList.OrderByDescending(x => x.cussupname).ToList();
                        else if (sortColumnIndex == 3)
                            filterPList = filterPList.OrderByDescending(x => x.total_amountreceived).ToList();
                        else if (sortColumnIndex == 4)
                            filterPList = filterPList.OrderByDescending(x => x.total_subtotal).ToList();
                        else if (sortColumnIndex == 5)
                            filterPList = filterPList.OrderByDescending(x => x.total_total).ToList();
                    }

                    var paginatedPList = filterPList.Skip(param.iDisplayStart).Take(param.iDisplayLength).ToList();
                    return Json(new
                    {
                        sEcho = param.sEcho,
                        iTotalRecords = sList.Count, //paginatedQPList.TotalCount,
                        iTotalDisplayRecords = filterPList.Count, //paginatedQPList.TotalCount,
                        aaData = paginatedPList
                    },
                    JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }
      
        //Added by ZawZO on 8 Dec 2015
        [HttpPost]
        public JsonResult getSalesOrderByInvoiceId(int invoiceid = 0)
        {
            try
            {
                int id = 0;

                var so = db.saleorders.FirstOrDefault(x => x.invoiceid == invoiceid);
                if (so != null)
                    id = so.id;

                return Json(id, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        [HttpPost]
        public JsonResult getSalesOrder(int soid = 0)
        {
            try
            {
                var so = db.saleorders.Where(x => x.id == soid).ToList();
                var splist = so.Join(db.CusSup, sales => sales.cussupid, cus => cus.id, (sales, cus) => new { saleorder = sales, cussup = cus }).Select(x => new { 
                    x.saleorder.id,
                    x.cussup.inhousecode,
                    x.saleorder.cussupid,
                    x.saleorder.cussupname,
                    x.saleorder.remark,
                    x.saleorder.staffid,
                    x.saleorder.total_subtotal,
                    x.saleorder.total_salestax,
                    x.saleorder.total_total,
                    x.saleorder.total_amountreceived,
                    x.saleorder.total_amountrefund,
                    x.saleorder.total_amountvoid,
                    x.saleorder.status }).OrderBy(x => x.id).ToList();

                return Json(splist, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }
        //Added by ZawZO on 8 Dec 2015
        [HttpPost]
        public JsonResult getSalesOrderDetails(int soid = 0)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    var so = db.saleordersItems.Where(x => x.salesorderid== soid).ToList();
                    var splist = so.Join(db.products, item => item.productid, prod => prod.id, (item, prod) => new { itemlist = item, products = prod }).Select(x => new { 
                        x.itemlist.id,
                        x.itemlist.lineno,
                        x.itemlist.productid,
                        x.itemlist.productcode,
                        x.itemlist.productdesc,
                        x.itemlist.servicecommission,
                        x.itemlist.unitprice,
                        x.itemlist.qty,
                        x.itemlist.uom,
                        x.itemlist.lineamount,
                        x.itemlist.discountamount,
                        x.products.category,
                        x.products.categorysub,
                        x.products.brand,
                        x.products.RangesNSeries,
                        x.itemlist.awarddollars,
                        x.itemlist.awardbonus,
                        x.itemlist.foc,
                        x.itemlist.rdm,
                        x.itemlist.pos,
                        x.itemlist.pts,
                        x.itemlist.status,
                        x.itemlist.packagecode,
                        x.itemlist.redeemedqty,
                        x.itemlist.detailid
                    }).OrderBy(x => x.lineno).ToList();

                    return Json(splist, JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }


        [HttpPost]
        public JsonResult getSalesOrderDetailsWithBalance(int soid = 0, int mid = 0)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    var so = db.saleordersItems.Where(x => x.salesorderid == soid).ToList();
                    var splist = so.Join(db.products, item => item.productid, prod => prod.id, (item, prod) => new { itemlist = item, products = prod }).Select(x => new
                    {
                        x.itemlist.id,
                        x.itemlist.lineno,
                        x.itemlist.productid,
                        x.itemlist.productcode,
                        x.itemlist.productdesc,
                        x.itemlist.servicecommission,
                        x.itemlist.serviceallowance,
                        x.itemlist.unitprice,
                        x.itemlist.qty,
                        x.itemlist.uom,
                        x.itemlist.lineamount,
                        x.itemlist.discountamount,
                        x.products.category,
                        x.products.categorysub,
                        x.products.brand,
                        x.products.RangesNSeries,
                        x.itemlist.awarddollars,
                        x.itemlist.awardbonus,
                        x.itemlist.foc,
                        x.itemlist.rdm,
                        x.itemlist.pos,
                        x.itemlist.pts,
                        x.itemlist.citi,
                        x.itemlist.rwd,
                        x.itemlist.status,
                        x.itemlist.packagecode,
                        x.itemlist.packagelineno,
                        x.itemlist.ispackageselected,
                        x.itemlist.redeemedqty,
                        x.itemlist.starttime,
                        x.itemlist.endtime,
                        x.itemlist.staffid,
                        x.itemlist.branchassetid

                    }).OrderBy(x => x.lineno).ToList();


                    ICollection<Redempt_Package> pptmp = context.Database.SqlQuery<Redempt_Package>("call getCussupPackageItemList(" + mid + ")").ToList();
                    var outstandingPackageList = (from product in pptmp join package in db.products on product.packagecode equals package.productcode select new { id = package.id, packagecode = product.packagecode, packagedesc = product.packagedesc, productdesc = product.productdesc, productid = product.productid, credit = product.credit, debit = product.debit, uom = product.uom, balance = product.balance }).Where(x => x.balance > 0).ToList();

                    var finalList = (from product in splist
                                     join package in outstandingPackageList on product.productid equals package.productid into prod
                                     from pack in prod.DefaultIfEmpty()
                                     select new
                                     {
                                         id = product.id,
                                         lineno = product.lineno,
                                         productid = product.productid,
                                         productcode = product.productcode,
                                         productdesc = product.productdesc,
                                         servicecommission = product.servicecommission ?? 0.00,
                                         serviceallowance = product.serviceallowance,
                                         unitprice = product.unitprice,
                                         qty = product.qty,
                                         uom = product.uom,
                                         lineamount = product.lineamount,
                                         discountamount = product.discountamount,
                                         category = product.category,
                                         categorysub = product.categorysub,
                                         brand = product.brand,
                                         RangesNSeries = product.RangesNSeries,
                                         awarddollars = product.awarddollars,
                                         awardbonus = product.awardbonus,
                                         foc = product.foc,
                                         rdm = product.rdm,
                                         pos = product.pos,
                                         citi = product.citi,
                                         rwd = product.rwd,
                                         pts = product.pts,
                                         status = product.status,
                                         packagecode = product.packagecode,
                                         packagelineno = product.packagelineno,
                                         ispackageselected = product.ispackageselected,
                                         balance = (pack != null) ? pack.balance : 0,
                                         redeemedqty = product.redeemedqty,
                                         starttime = product.starttime ?? "",
                                         endtime = product.endtime ?? "",
                                         staffname = getStaffName(product.staffid),
                                         branchassetname = getBranchAssetName(product.branchassetid),
                                         staffid = product.staffid,
                                         branchassetid = product.branchassetid

                                     }).OrderBy(x => x.lineno).ToList();

                   
                    return Json(finalList, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        [HttpPost]
        public JsonResult getSalesOrderTime(int soid = 0)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    var so = db.saleorders.Where(x => x.id == soid).ToList();
                
                    return Json(so, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }


        public string getStaffName(int id = 0)
        {
            try
            {
                string staffName = "";

                using (var context = new BigMacEntities())
                {
                    var staff = db.Staffs.FirstOrDefault(x => x.id == id);

                    if (staff != null)
                    {
                        staffName = staff.name;
                    }
                }

                return staffName;
            }
            catch (Exception e)
            {
                throw e;
            }
        }


        public string getBranchAssetName(int id = 0)
        {
            try
            {
                string branchAssetName = "";

                using (var context = new BigMacEntities())
                {
                    var branchAsset = db.BranchAsset.FirstOrDefault(x => x.id == id);

                    if (branchAsset != null)
                    {
                        branchAssetName = branchAsset.name;
                    }
                }

                return branchAssetName;
            }
            catch (Exception e)
            {
                throw e;
            }
        }
      

        [HttpPost]
        public JsonResult setSessionStaff(int id = 0)
        {
            try
            {
                Session["staffid"] = id;
                return Json("Success", JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

     
        //Added by ZawZO on 29 Jan 2016
        public JsonResult getIncompletePackageRedeemDetail(jQueryDataTableParamModel param,int mid)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    ICollection<Incompleted_Package_Item> plist = context.Database.SqlQuery<Incompleted_Package_Item>("call getCussupIncompletePackageItemList()").ToList();
                    var filterPList = plist.Where(x => x.cussupid == mid).ToList();
                    var paginatedPList = filterPList.Skip(param.iDisplayStart).Take(param.iDisplayLength).ToList();
                    return Json(new
                    {
                        sEcho = param.sEcho,
                        iTotalRecords = plist.Count, //paginatedQPList.TotalCount,
                        iTotalDisplayRecords = filterPList.Count, //paginatedQPList.TotalCount,
                        aaData = paginatedPList
                    },
                    JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }
        //Added by ZawZO on 9 Dec 2015
        public ActionResult getSalesKitListWithPaging(jQueryDataTableParamModel param)
        {
            try
            {
                ICollection<Product_m_Product> pList = db.products.Where(x => x.status == "ACTIVE" && x.category=="SalesKit").OrderBy(x => x.desc).ToList();

                var searchValue = "";
                if (param.sSearch == null) searchValue = "";
                else searchValue = param.sSearch;
                var filterPList = pList.Where(x => x.productcode.ToUpper().Contains(searchValue.ToUpper()) || x.desc.ToUpper().Contains(searchValue.ToUpper())).OrderBy(x => x.desc).ToList();

                var sortColumnIndex = Convert.ToInt32(Request["iSortCol_0"]);
                var sortDirection = Request["sSortDir_0"]; //asc or desc
                if (sortDirection == "asc")
                {
                    if (sortColumnIndex == 0)
                        filterPList = filterPList.OrderBy(x => x.id).ToList();
                    else if (sortColumnIndex == 1)
                        filterPList = filterPList.OrderBy(x => x.productcode).ToList();
                    else if (sortColumnIndex == 2)
                        filterPList = filterPList.OrderBy(x => x.desc).ToList();
                    else if (sortColumnIndex == 3)
                        filterPList = filterPList.OrderBy(x => x.uom).ToList();
                }
                else
                {
                    if (sortColumnIndex == 0)
                        filterPList = filterPList.OrderByDescending(x => x.id).ToList();
                    else if (sortColumnIndex == 1)
                        filterPList = filterPList.OrderByDescending(x => x.productcode).ToList();
                    else if (sortColumnIndex == 2)
                        filterPList = filterPList.OrderByDescending(x => x.desc).ToList();
                    else if (sortColumnIndex == 3)
                        filterPList = filterPList.OrderByDescending(x => x.uom).ToList();
                }

                var paginatedPList = filterPList.Skip(param.iDisplayStart).Take(param.iDisplayLength).ToList();
                return Json(new
                {
                    sEcho = param.sEcho,
                    iTotalRecords = pList.Count, //paginatedQPList.TotalCount,
                    iTotalDisplayRecords = filterPList.Count, //paginatedQPList.TotalCount,
                    aaData = paginatedPList
                },
                JsonRequestBehavior.AllowGet);

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }
        //Added by ZawZO on 11 Dec 2015
        public ActionResult getSalesKitsList()
        {
            try
            {
                var prodlist = db.products.Where(x =>x.category=="Saleskit" && x.status=="Active").OrderBy(x=>x.desc).ToList();  
                return Json(prodlist, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        //Added by ZawZO on 14 Dec 2015
        public ActionResult getSalesKitItemList(int skpid=0)
        {
            try
            {
                var prodlist = SaleKitItemsList(skpid);
                //Changed by ZawZO on 22 Aug 2016
                var plist = prodlist.Join(db.productprices, prod => prod.id, price => price.productid, (prod, price) => new { prodlist = prod, productprices = price }).Select(x => new { x.prodlist.id, x.prodlist.desc, x.prodlist.category, x.prodlist.categorysub, x.prodlist.brand, x.prodlist.RangesNSeries, x.prodlist.productcode, x.productprices.uom, x.productprices.sellprice, x.productprices.servicecommission, awardbonus = x.productprices.awardbonus == null ? 0 : x.productprices.awardbonus, awarddollars = x.productprices.awarddollars == null ? 0 : x.productprices.awarddollars }).Distinct().ToList();                                
                return Json(plist,JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        public ActionResult getFreeServicesList()
        {
            try
            {
                var prodlist = db.products.Where(x => x.category == "Free Services").ToList().Select(x => new { 
                    x.id,
                    x.desc,
                    x.category,
                    x.categorysub,
                    x.brand,
                    x.RangesNSeries,
                    x.productcode,
                    x.uom,
                    sellprice = 0,
                    }).Distinct().ToList();

                return Json(prodlist, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        [HttpPost]
        public ActionResult getFreeServicesItemDetail(int pid = 0)
        {
            try
            {
                var prodlist = db.products.Where(x => x.id == pid && x.status == "Active").ToList().Select(x => new
                {
                    x.id,
                    x.desc,
                    x.category,
                    x.categorysub,
                    x.brand,
                    x.RangesNSeries,
                    x.productcode,
                    x.uom,
                    sellprice = 0,
                    serviceallowance = 0
                }).Distinct().ToList();

                return Json(prodlist, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }



        [HttpPost]
        //Added by ZawZO on 14 Dec 2015
        public ActionResult getSalesKitItemDetail(int pid = 0)
        {
            try
            {
                var prodlist = db.products.Where(x => x.id == pid && x.status == "Active").ToList(); 
                //Added by ZawZO on 19 Aug 2016
                var plist = prodlist.Join(db.productprices, prod => prod.id, price => price.productid, (prod, price) => new { prodlist = prod, productprices = price }).Select(x => new { x.prodlist.id, x.prodlist.desc, x.prodlist.category, x.prodlist.categorysub, x.prodlist.brand, x.prodlist.RangesNSeries, x.prodlist.productcode, x.productprices.uom, x.productprices.sellprice, x.productprices.servicecommission, awardbonus = x.productprices.awardbonus == null ? 0 : x.productprices.awardbonus, awarddollars = x.productprices.awarddollars == null ? 0 : x.productprices.awarddollars, serviceallowance = x.productprices.serviceallowance == null ? 0 : x.productprices.serviceallowance }).Distinct().ToList();
   
                return Json(plist, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        //Added by ZawZO on 11 Dec 2015
        public static ICollection<Product_m_Product> SaleKitItemsList(int skpid=0)
        {
            using (var context = new BigMacEntities())
            {
                var pList = context.Database.SqlQuery<Product_m_Product>("call getSaleKitItems(" + skpid + ")").ToList();
                return pList;
            }
        }
        //Added by ZawZO on 21 Mar 2016
        [Authorize]
        [HttpPost]
        public ActionResult saveProductCatalog(string pCat = "", string pCatSub = "", string pBr = "", string pRs = "", string pUOM = "", string pDesc = "", double pPrice = 0, string rcode = "Product")
        {
            try
            {
                string curr = "";
                double exrate = 0;
                ICollection<Configuration_m_Default> config = db.ConfigDefault.Where(x => x.key == "CURR").ToList();
                if (config.Count > 0)
                    curr = config.ElementAt(0).value;
                else
                    curr = "";
                config = db.ConfigDefault.Where(x => x.key == "EXCH").ToList();
                if (config.Count > 0)
                    exrate = Convert.ToDouble(config.ElementAt(0).value);
                else
                    exrate = 0;
                int rid = gc.getResourceID(rcode);
                Product_m_Product p1 = new Product_m_Product();
                p1.category = pCat;
                p1.categorysub = pCatSub;
                p1.brand = pBr;
                p1.RangesNSeries = pRs;
                p1.uom = pUOM;
                p1.uom2 = pUOM;
                p1.uomfactor2 = 0;
                p1.uom3 = pUOM;
                p1.uomfactor3 = 0;
                p1.desc = pDesc;
                p1.createdate = DateTime.Now;
                p1.lastmodifieddate = DateTime.Now;
                p1.cocode = Convert.ToString(Session["cocode"]);
                p1.productcode = getGeneratedNewID(p1.category, p1.categorysub, p1.brand, p1.RangesNSeries);
                p1.status = "Active";
                p1.stock = 0;
                db.products.Add(p1);
                db.SaveChanges();
                using (var context = new BigMacEntities())
                {
                    var blogNames = context.Database.ExecuteSqlCommand("Update Product_z_CategorySub set lastnumber = IFNULL(lastnumber,0) + 1 where Category ='" + p1.categorysub + "'");
                }

                if (pPrice != 0)
                {
                    Product_m_ProductPrice pPr = new Product_m_ProductPrice();
                    pPr.currency = curr;
                    pPr.exchangerate = exrate;
                    pPr.sellprice = pPrice;
                    pPr.uom = pUOM;
                    pPr.redeemdollars = 0;
                    pPr.awarddollars = 0;
                    pPr.awardbonus = 0;
                    pPr.servicecommission = 0;
                    pPr.createdate = DateTime.Now;
                    pPr.lastmodifieddate = DateTime.Now;
                    pPr.productid = p1.id;
                    pPr.pricetype = "Selling Price";
                    pPr.stockreceivedref = 0;
                    db.productprices.Add(pPr);
                    saveToLog(rid, pPr.id, "CREATE", "Create New Price - Product Code -" + pPr.productid);
                    db.SaveChanges();
                    saveToLog(rid, p1.id, "CREATE", "Create New Product - Code -" + p1.productcode);
                }
                using (var context = new BigMacEntities()){
                    var retp = context.products.Where(x => x.id == p1.id).ToList();
                    return Json(retp, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            {
                return Json("Failed", JsonRequestBehavior.AllowGet);
            }
        }
        //Added by ZawZO on 22 Mar 2016
        [Authorize]
        [HttpPost]
        public ActionResult getMiscProductDetails()
        {
            try
            {
                var p = db.products.Where(x => x.category == "Free Services" && x.categorysub == "In House" && x.brand == "In House" && x.RangesNSeries == "In House" && x.desc == "Miscellaneous Product").ToList();
                return Json(p, JsonRequestBehavior.AllowGet);
                
            }
            catch (Exception e)
            {
                return Json("Failed", JsonRequestBehavior.AllowGet);
            }
        }

        public static string getGeneratedNewID(string cat = "Product", string subcat = "SPA", string brand = "InHouse", string rnc = "")
        {
            string returnvalue = "";
            using (var context = new BigMacEntities())
            {
                var CatPrefix = context.productCategory.Where(x => x.Category == cat).FirstOrDefault().Prefix;
                Product_z_CategorySub objsubCat = context.productSubCategory.Where(x => x.Category == subcat).FirstOrDefault();
                var subCatPrefix = objsubCat.prefix;
                int lastNo;
                if (objsubCat.lastnumber == null)
                {
                    lastNo = 0;
                }
                else
                {
                    lastNo = Convert.ToInt32(objsubCat.lastnumber);
                }
                lastNo = lastNo + 1;
                var brPrefix = context.productBrand.Where(x => x.value == brand).FirstOrDefault().Prefix;
                var rncPrefix = context.productRNS.Where(x => x.value == rnc).FirstOrDefault().prefix;
                string pNo = lastNo.ToString("0000000");
                returnvalue = CatPrefix + "-" + subCatPrefix + "-" + brPrefix + "-" + rncPrefix + "-" + pNo;
            }
            return returnvalue;
        }
        //Order
        //Added by ZawZO on 12 Jan 2015
        [Authorize]
        public ActionResult SalesOrder(int id = 0, string rcode = "SALES ORDER",int appid=0, int memberrequestid=0)
        {
            Salesorder_m_salesorder so = new Salesorder_m_salesorder();
            if (Session["userid"] != null)
            {
                try
                {
                    ViewBag.Acode = "Customer";
                    ViewBag.RCode = rcode;
                    ViewBag.AppID = appid;
                    ViewBag.MemberRequestID = memberrequestid;
                    ViewBag.CussupCode = "";
                    ViewBag.StaffID = "";
                    List<SelectListItem> Genders = new List<SelectListItem>();
                    Genders.Add(new SelectListItem { Text = "Male", Value = "Male" });
                    Genders.Add(new SelectListItem { Text = "Famale", Value = "Female" });
                    ViewBag.GenderOptions=Genders;
                    string bcode = Session["branchcode"].ToString();
                    ViewBag.StaffOptions = db.BranchStaff.Join(db.Staffs, bs => bs.staffid, s => s.id, (bs, s) => new { BranchStaff = bs, Staffs = s }).Where(x => x.BranchStaff.branchcode == bcode).Select(x => new { x.Staffs.id, x.Staffs.name }).ToList();
                    ViewBag.FacilityOptions= db.BranchAsset.Where(x=>x.branchcode==bcode).OrderBy(x=>x.name).ToList();
                    ViewBag.IsMobile = Session["ismobile"].ToString();
                    string CoCode = Session["cocode"].ToString();
                    Configuration_m_Company co = db.Companies.Where(x => x.cocode == CoCode).FirstOrDefault();
                    ViewBag.CoRegNo = cAESEncryption.getDecryptedString(co.coregno);
                    Configuration_m_Branches br = db.Branches.Where(x => x.branchcode == bcode).FirstOrDefault();
                    ViewBag.CoName = cAESEncryption.getDecryptedString(br.branchname);
                    if (br.address != null)
                    {
                        if (br.address == "")
                        {
                            ViewBag.CoAddress = "-";
                        }
                        else
                        {
                            ViewBag.CoAddress = cAESEncryption.getDecryptedString(br.address);
                        }
                    }
                    else
                    {
                        ViewBag.CoAddress = "-";
                    }
                    if (br.tel != null)
                    {
                        if (br.tel == "")
                        {
                            ViewBag.Tel = "-";
                        }
                        else
                        {
                            ViewBag.Tel = cAESEncryption.getDecryptedString(br.tel);
                        }
                    }
                    else
                    {
                        ViewBag.Tel = "-";
                    }
                    if (br.fax != null)
                    {
                        if (br.fax == "")
                        {
                            ViewBag.Fax = "-";
                        }
                        else
                        {
                            ViewBag.Fax = cAESEncryption.getDecryptedString(br.fax);
                        }
                    }
                    else
                    {
                        ViewBag.Fax = "-";
                    }
                    if (br.email != null)
                    {
                        if (br.email == "")
                        {
                            ViewBag.Email = "-";
                        }
                        else
                        {
                            ViewBag.Email = cAESEncryption.getDecryptedString(br.email);
                        }
                    }
                    else
                    {
                        ViewBag.Email = "-";
                    }
                    int intGSTReg = br.gstreg;
                    if (intGSTReg == 1)
                    {
                        ViewBag.GSTRegNo = cAESEncryption.getDecryptedString(br.gstregno);
                    }
                    else
                    {
                        ViewBag.GSTRegNo = "-";
                    }

                    var y = db.ConfigDefault.Where(x => x.key == "CEXPYEAR").FirstOrDefault().value;
                    var yy = 0;
                    if (y != "")
                        yy = Convert.ToInt32(y);
                    ViewBag.ExpYear = DateTime.Today.AddYears(yy).Date;
                    ViewBag.TempExpYear = DateTime.Today.AddMonths(1).Date;

                
                    double gstpercent = 0;
                    var config = db.ConfigDefault.Where(x => x.key == "INVGSTPER").ToList();
             
                    string cocode = Convert.ToString(Session["cocode"]);
                    var gstreg = db.Companies.Where(x => x.cocode == cocode).FirstOrDefault().gstreg;
                    if (config.Count > 0)
                    {
                        if (gstreg == 0)
                            gstpercent = 0;
                        else
                            gstpercent = Convert.ToDouble(config.ElementAt(0).value);
                    }

                    ViewBag.GST = gstpercent;

                    var c = db.ConfigDefault.Where(x => x.key == "C$").FirstOrDefault().value;
                    var b = db.ConfigDefault.Where(x => x.key == "B$").FirstOrDefault().value;
                    ViewBag.CitiDesc = c;
                    ViewBag.BonusDesc = b;
                  
                    
                    if (id == 0)
                    {
                        so.id = 0;
                        so.status = "Active";
                        so.resourcecode = "";
                        so.queuenumber = "";
                        ViewBag.FacilityID = Session["assetid"].ToString();
                    }
                    else
                    {
                        so= db.saleorders.Where(x => x.id == id).FirstOrDefault();
                        if (so == null)
                        {
                            so.id = 0;
                            so.status = "Active";
                            so.resourcecode = "";
                            so.queuenumber = "";
                            ViewBag.FacilityID = Session["assetid"].ToString();
                        }
                        else
                        {
                            ViewBag.StaffID = so.staffid;
                            var ctmp = db.CusSup.Where(x => x.id == so.cussupid).FirstOrDefault();
                            if (ctmp != null) ViewBag.CussupCode = ctmp.inhousecode;
                            ViewBag.FacilityID = so.branchassetid.ToString();
                        }
                    }
                    return View(so);
                }
                catch (Exception e)
                {
                    return View(so);
                }
            }
            else
                return RedirectToAction("Login", "Access");
        }
        //Added by ZawZO on 19 Jan 2016
        public ActionResult FacilityOrderListing(string rcode = "SALES ORDER")
        {
            ViewBag.Rcode = rcode;
            ViewBag.IsMobile = Session["ismobile"];
            //Added by ZawZO on 4 Feb 2016
            string bcode = Session["branchcode"].ToString();
            ViewBag.StaffOptions = db.BranchStaff.Join(db.Staffs, bs => bs.staffid, s => s.id, (bs, s) => new { BranchStaff = bs, Staffs = s }).Where(x => x.BranchStaff.branchcode == bcode).Select(x => new { x.Staffs.id, x.Staffs.name }).ToList();

            return View();
        }

   
        public ActionResult AppointmentListing(string rcode = "SALES ORDER")
        {
            ViewBag.Rcode = rcode;
            ViewBag.IsMobile = Session["ismobile"];
            string bcode = Session["branchcode"].ToString();
            ViewBag.StaffOptions = db.BranchStaff.Join(db.Staffs, bs => bs.staffid, s => s.id, (bs, s) => new { BranchStaff = bs, Staffs = s }).Where(x => x.BranchStaff.branchcode == bcode).Select(x => new { x.Staffs.id, x.Staffs.name }).ToList();

            return View();
        }


        public ActionResult AttendanceListing(string rcode = "SALES ORDER")
        {
            ViewBag.Rcode = rcode;
            ViewBag.IsMobile = Session["ismobile"];
            string bcode = Session["branchcode"].ToString();
            ViewBag.StaffOptions = db.BranchStaff.Join(db.Staffs, bs => bs.staffid, s => s.id, (bs, s) => new { BranchStaff = bs, Staffs = s }).Where(x => x.BranchStaff.branchcode == bcode).Select(x => new { x.Staffs.id, x.Staffs.name }).ToList();
            var list = db.Branches.Where(x => x.branchcode == bcode).ToList();
            ViewBag.branchname = cAESEncryption.getDecryptedString(list[0].branchname);

            ViewBag.BCode = bcode;
            return View();
        }

        public ActionResult OutstandingBalanceListing(string rcode = "SALES ORDER")
        {
            ViewBag.Rcode = rcode;
            ViewBag.IsMobile = Session["ismobile"];
            string bcode = Session["branchcode"].ToString();
            ViewBag.StaffOptions = db.BranchStaff.Join(db.Staffs, bs => bs.staffid, s => s.id, (bs, s) => new { BranchStaff = bs, Staffs = s }).Where(x => x.BranchStaff.branchcode == bcode).Select(x => new { x.Staffs.id, x.Staffs.name }).ToList();

            return View();
        }


        public ActionResult MemberRequestListing(string rcode = "SALES ORDER")
        {
            ViewBag.Rcode = rcode;
            ViewBag.IsMobile = Session["ismobile"];
            string bcode = Session["branchcode"].ToString();
            ViewBag.StaffOptions = db.BranchStaff.Join(db.Staffs, bs => bs.staffid, s => s.id, (bs, s) => new { BranchStaff = bs, Staffs = s }).Where(x => x.BranchStaff.branchcode == bcode).Select(x => new { x.Staffs.id, x.Staffs.name }).ToList();

            return View();
        }

        //Added by ZawZO on 20 Jan 2016
        public ActionResult FacilityOrderQueueListing(string rcode = "Facility Order Queue")
        {
            ViewBag.Rcode = rcode;
            ViewBag.IsMobile = Session["ismobile"];
            //Added by ZawZO on 5 Feb 2016
            string bcode = Session["branchcode"].ToString();
            ViewBag.StaffOptions = db.BranchStaff.Join(db.Staffs, bs => bs.staffid, s => s.id, (bs, s) => new { BranchStaff = bs, Staffs = s }).Where(x => x.BranchStaff.branchcode == bcode).Select(x => new { x.Staffs.id, x.Staffs.name }).ToList();

            return View();
        }
        //Added by ZawZO on 18 Jan 2016
        [HttpPost]
        [Authorize]
        public JsonResult SalesOrderSave(Salesorder_m_salesorder objso, string resource = "SalesOrder", int soid = 0, string detlids = "", int appid = 0)
        {
            var returnStr = "FAIL";
            int detlcount = 0;
            
            if (Session["userid"] != null)
            {
                try
                {
                    string curr = "";
                    double exrate = 0;
                    ICollection<Configuration_m_Default> config = db.ConfigDefault.Where(x => x.key == "CURR").ToList();

                    if (config.Count > 0)
                        curr = config.ElementAt(0).value;
                    else
                        curr = "";

                    config = db.ConfigDefault.Where(x => x.key == "EXCH").ToList();
                    if (config.Count > 0)
                        exrate = Convert.ToDouble(config.ElementAt(0).value);
                    else
                        exrate = 0;

                    var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                    int rid = 0;
                    if (ridtmp != null) rid = Convert.ToInt32(ridtmp);
                    int uid = Convert.ToInt32(Session["userid"]);
                    int staffid = 0;
                    var stmp = db.Staffs.Where(x => x.userid == uid).ToList();
                    if (objso.id == 0)
                    {
                        objso.createdate = DateTime.Now;
                        objso.lastmodifieddate = DateTime.Now;
                        objso.resourcedate = DateTime.Now;
                        objso.cocode = Convert.ToString(Session["cocode"]);
                        objso.createid = uid;
                        objso.branchcode = Convert.ToString(Session["branchcode"]);
                        var uniquecode = "";
                        uniquecode = DateTime.Now.Year.ToString().Trim() + DateTime.Now.Month.ToString().Trim() + DateTime.Now.Day.ToString().Trim() + DateTime.Now.Hour.ToString().Trim() + DateTime.Now.Minute.ToString().Trim() + DateTime.Now.Second.ToString().Trim();
                        objso.uniquecode = uniquecode;
                        objso.resourcecode = GeneralController.getGeneratedNewID("salesorder_m_salesorder", "resourcecode", "OTPREFIX", "FACORD");
                        objso.currency = curr;
                        objso.exchangerate = exrate;
                        //string datetimenow = DateTime.Now.Month + "/" + DateTime.Now.Day + "/" + DateTime.Now.Year;
                        DateTime startDateTime = DateTime.Today; //Today at 00:00:00
                        DateTime endDateTime = DateTime.Today.AddDays(1).AddTicks(-1); //Today at 23:59:59
                        string branchcode = Session["branchcode"].ToString();

                        var ot = db.saleorders.Where(x => (x.createdate >= startDateTime && x.createdate <= endDateTime) && x.branchcode == branchcode && x.type == "ORDER TAKING").OrderByDescending(x => x.queuenumber).ToList();

                        if (ot.Count > 0)
                        {
                            int count = Convert.ToInt32(ot[0].queuenumber.TrimStart('0')) + 1;
                            objso.queuenumber = count.ToString().PadLeft(4, '0');
                        }
                        else
                        {
                            objso.queuenumber = "0001";
                        }

                        db.saleorders.Add(objso);
                        db.SaveChanges();
                        if (objso.details != null) detlcount = objso.details.Count();
                        saveToLog(rid, objso.id, "CREATE", "Add New POS for cust id - " + objso.cussupid.ToString() + ", Refno-" + objso.resourcecode.ToString() + ", Item Count -" + detlcount.ToString() + objso.resourcecode + ", ID- " + objso.id.ToString());
                        if (objso.details != null)
                        {
                            for (int i = 0; i < (objso.details.Count()); i++)
                            {
                                SaveNewSODetail(objso.details.ElementAt(i), objso.id, objso.cussupid, resource, objso.resourcecode, rid, objso.status, staffid, uid, objso.cussupname, objso.starttime, objso.endtime);
                            }
                        }


                        if (appid > 0)
                        {
                            Schedule_m_Appointment app = db.appointment.FirstOrDefault(x => x.id == appid);
                            if (app != null)
                            {
                                app.sonumber = objso.resourcecode;
                                app.queuenumber = objso.queuenumber;
                                app.status = "Confirmed";
                                app.modifieddate = DateTime.Now;
                                db.SaveChanges();
                            }
                        }

                      
                    }
                    else
                    {
                        Salesorder_m_salesorder sotmp = db.saleorders.Find(objso.id);
                        sotmp.lastmodifieddate = DateTime.Now;
                        string from = ""; string to = "";
                        string prevStatus = sotmp.status.Trim().ToUpper();
                        string newStatus = objso.status.Trim().ToUpper();
                        from = "Status -" + sotmp.status + ", Create By -" + sotmp.staffid ;
                        to = "Status -" + objso.status + ", Create By -" + objso.staffid + ",  items -" + detlids;
                        sotmp.cocode = Convert.ToString(Session["cocode"]);
                        sotmp.branchcode = Convert.ToString(Session["branchcode"]);
                        sotmp.cussupid = objso.cussupid;
                        sotmp.cussupname = objso.cussupname;
                        sotmp.status = objso.status;
                        sotmp.staffid = objso.staffid;
                        sotmp.resourcecode = objso.resourcecode;
                        db.SaveChanges();
                        if (objso.details != null) detlcount = objso.details.Count();
                        saveToLog(rid, sotmp.id, "UPDATE", "UPDATE Redeem - refno -" + sotmp.resourcecode + " , id - " + sotmp.id.ToString() + ", Item Count -" + detlcount.ToString() , from, to);
                        using (var context = new BigMacEntities())
                        {
                            detlids = detlids+ "0";
                            var value = context.Database.ExecuteSqlCommand("Delete from Salesorder_m_detail where saleorderid=" + objso.id.ToString() + " and id not in (" + detlids + ")");
                        }
                        if (objso.details != null)
                        {
                            for (int i = 0; i < (objso.details.Count()); i++)
                            {   
                                if (objso.details.ElementAt(i).id == 0)
                                {
                                    SaveNewSODetail(objso.details.ElementAt(i), objso.id, objso.cussupid, resource, objso.resourcecode, rid, objso.status, staffid, uid, objso.cussupname, objso.starttime, objso.endtime);
                                }
                                else
                                {
                                    objso.details.ElementAt(i).staffserviceid = staffid;
                                    UpdateSalesOrderDetail(objso.details.ElementAt(i), objso.cussupid, resource, objso.resourcecode, rid);
                                }
                            }
                        }
                    }
                    returnStr = "SUCCESS" + "," + objso.id.ToString() + "," + objso.resourcecode.ToString() + "," + objso.status.ToString() + "," + objso.queuenumber.ToString();
                }
                catch (Exception e)
                { returnStr = e.InnerException.ToString(); }
            }
            else
            {
                Response.RedirectToRoute(new { controller = "Access", action = "Login" });
                returnStr = "SESSIONEXPIRED";
            }
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }
        //Added by ZawZO on 18 Jan 2016
        [Authorize]
        public void SaveNewSaleOrderDetail(salesorder_m_detail dtl, int tid, int memberid, string resource, string resourcecode, int rid = 0, string status = "Close", int staffid = 0, int uid = 0)
        {
            dtl.resourcecode = resourcecode;
            dtl.createdate = DateTime.Now;
            dtl.lastmodifieddate = DateTime.Now;
            dtl.createid = Convert.ToInt32(Session["userid"]);
            dtl.salesorderid= tid;
            //dtl.staffserviceid = staffid;
            db.saleordersItems.Add(dtl);
            db.SaveChanges();
            saveToLog(rid, dtl.id, "CREATE", "Add New Detail Item - product ID -" + dtl.productid, "RefNo no- " + resourcecode + ", Item ID- " + dtl.id.ToString());
        }
        //Added by Jayson Ocampo on  6 Jan 2017
        [Authorize]
        public void SaveNewSODetail(salesorder_m_detail dtl, int tid, int memberid, string resource, string resourcecode, int rid = 0, string status = "Close", int staffid = 0, int uid = 0, string membername = "",string starttime = "", string endtime = "")
        {
            //Add treatment per item
            dtl.starttime = starttime;
            dtl.endtime = endtime;
            dtl.resourcecode = resourcecode;
            dtl.createdate = DateTime.Now;
            dtl.lastmodifieddate = DateTime.Now;
            dtl.createid = Convert.ToInt32(Session["userid"]);
            dtl.salesorderid = tid;
            //dtl.staffserviceid = staffid;
            db.saleordersItems.Add(dtl);
            db.SaveChanges();
            saveToLog(rid, dtl.id, "CREATE", "Add New Detail Item - product ID -" + dtl.productid, "RefNo no- " + resourcecode + ", Item ID- " + dtl.id.ToString());
         
            if (dtl.treatment != null)
                SaveSOTreatment(dtl, memberid, membername, rid);
        
        }

        //Added by ZawZO on 18 Jan 2016
        [Authorize]
        public void UpdateSalesOrderDetail(salesorder_m_detail dtl, int memberid, string resource, string resourcecode, int rid)
        {
            salesorder_m_detail tmp = db.saleordersItems.Find(dtl.id);
            string from = ""; string to = "";
            if (tmp != null)
            {
                from = "proudctid -" + tmp.productid + ",product desc -" + tmp.productdesc + ",qty-" + tmp.qty.ToString();
                to = "proudctid -" + dtl.productid + ",product desc -" + dtl.productdesc +  dtl.qty.ToString();
                tmp.productid = dtl.productid;
                tmp.productcode = dtl.productcode;
                tmp.productdesc = dtl.productdesc;
                tmp.lineno = dtl.lineno;
                tmp.qty = dtl.qty;
                tmp.uom = dtl.uom;
                tmp.staffserviceid = dtl.staffserviceid;
                db.SaveChanges();
                saveToLog(rid, dtl.id, "UPDATE", "Update Detail Item ID-" + dtl.id.ToString() + " RefNo -" + resourcecode, from, to);
                dtl.resourcecode = tmp.resourcecode;
                dtl.salesorderid= tmp.salesorderid;
            }
        }

        [Authorize]
        public void UpdateExistingSalesOrderDetail(salesorder_m_detail dtl, int memberid, string resource, string resourcecode, int rid,string membername)
        {
            salesorder_m_detail tmp = db.saleordersItems.Find(dtl.id);
            string from = ""; string to = "";
            if (tmp != null)
            {
                from = "proudctid -" + tmp.productid + ",product desc -" + tmp.productdesc + ",qty-" + tmp.qty.ToString();
                to = "proudctid -" + dtl.productid + ",product desc -" + dtl.productdesc + dtl.qty.ToString();
                tmp.productid = dtl.productid;
                tmp.productcode = dtl.productcode;
                tmp.productdesc = dtl.productdesc;
                tmp.ispackageselected = dtl.ispackageselected;
                tmp.lineno = dtl.lineno;
                tmp.qty = dtl.qty;
                tmp.uom = dtl.uom;
                tmp.foc = dtl.foc;
                tmp.pts = dtl.pts;
                tmp.rdm = dtl.rdm;
                tmp.pos = dtl.pos;
                tmp.staffserviceid = dtl.staffserviceid;
                db.SaveChanges();
                saveToLog(rid, dtl.id, "UPDATE", "Update Detail Item ID-" + dtl.id.ToString() + " RefNo -" + resourcecode, from, to);
                dtl.resourcecode = tmp.resourcecode;
                dtl.salesorderid = tmp.salesorderid;

                if (dtl.treatment != null)
                    SaveSOTreatment(dtl, memberid, membername, rid);
            }


        }

        //Added by ZawZO on 19 Jan 2016
        [Authorize]
        public ActionResult getFacilityOrderListWithPaging(jQueryDataTableParamModel param,string date)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    string bcode = Session["branchcode"].ToString();
                    string strsql = "call getFacilityOrderList('" + bcode + "')";
                    var pTmpList = context.Database.SqlQuery<facility_booking>(strsql).ToList();
                    var pList = pTmpList;

                    var searchValue = "";
                    if (param.sSearch == null) searchValue = "";
                    else searchValue = param.sSearch;
                    string selectedDate = "";
                    if (date != "")
                    {
                        DateTime oDate = DateTime.ParseExact(date, "dd/MM/yyyy", null);
                        selectedDate = oDate.Month + "/" + oDate.Day + "/" + oDate.Year;
                    }
                    else
                    {
                        selectedDate = DateTime.Now.Month + "/" + DateTime.Now.Day + "/" + DateTime.Now.Year;
                    }

                    foreach (var i in pList)
                    {
                        string type = "Walk In";
                
                        var app = db.appointment.FirstOrDefault(x => x.sonumber == i.resourcecode);

                        if (app != null)
                        {
                            type = "Appointment";
                   
                        }

                        i.type = type;
                  
                        if (i.status == "QUEUE")
                        {
                            i.statusorder = 1;
                        }
                        else if (i.status == "SERVICE COMPLETED")
                        {
                            i.statusorder = 2;
                        }
                        else if (i.status == "ORDER COMPLETED")
                        {
                            i.statusorder = 3;
                        }
                        else if (i.status == "CANCEL")
                        {
                            i.statusorder = 4;
                        }
                    }

                    pList = pList.Where(x => x.createdate.ToString().Contains(selectedDate)).OrderBy(x => x.statusorder).ThenByDescending(x=>x.queuenumber).ToList();

                    var filterPList = pList.Where(x => x.resourcecode.Contains(searchValue.ToUpper()) || x.cussupname.ToUpper().Contains(searchValue.ToUpper())).ToList();

                    var sortColumnIndex = Convert.ToInt32(Request["iSortCol_0"]);
                    var sortDirection = Request["sSortDir_0"]; //asc or desc
                    if (sortDirection != null)
                    {
                        if (sortDirection == "asc")
                        {
                            if (sortColumnIndex == 0)
                                filterPList = filterPList.OrderBy(x => x.resourcecode).ToList();
                            else if (sortColumnIndex == 1)
                                filterPList = filterPList.OrderBy(x => x.queuenumber).ToList();
                            else if (sortColumnIndex == 2)
                                filterPList = filterPList.OrderBy(x => x.type).ToList();
                            else if (sortColumnIndex == 3)
                                filterPList = filterPList.OrderBy(x => x.starttime).ToList();
                            else if (sortColumnIndex == 4)
                                filterPList = filterPList.OrderBy(x => x.facility).ToList();
                            else if (sortColumnIndex == 5)
                                filterPList = filterPList.OrderBy(x => x.staffname).ToList();
                            else if (sortColumnIndex == 6)
                                filterPList = filterPList.OrderBy(x => x.cussupname).ToList();
                            else if (sortColumnIndex == 7)
                                filterPList = filterPList.OrderBy(x => x.total_amountrefund).ToList();
                            else if (sortColumnIndex == 8)
                                filterPList = filterPList.OrderBy(x => x.total_total).ToList();
                            else if (sortColumnIndex == 9)
                                filterPList = filterPList.OrderBy(x => x.status).ToList();
                        }
                        else
                        {
                            if (sortColumnIndex == 0)
                                filterPList = filterPList.OrderByDescending(x => x.resourcecode).ToList();
                            else if (sortColumnIndex == 1)
                                filterPList = filterPList.OrderByDescending(x => x.queuenumber).ToList();
                            else if (sortColumnIndex == 2)
                                filterPList = filterPList.OrderByDescending(x => x.type).ToList();
                            else if (sortColumnIndex == 3)
                                filterPList = filterPList.OrderByDescending(x => x.starttime).ToList();
                            else if (sortColumnIndex == 4)
                                filterPList = filterPList.OrderByDescending(x => x.facility).ToList();
                            else if (sortColumnIndex == 5)
                                filterPList = filterPList.OrderByDescending(x => x.staffname).ToList();
                            else if (sortColumnIndex == 6)
                                filterPList = filterPList.OrderByDescending(x => x.cussupname).ToList();
                            else if (sortColumnIndex == 7)
                                filterPList = filterPList.OrderByDescending(x => x.total_amountrefund).ToList();
                            else if (sortColumnIndex == 8)
                                filterPList = filterPList.OrderByDescending(x => x.total_total).ToList();
                            else if (sortColumnIndex == 9)
                                filterPList = filterPList.OrderByDescending(x => x.status).ToList();
                        }
                    }
                    var paginatedPList = filterPList.Skip(param.iDisplayStart).Take(param.iDisplayLength).ToList();
                    return Json(new
                    {
                        sEcho = param.sEcho,
                        iTotalRecords = pList.Count, //paginatedQPList.TotalCount,
                        iTotalDisplayRecords = filterPList.Count, //paginatedQPList.TotalCount,
                        aaData = paginatedPList
                    },
                    JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }
        //Added by ZawZO on 19 Jan 2016
        [Authorize]
        public ActionResult getFacilityOrderQueueListWithPaging(jQueryDataTableParamModel param)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    string bcode = Session["branchcode"].ToString();
                    string strsql = "call getFacilityOrderQueueList('" + bcode + "')";
                    var pTmpList = context.Database.SqlQuery<facility_booking>(strsql).ToList();
                    var pList = pTmpList;

                    var searchValue = "";
                    if (param.sSearch == null) searchValue = "";
                    else searchValue = param.sSearch;
                    var filterPList = pList.Where(x => string.Format("dd/MM/yyyy", x.createdate).Contains(searchValue) || x.cussupname.ToUpper().Contains(searchValue.ToUpper())).OrderByDescending(x => x.createdate).ToList();

                    var sortColumnIndex = Convert.ToInt32(Request["iSortCol_0"]);
                    var sortDirection = Request["sSortDir_0"]; //asc or desc
                    if (sortDirection == "asc")
                    {
                        if (sortColumnIndex == 0)
                            filterPList = filterPList.OrderBy(x => x.createdate).ToList();
                        else if (sortColumnIndex == 1)
                            filterPList = filterPList.OrderBy(x => x.resourcecode).ToList();
                        else if (sortColumnIndex == 2)
                            filterPList = filterPList.OrderBy(x => x.branchcode).ToList();
                        else if (sortColumnIndex == 3)
                            filterPList = filterPList.OrderBy(x => x.cussupname).ToList();
                        else if (sortColumnIndex == 4)
                            filterPList = filterPList.OrderBy(x => x.facility).ToList();
                    }
                    else
                    {
                        if (sortColumnIndex == 0)
                            filterPList = filterPList.OrderByDescending(x => x.createdate).ToList();
                        else if (sortColumnIndex == 1)
                            filterPList = filterPList.OrderByDescending(x => x.resourcecode).ToList();
                        else if (sortColumnIndex == 2)
                            filterPList = filterPList.OrderByDescending(x => x.branchcode).ToList();
                        else if (sortColumnIndex == 3)
                            filterPList = filterPList.OrderByDescending(x => x.cussupname).ToList();
                        else if (sortColumnIndex == 4)
                            filterPList = filterPList.OrderByDescending(x => x.facility).ToList();
                    }

                    var paginatedPList = filterPList.Skip(param.iDisplayStart).Take(param.iDisplayLength).ToList();
                    return Json(new
                    {
                        sEcho = param.sEcho,
                        iTotalRecords = pList.Count, //paginatedQPList.TotalCount,
                        iTotalDisplayRecords = filterPList.Count, //paginatedQPList.TotalCount,
                        aaData = paginatedPList
                    },
                    JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }
        //Added by ZawZO on 27 Jan 2016
        [Authorize]
        public ActionResult isValidFacilityOrder(int assetid,string starttime, string endtime)
        {
            string returnValue = "FALSE";
            DateTime start = Convert.ToDateTime(starttime);
            DateTime end = Convert.ToDateTime(endtime);
            try
            {
                using (var context = new BigMacEntities())
                {
                    string bcode = Session["branchcode"].ToString();
                    string strsql = "call getFacilityOrderQueueListByDate('" + bcode + "'," + assetid + ")";
                    var pTmpList = context.Database.SqlQuery<Salesorder_m_salesorder>(strsql).ToList();
                    if (pTmpList != null){
                        if (pTmpList.Count == 0)
                        {
                            returnValue = "TRUE";
                        }
                        else
                        {
                            for (int i = 0; i < pTmpList.Count; i++)
                            {
                                DateTime prevstart = Convert.ToDateTime(pTmpList[i].starttime);
                                DateTime prevend = Convert.ToDateTime(pTmpList[i].endtime);
                                if (start > prevstart && start < prevend )
                                {
                                    returnValue = "FALSE"; break;
                                }
                                else if (end >prevstart && end < prevend)
                                {
                                    returnValue = "FALSE"; break;
                                }
                                else if (start <= prevstart && end >= prevend)
                                {
                                    returnValue = "FALSE"; break;
                                }
                               else
                                {
                                    returnValue = "TRUE";
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            { returnValue = "FALSE"; }
            return Json(returnValue, JsonRequestBehavior.AllowGet);
        }

        [Authorize]
        public string isValidOrderTaking(int assetid, string starttime, string endtime)
        {
            string returnValue = "FALSE";
            DateTime start = Convert.ToDateTime(starttime);
            DateTime end = Convert.ToDateTime(endtime);
            try
            {
                using (var context = new BigMacEntities())
                {
                    string bcode = Session["branchcode"].ToString();
                    string strsql = "call getFacilityOrderQueueListByDate('" + bcode + "'," + assetid + ")";
                    var pTmpList = context.Database.SqlQuery<Salesorder_m_salesorder>(strsql).ToList();
                    if (pTmpList != null)
                    {
                        if (pTmpList.Count == 0)
                        {
                            returnValue = "TRUE";
                        }
                        else
                        {
                            for (int i = 0; i < pTmpList.Count; i++)
                            {
                                DateTime prevstart = Convert.ToDateTime(pTmpList[i].starttime);
                                DateTime prevend = Convert.ToDateTime(pTmpList[i].endtime);
                                if (start > prevstart && start < prevend)
                                {
                                    returnValue = "FALSE"; break;
                                }
                                else if (end > prevstart && end < prevend)
                                {
                                    returnValue = "FALSE"; break;
                                }
                                else if (start <= prevstart && end >= prevend)
                                {
                                    returnValue = "FALSE"; break;
                                }
                                else
                                {
                                    returnValue = "TRUE";
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            { returnValue = "FALSE"; }
            return returnValue;
        }



        //Added by ZawZO on 20 Jan 2016
        [HttpPost]
        [Authorize]
        public JsonResult UpdateFacilityOrderStartTime(string id, string starttime,int sid)
        {
            try
            {
                Salesorder_m_salesorder tmp = db.saleorders.Where(x => x.resourcecode == id).FirstOrDefault();
                string from = ""; string to = "";
                if (tmp != null)
                {
                    from = "order id -" + tmp.resourcecode + ",start time -" + tmp.starttime;
                    tmp.starttime = starttime;
                    //Added by ZawZO on 4 Feb 2016
                    tmp.staffid = sid.ToString();

                    tmp.status = "START";
                    db.SaveChanges();
                    saveToLog(0, tmp.id, "UPDATE", "Update Detail Item ID-" + tmp.id.ToString() + " RefNo -" + tmp.resourcecode, from, to);

                    Schedule_m_Appointment app = db.appointment.Where(x => x.queuenumber == tmp.queuenumber && x.sonumber == tmp.resourcecode).FirstOrDefault();
                    if (app != null)
                    {
                        app.status = "Arrived";
                        db.SaveChanges();
                    }
                }
                { return Json("SUCCESS", JsonRequestBehavior.AllowGet); }
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }            
        }
        //Added by ZawZO on 20 Jan 2016
        [HttpPost]
        [Authorize]
        public JsonResult UpdateFacilityOrderEndTime(string id, string endtime, int sid)
        {
            try
            {
                Salesorder_m_salesorder tmp = db.saleorders.Where(x => x.resourcecode == id).FirstOrDefault();
                string from = ""; string to = "";
                if (tmp != null)
                {
                    from = "order id -" + tmp.resourcecode + ",end time -" + tmp.endtime;
                    tmp.endtime = endtime;
                    //Added by ZawZO on 4 Feb 2016
                    tmp.staffid = sid.ToString();
                  
                    db.SaveChanges();
                    saveToLog(0, tmp.id, "UPDATE", "Update Detail Item ID-" + tmp.id.ToString() + " RefNo -" + tmp.resourcecode, from, to);

                    Schedule_m_Appointment app = db.appointment.Where(x => x.queuenumber == tmp.queuenumber && x.sonumber == tmp.resourcecode).FirstOrDefault();
                    if (app != null)
                    {
                        app.status = "Done";
                        db.SaveChanges();
                    }
                    
                }
                { return Json("SUCCESS", JsonRequestBehavior.AllowGet); }
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        //Added by ZawZO on 1 Feb 2016
        [HttpPost]
        [Authorize]
        public JsonResult UpdateOrderStatusPaid(int id)
        {
            try
            {
                Salesorder_m_salesorder tmp = db.saleorders.Where(x => x.id== id).FirstOrDefault();
                string from = ""; string to = "";
                if (tmp != null)
                {
                    from = "order id -" + tmp.resourcecode + ",status- Close";
                    tmp.status = "PAID";
                    db.SaveChanges();
                    saveToLog(0, tmp.id, "UPDATE", "Update Detail Item ID-" + tmp.id.ToString() + " RefNo -" + tmp.resourcecode, from, to);
                }
                { return Json("SUCCESS", JsonRequestBehavior.AllowGet); }
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        //Added by ZawZO on 20 Jan 2016
        [HttpPost]
        [Authorize]
        public JsonResult UpdateFacilityOrderDone(string id, string endtime)
        {
            try
            {
                Salesorder_m_salesorder tmp = db.saleorders.Where(x => x.resourcecode == id).FirstOrDefault();
                string from = ""; string to = "";
                if (tmp != null)
                {
                    from = "order id -" + tmp.resourcecode + ",end time -" + tmp.endtime;
                    tmp.endtime = endtime;
                    tmp.status = "DONE";
                    db.SaveChanges();
                    saveToLog(0, tmp.id, "UPDATE", "Update Detail Item ID-" + tmp.id.ToString() + " RefNo -" + tmp.resourcecode, from, to);
                }
                { return Json("SUCCESS", JsonRequestBehavior.AllowGet); }
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }
        //Added by ZawZO on 28 Jan 2016
        [HttpPost]
        [Authorize]
        public JsonResult UpdateFacilityOrderStatusCancel(int id)
        {
            try
            {
                Salesorder_m_salesorder tmp = db.saleorders.Where(x => x.id == id).FirstOrDefault();
                string from = ""; string to = "";
                if (tmp != null)
                {
                    from = "order id -" + tmp.resourcecode + ",start time -" + tmp.starttime;
                    tmp.status = "CANCEL";
                    db.SaveChanges();
                    saveToLog(0, tmp.id, "UPDATE", "Update Detail Item ID-" + tmp.id.ToString() + " RefNo -" + tmp.resourcecode, from, to);
                }
                { return Json("SUCCESS", JsonRequestBehavior.AllowGet); }
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }
        //Added by ZawZO on 20 Jan 2016
        [Authorize]
        public ActionResult getFacilityOrderInfo(string ordercode = "")
        {
            try
            {
                var soList = db.saleorders.Where(x => x.resourcecode== ordercode).ToList();
                return Json(soList, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }
        public ActionResult Index()
        {
            return View();
        }

        public ActionResult Redeem()
        {
            return View();
        }

        public ActionResult TopUp()
        {
            return View();
        }

        public ActionResult Customer(int id = 0, string type = "Customer")
        {
            try
            {
                int i = 0;
                ViewBag.TypeOptions = db.CusSupType.AsEnumerable();
                ViewBag.StatusOptions = db.CusSupStatus.AsEnumerable();
                ICollection<Configuration_m_Branches> branches = db.Branches.ToList();
                for (i = 0; i < branches.Count; i++)
                {
                    branches.ElementAt(i).branchname = cAESEncryption.getDecryptedString(branches.ElementAt(i).branchname);
                }

                ViewBag.BranchOptions = branches;
                ICollection<Configuration_m_Company> companies = db.Companies.ToList();
                for (i = 0; i < companies.Count; i++)
                {
                    companies.ElementAt(i).name = cAESEncryption.getDecryptedString(companies.ElementAt(i).name);
                }
                ViewBag.CompanyOptions = companies;

                if (id == 0)
                {
                    CusSup_m_CusSup cussup = new CusSup_m_CusSup();
                    cussup.cussuptype = type;
                    return View(cussup);
                }
                else
                {
                    CusSup_m_CusSup cussup = db.CusSup.Find(id);
                    cussup.address = cAESEncryption.getDecryptedString(cussup.address);
                    cussup.postalcode = cAESEncryption.getDecryptedString(cussup.postalcode);
                    cussup.nric = cAESEncryption.getDecryptedString(cussup.nric);
                    cussup.Tel = cAESEncryption.getDecryptedString(cussup.Tel);
                    cussup.mobile = cAESEncryption.getDecryptedString(cussup.mobile);
                    cussup.email = cAESEncryption.getDecryptedString(cussup.email);
                    cussup.userid = cAESEncryption.getDecryptedString(cussup.userid);
                    return View(cussup);
                }
            }
            catch (Exception e)
            {
                return View();
            }
            
        }

        public ActionResult Product(int id = 0)
        {
                int i = 0;
                ViewBag.CategoryOptions = db.productCategory.AsEnumerable();
                ViewBag.StatusOptions = db.productStatus.AsEnumerable();
                ICollection<Common_z_UnitofMeasurment> ul = db.UOM.ToList();
                Common_z_UnitofMeasurment u = new Common_z_UnitofMeasurment();
                u.id = 0;
                u.UOM = "-- Select --";
                ul.Add(u);
                ViewBag.UOMOptions = ul.OrderBy(x=>x.id).ToList();// db.UOM.AsEnumerable();

                ViewBag.PriceTypeOptions = db.pricetype.AsEnumerable();
                //ViewBag.ProductName = db.products.Where(x => x.id == id).FirstOrDefault().desc;
                //ViewBag.prc = prc;
                ICollection<Configuration_m_Default> config = db.ConfigDefault.Where(x => x.key == "CURR").ToList();
                if (config.Count > 0)
                    ViewBag.Currency = config.ElementAt(0).value;
                else
                    ViewBag.Currency = "";

                config = db.ConfigDefault.Where(x => x.key == "EXCH").ToList();
                if (config.Count > 0)
                    ViewBag.ExchangeRate = config.ElementAt(0).value;
                else
                    ViewBag.ExchangeRate = "";

                //ICollection<Configuration_m_Branches> branches = db.Branches.ToList();
                //for (i = 0; i < branches.Count; i++)
                //{
                //    branches.ElementAt(i).branchname = cAESEncryption.getDecryptedString(branches.ElementAt(i).branchname);
                //}
                //ViewBag.BranchOptions = branches;
                ICollection<Configuration_m_Company> companies = db.Companies.ToList();
                for (i = 0; i < companies.Count; i++)
                {
                    companies.ElementAt(i).name = cAESEncryption.getDecryptedString(companies.ElementAt(i).name);
                }
                ViewBag.CompanyOptions = companies;
            return View();
        }

        public ActionResult DailySales()
        {
            return View();
        }

        public ActionResult DailyRedemption()
        {
            return View();
        }

        public ActionResult ProductListing()
        {
            return View();
        }

        public ActionResult MembershipEnquiry(int id = 0, string type = "Customer")
        {
            try
            {
                int i = 0;
                ViewBag.TypeOptions = db.CusSupType.AsEnumerable();
                ViewBag.StatusOptions = db.CusSupStatus.AsEnumerable();
                ICollection<Configuration_m_Branches> branches = db.Branches.ToList();
                for (i = 0; i < branches.Count; i++)
                {
                    branches.ElementAt(i).branchname = cAESEncryption.getDecryptedString(branches.ElementAt(i).branchname);
                }
                ViewBag.BranchOptions = branches;
                ICollection<Configuration_m_Company> companies = db.Companies.ToList();
                for (i = 0; i < companies.Count; i++)
                {
                    companies.ElementAt(i).name = cAESEncryption.getDecryptedString(companies.ElementAt(i).name);
                }
                ViewBag.CompanyOptions = companies;

                if (id == 0)
                {
                    CusSup_m_CusSup cussup = new CusSup_m_CusSup();
                    cussup.cussuptype = type;
                    return View(cussup);
                }
                else
                {
                    CusSup_m_CusSup cussup = db.CusSup.Find(id);
                    cussup.address = cAESEncryption.getDecryptedString(cussup.address);
                    cussup.postalcode = cAESEncryption.getDecryptedString(cussup.postalcode);
                    cussup.nric = cAESEncryption.getDecryptedString(cussup.nric);
                    cussup.Tel = cAESEncryption.getDecryptedString(cussup.Tel);
                    cussup.mobile = cAESEncryption.getDecryptedString(cussup.mobile);
                    cussup.email = cAESEncryption.getDecryptedString(cussup.email);
                    cussup.userid = cAESEncryption.getDecryptedString(cussup.userid);
                    return View(cussup);
                }
            }
            catch (Exception e)
            {
                return View();
            }
        }

        public ActionResult TransactionHistory()
        {
            return View();
        }
        //Added by ZawZO on 16 Feb 2016
        public ActionResult MileageReward()
        {
            List<SelectListItem> Genders = new List<SelectListItem>();
            Genders.Add(new SelectListItem { Text = "Male", Value = "Male" });
            Genders.Add(new SelectListItem { Text = "Famale", Value = "Female" });
            ViewBag.GenderOptions = Genders;
            ViewBag.IsMobile = Session["ismobile"];
            return View();
        }
        //Added by ZawZO on 19 Feb 2016
        [HttpPost]
        [Authorize]
        public ActionResult isValidPartnerUserAccount(string pwd="")
        {
            var returnStr = "FALSE";
            int uid = Convert.ToInt32(Session["userid"]);
            string upwd = "";
            Access_m_Users u = db.Users.Where(x => x.id == uid).FirstOrDefault();
            if (u != null)
            {
                upwd = cAESEncryption.getDecryptedString(u.password);
                if (upwd==pwd)
                {
                    returnStr = "TRUE";
                }
                else
                {
                    returnStr = "FALSE";
                }
            }
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }
        //Added by ZawZO on 19 Feb 2016
        [HttpPost]
        [Authorize]
        public ActionResult getPartnerMaximumAmount()
        {
            var returnStr = "0";
            int uid = Convert.ToInt32(Session["userid"]);
            Common_m_Partnership p = db.Partner.Where(x => x.mainuserid == uid || x.otheruser1 == uid || x.otheruser2 == uid).FirstOrDefault();
            if (p != null)
            {
                returnStr = p.maxinvoiceamount.ToString();
            }
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }
        //Added by ZawZO on 17 Feb 2016
        [HttpPost]
        [Authorize]
        public JsonResult MileageSave(Mileage_m_rewards objm, string resource = "MileageReward")
        {
            var returnStr = "FAIL";
            if (Session["userid"] != null)
            {
                try
                {
                    int uid = Convert.ToInt32(Session["userid"]);
                    int intcussupid = 0; double AwardBonus = 0; int intPID = 0;
                    double? pinvamt = 0; double? pAwardBonus = 0;
                    Common_m_Partnership p = db.Partner.Where(x => x.mainuserid == uid || x.otheruser1 == uid || x.otheruser2 == uid).FirstOrDefault();
                    if (p != null)
                    {
                        pinvamt = p.invoiceamount;
                        pAwardBonus = p.awardbonus;
                        AwardBonus = (pAwardBonus.Value / pinvamt.Value) * objm.amount.Value;
                        intPID = p.id;
                    }
                    else
                    {
                        AwardBonus = 0;
                    }

                    if (objm.id == 0)
                    {
                        var strnric = "";
                        strnric = cAESEncryption.getEncryptedString(objm.nric);
                        CusSup_m_CusSup mtmp = db.CusSup.Where(x => x.cussupname == objm.name && x.nric == strnric).FirstOrDefault();
                        if (mtmp != null)
                        {
                           intcussupid = mtmp.id;
                        }
                        else
                        {
                            CusSup_m_CusSup m = new CusSup_m_CusSup();
                            m.cocode = Session["cocode"].ToString();
                            m.branchcode = Session["branchcode"].ToString();
                            m.createdate = DateTime.Now;
                            m.cussupname = objm.name;
                            m.cussuptype = "Partnership Customer";
                            m.nric = cAESEncryption.getEncryptedString(objm.nric);
                            m.mobile = cAESEncryption.getEncryptedString(objm.mobile);
                            m.inhousecode = GeneralController.getGeneratedNewID("CusSup_m_CusSup", "inhousecode", "MEMPREFIX", "MEMNO");
                            m.status = "Active";
                            db.CusSup.Add(m);
                            db.SaveChanges();
                            intcussupid = m.id;
                            CusSup_m_Cards c = new CusSup_m_Cards();
                            int intcardno;
                            c.cussupid = intcussupid;
                            intcardno = generateMemberCardNo();
                            c.cardno = intcardno;
                            updateMemberNewCardNo(intcardno.ToString(), "MILEAGEREWARD");
                            c.cardtype = "Partnership Customer";
                            c.expirydate = DateTime.Now.AddYears(1);
                            c.printeddate = DateTime.Now;
                            c.printedbyid = Convert.ToInt32(Session["userid"].ToString());
                            c.status = "Print";
                            db.MemberCard.Add(c);
                            db.SaveChanges();
                        }
                        objm.cussupid = intcussupid;
                        objm.partnerid = intPID;
                        objm.rewardbonus = AwardBonus;
                        objm.issuedby = Session["userid"].ToString();
                        objm.createdate = DateTime.Now;
                        objm.lastmodifieddate = DateTime.Now;
                        objm.receiptdate = DateTime.Now;
                        objm.resourcecode = GeneralController.getGeneratedNewID("mileage_m_rewards", "resourcecode", "MRPREFIX", "MRWNO");
                        db.rewards.Add(objm);
                        db.SaveChanges();
                        var strBranchCode = "";
                        Configuration_m_Branches b = db.Branches.Where(x => x.branchcode == "MILEAGE REWARDS").FirstOrDefault();
                        if (b != null)
                        {
                            strBranchCode = b.branchcode;
                        }
                        var strPCode = ""; var strPDesc = ""; var strUOM=""; int intPId = 0;
                        Product_m_Product pr = db.products.Where(x => x.desc == "Mileage Rewards").FirstOrDefault();
                        if (pr != null)
                        {
                            strPCode = pr.productcode;
                            strPDesc = pr.desc;
                            intPId = pr.id;
                            strUOM = pr.uom;
                        }
                        //Save to Invoice_m_Invoice
                        Invoice_m_Invoice i = new Invoice_m_Invoice();
                        i.createdate = DateTime.Now;
                        i.lastmodifieddate = DateTime.Now;
                        i.resourcedate = DateTime.Now;
                        i.resourcecode = GeneralController.getGeneratedNewID("Invoice_m_Invoice", "resourcecode", "TPPREFIX", "INVTOPUP");
                        i.branchcode = strBranchCode;
                        i.cocode = Convert.ToString(Session["cocode"]);
                        i.createid = Convert.ToInt32(Session["userid"].ToString());
                        i.cussupid = objm.cussupid;
                        i.cussupname = objm.name;
                        i.currency = "SGD";
                        i.exchangerate = 1;
                        i.total_subtotal = 0;
                        i.total_salestax = 0;
                        i.total_discount = 0;
                        i.total_amountreceived = 0;
                        i.total_amountrefund = 0;
                        i.total_amountvoid = 0;
                        i.aracctid = "";
                        i.salestaxacctid = "";
                        i.discountacctid = "";
                        i.status = "CLOSE";
                        i.type = "TOPUP";
                        i.printcount = 1;
                        db.sales.Add(i);
                        db.SaveChanges();
                        int intinvoiceid = i.id;
                        //Save to Invoice_m_Invoice_Item
                        Invoice_m_Invoice_Items d = new Invoice_m_Invoice_Items();
                        d.createdate = DateTime.Now;
                        d.lastmodifieddate = DateTime.Now;
                        d.invoiceid = intinvoiceid;
                        d.resourcecode = i.resourcecode;
                        d.createid = i.createid;
                        d.lineno = 1;
                        d.productid = intPId;
                        d.productcode = strPCode;
                        d.productdesc = strPDesc;
                        d.uom = strUOM;
                        d.qty = 1;
                        d.currency = "SGD";
                        d.exchangerate = 1;
                        d.unitprice = 0;
                        d.discountamount = 0;
                        d.taxamount = 0;
                        d.lineamount = 0;
                        d.gstcode = "";
                        d.redeemdollars = 0;
                        d.redeembonus = 0;
                        d.awarddollars = 0;
                        d.awardbonus = AwardBonus;
                        d.servicecommission = 0;
                        db.saleItems.Add(d);
                        db.SaveChanges();
                        int intinvitmid = d.id;
                        //Save to cussup_m_redemption
                        CusSup_m_CusRedemption redempttmp = db.CusSupRedemption.Where(x => x.cussupid == intcussupid && x.redemptiontype == "C$").OrderByDescending(x => x.id).FirstOrDefault();
                        double? prebalance = 0;
                        if (redempttmp != null)
                        { prebalance = redempttmp.balance; }
                        CusSup_m_CusRedemption r = new CusSup_m_CusRedemption();
                        r.cocode = Session["cocode"].ToString();
                        r.branchcode = strBranchCode;
                        r.createdate = DateTime.Now;    
                        r.createid = Convert.ToInt32(Session["userid"].ToString());
                        r.RefNo = GeneralController.getGeneratedNewID("CusSup_m_CusRedemption", "RefNo", "TRNPREFIX", "TRNNO");
                        r.cussupid = intcussupid;
                        r.productid = intPId;
                        r.productdesc = strPDesc;
                        r.credit= AwardBonus;
                        r.debit = 0;
                        r.balance = prebalance + objm.rewardbonus;
                        r.resource = "TOPUP";
                        r.redemptiontype = "C$";
                        r.invoiceitemid = intinvitmid;
                        r.uom = strUOM;
                        db.CusSupRedemption.Add(r);
                        db.SaveChanges();
                        SMSWS.MsgSender objSMSGW = new SMSWS.MsgSender();
                        var strSMS = objm.mobile + "||" + "We would like to informed that you have " + objm.rewardbonus.ToString() +"C$ to claim.";
                        //Commented by ZawZO on 21 Feb 2016 to be temporary off durning testing.
                        //objSMSGW.SendMessage("Citibella", strSMS);
                    }
                    else
                    {
                        Mileage_m_rewards mtmp = db.rewards.Find(objm.id);
                        mtmp.lastmodifieddate = DateTime.Now;
                        mtmp.receiptno = objm.receiptno;
                        mtmp.amount= objm.amount;
                        mtmp.rewardbonus = objm.rewardbonus;
                        db.SaveChanges();
                    }
                    returnStr = "SUCCESS" + "," + objm.id.ToString() ;
                }
                catch (Exception e)
                { returnStr = e.Message.ToString(); }
            }
            else
            {
                Response.RedirectToRoute(new { controller = "Access", action = "Login" });
                returnStr = "SESSIONEXPIRED";
            }
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }
        public int generateMemberCardNo()
        {
            int returnvalue = 0;
            using (var context = new BigMacEntities())
            {
                MySqlConnection conn = new MySqlConnection(context.Database.Connection.ConnectionString.ToString());
                try
                {
                    MySqlCommand cmd = new MySqlCommand("getMemberNewCardNo", conn);
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    var Result = new MySqlParameter();
                    Result.ParameterName = "newNo";
                    Result.MySqlDbType = MySqlDbType.VarString;
                    Result.Direction = System.Data.ParameterDirection.Output;
                    cmd.Parameters.Add(Result);
                    cmd.Connection.Open();
                    cmd.ExecuteNonQuery();
                    returnvalue = Convert.ToInt32(Result.Value);
                }
                catch (Exception e)
                { }
                finally
                {
                    if (conn != null)
                    {
                        conn.Close();
                    }
                }
            }
            return returnvalue;
        }
        public JsonResult updateMemberNewCardNo(String cardno = "0", string rcode = "Member")
        {
            string returnvalue = "FAIL";
            try
            {
                //int cno = Convert.Toint(c);
                var ridtmp = db.Resources.Where(x => x.resource == rcode).FirstOrDefault().id;
                int rid = 0;
                if (ridtmp != null) rid = Convert.ToInt32(ridtmp);

                using (var context = new BigMacEntities())
                {
                    context.Database.ExecuteSqlCommand("call updateMemberNewCardNo('" + cardno + "')");
                    returnvalue = "Success";
                }
                int rescode = 0;
                bool isNum = Int32.TryParse(cardno, out rescode);
                saveToLog(rid, rescode, "Update", "Update card no to generate new card - " + cardno);
            }
            catch (Exception e) { }
            return Json(returnvalue, JsonRequestBehavior.AllowGet);
        }

        public JsonResult getPackageRedeemDetail(int mid)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    ICollection<Redempt_Package> pptmp = context.Database.SqlQuery<Redempt_Package>("call getCussupPackageItemList(" + mid + ")").ToList();

                    var fList = (from product in pptmp join package in db.products on product.packagecode equals package.productcode select new { id = package.id, packagecode = product.packagecode,packagedesc = product.packagedesc,productdesc = product.productdesc,productid = product.productid,credit = product.credit, debit = product.debit, uom = product.uom, balance = product.balance }).ToList();

                    return Json(fList.Where(x => x.balance > 0).ToList(), JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        public JsonResult getProductReddemDetail(int mid)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    ICollection<Redempt_Package> pptmp = context.Database.SqlQuery<Redempt_Package>("call getCussupProductItemList(" + mid + ")").ToList();

                   // var fList = (from product in pptmp join package in db.products on product.packagecode equals package.productcode select new { id = package.id, packagecode = product.packagecode, packagedesc = product.packagedesc, productdesc = product.productdesc, productid = product.productid, credit = product.credit, debit = product.debit, uom = product.uom, balance = product.balance }).ToList();

                    return Json(pptmp.Where(x => x.balance > 0).ToList(), JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        public JsonResult getSalesOrderFOCToRedeemDetail(int mid, int soid)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    ICollection<salesorder_m_detail> redeemFOCList = db.saleordersItems.Where(x => x.salesorderid == soid && x.foc == 1 && x.status != "REDEEM").ToList();

                    return Json(redeemFOCList, JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        public JsonResult getSalesOrderPackageToRedeemDetail(int mid,int soid)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    ICollection<Redempt_Package> pptmp = context.Database.SqlQuery<Redempt_Package>("call getCussupPackageItemList(" + mid + ")").ToList();

                    var outstandingPackageList = (from product in pptmp
                                                  join package in db.products on product.packagecode equals package.productcode
                                                     select new { id = package.id,
                                                                  packagecode = product.packagecode,
                                                                  packagedesc = product.packagedesc,
                                                                  productdesc = product.productdesc,
                                                                  productid = product.productid,
                                                                  credit = product.credit,
                                                                  debit = product.debit,
                                                                  uom = product.uom,
                                                                  balance = product.balance
                                                     }).Where(x => x.balance > 0).ToList();

                    ICollection<salesorder_m_detail> redeemSOList = db.saleordersItems.Where(x => x.salesorderid == soid && x.rdm == 1 && (x.status != "REDEEM" && x.status != "VOID") ).ToList();

                    var finalList = (from product in redeemSOList
                                     join package in outstandingPackageList on product.productid equals package.productid into prod
                                     from pack in prod.DefaultIfEmpty()
                                     select new
                                     {
                                         id = product.id,
                                         lineno = product.lineno,
                                         productid = product.productid,
                                         productcode = product.productcode,
                                         productdesc = product.productdesc,
                                         qty = product.qty,
                                         redeemedqty = product.redeemedqty,
                                         uom = product.uom,
                                         lineamount = product.lineamount,
                                         status = product.status,
                                         balance = (pack != null) ? pack.balance : 0,
                                         credit = pack.credit,
                                         debit = pack.debit,
                                         packagedesc = pack.packagedesc,
                                         packagecode = pack.packagecode,
                                        
                                     }).OrderBy(x => x.lineno).ToList();

                    return Json(finalList, JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        public JsonResult getSalesOrderPointsToRedeemDetail(int mid, int soid)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    ICollection<salesorder_m_detail> redeemSOList = db.saleordersItems.Where(x => x.salesorderid == soid && x.pts == 1 && (x.status != "REDEEM" && x.status != "VOID")).ToList();

                     var finalList = (from sales in redeemSOList
                                      join productprice in db.productprices
                                      //on sales.productid equals productprice.productid
                                      on new { sales.productid, sales.uom } equals new { productprice.productid, productprice.uom }
                                      select new
                                      {
                                          id = sales.id,
                                          qty = sales.qty,
                                          redeemedqty = sales.redeemedqty,
                                          productid = productprice.productid,
                                          productcode = sales.productcode,
                                          productdesc = sales.productdesc,
                                          uom = productprice.uom,
                                          redeemciti = productprice.redeemdollars ?? 0,
                                          redeemrwd = productprice.redeembonus ?? 0,
                                          awardciti = productprice.awarddollars ?? 0,
                                          awardrwd = productprice.awardbonus ?? 0,
                                          servicecommission = productprice.servicecommission ?? 0,
                                          sellprice = productprice.sellprice ?? 0

                                          
                                      }).OrderBy(x => x.id).ToList();

                     return Json(finalList, JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        public JsonResult getSalesOrderCustomerTreatment(int mid, int productid)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    var finalList = (from treatment in db.Treatments
                                     join staff in db.Staffs
                                     on treatment.staffid equals staff.id
                                     where (treatment.cussupid == mid && treatment.productid == productid)
                                     select new
                                     {
                                         id = treatment.id,
                                         date = treatment.createdate,
                                         description = treatment.description ?? "",
                                         staffname = staff.name,
                                         starttime = treatment.starttime ?? "",
                                         endtime = treatment.endtime ?? "",
                                         type = treatment.type,
                                         remarks2 = treatment.remarks2 ?? "",
                                         remarks3 = treatment.remarks3 ?? "",
                                         remarks4 = treatment.remarks4 ?? ""
                                     }).OrderByDescending(x => x.id).ToList();

                    return Json(finalList, JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        [HttpPost]
        [Authorize]
        public JsonResult RedeemSOPackageSavetoCussupRedemption(List<CusSup_m_CusRedemption> redeem, string resource = "SALES ORDER")
        {
            var returnStr = "FAIL";
            if (Session["userid"] != null)
            {
                try
                {
                    string curr = "";
                    double exrate = 0;
                    ICollection<Configuration_m_Default> config = db.ConfigDefault.Where(x => x.key == "CURR").ToList();

                    if (config.Count > 0)
                        curr = config.ElementAt(0).value;
                    else
                        curr = "";

                    config = db.ConfigDefault.Where(x => x.key == "EXCH").ToList();
                    if (config.Count > 0)
                        exrate = Convert.ToDouble(config.ElementAt(0).value);
                    else
                        exrate = 0;

                    var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                    int rid = 0;
                    int? sodetailsid = 0;
                    string refno = string.Empty;

                    if(redeem.Count > 0)
                        refno = redeem[0].RefNo; 

                    foreach (CusSup_m_CusRedemption rdm in redeem)
                    {
                        sodetailsid = rdm.invoiceitemid;

                        CusSup_m_CusRedemption redempt = db.CusSupRedemption.Where(x => x.cussupid == rdm.cussupid && x.productid == rdm.productid && x.redemptiontype == "PQ" && x.uom == rdm.uom && x.resource == "PACKAGEREDEEM" || x.resource == "CustomerTransfer").OrderByDescending(x => x.id).FirstOrDefault();
                        double? prebalance = 0;
                        if (redempt != null)
                        { prebalance = redempt.balance; }

                        rdm.createdate = DateTime.Now;
                        rdm.lastmodifieddate = DateTime.Now;
                        rdm.cocode = Convert.ToString(Session["cocode"]);
                        rdm.createid = Convert.ToInt32(Session["userid"]);
                        rdm.branchcode = Convert.ToString(Session["branchcode"]);
                        rdm.invoiceitemid = rdm.invoiceitemid;
                        rdm.balance = prebalance - rdm.debit;
                        db.CusSupRedemption.Add(rdm);
                        db.SaveChanges();
                        saveToLog(rid, rdm.id, "CREATE", "Add New Redeem Package for cust id - " + rdm.cussupid.ToString() + ", ID- " + rdm.id.ToString());
                     
                        //update status of salesorder
                        salesorder_m_detail sodetail = db.saleordersItems.FirstOrDefault(x => x.id == sodetailsid);
                        if (sodetail != null)
                        {
                            int usedqty = sodetail.redeemedqty;

                            sodetail.redeemedqty = usedqty + Convert.ToInt32(rdm.debit);
                            if (sodetail.redeemedqty == sodetail.qty)
                            {
                                string oldstatus = sodetail.status;
                                sodetail.status = "REDEEM";
                                db.SaveChanges();
                                saveToLog(rid, rdm.id, "Update", "Update Sales Order Details #" + sodetailsid + " status from " + oldstatus + " to REDEEM, redeemed qty from " + usedqty + " to " + sodetail.redeemedqty);
                            }
                            else
                            {
                                db.SaveChanges();
                                saveToLog(rid, rdm.id, "Update", "Update Sales Order Details #" + sodetailsid + " redeemed qty from " + usedqty + " to " + sodetail.redeemedqty);
                          
                            }
                         
                       }

                        Product_m_Product prodPackage = db.products.FirstOrDefault(x => x.productcode == rdm.packagecode);
                        string packageid = prodPackage.id.ToString();
                        ICollection<salesorder_m_detail> packageSubItems = db.saleordersItems.Where(x => x.resourcecode == refno && x.packagecode == packageid).ToList();
                        ICollection<salesorder_m_detail> packageSubItemsRedeem = db.saleordersItems.Where(x => x.resourcecode == refno && x.status == "REDEEM" && x.packagecode == packageid).ToList();

                        if (packageSubItems.Count > 0 || packageSubItemsRedeem.Count > 0)
                        {
                            if (packageSubItems.Count == packageSubItemsRedeem.Count)
                            {
                                //update package to redeem
                                salesorder_m_detail pkdetail = db.saleordersItems.FirstOrDefault(x => x.resourcecode == refno && x.productid == prodPackage.id);
                                if (pkdetail != null)
                                {
                                    string oldstatus = pkdetail.status;
                                    pkdetail.status = "REDEEM";
                                    db.SaveChanges();
                                    saveToLog(rid, rdm.id, "Update", "Update Sales Order Details #" + pkdetail.id + " status from " + oldstatus + " to REDEEM");
                                }
                            }
                        }
                    }

                    updateSalesOrderStatus(refno, resource);

                    returnStr = "SUCCESS";
                }
                catch (Exception e)
                { returnStr = e.Message.ToString(); }
            }
            else
            {
                Response.RedirectToRoute(new { controller = "Access", action = "Login" });
                returnStr = "SESSIONEXPIRED";
            }
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [Authorize]
        public JsonResult RedeemSOFOC(List<salesorder_m_detail> redeem, string resource = "SALES ORDER")
        {
            var returnStr = "FAIL";
            if (Session["userid"] != null)
            {
                try
                {
                    string curr = "";
                    double exrate = 0;
                    ICollection<Configuration_m_Default> config = db.ConfigDefault.Where(x => x.key == "CURR").ToList();

                    if (config.Count > 0)
                        curr = config.ElementAt(0).value;
                    else
                        curr = "";

                    config = db.ConfigDefault.Where(x => x.key == "EXCH").ToList();
                    if (config.Count > 0)
                        exrate = Convert.ToDouble(config.ElementAt(0).value);
                    else
                        exrate = 0;

                    var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                    int rid = 0;

                    string refno  = "";

                    if(redeem.Count > 0)
                      refno = redeem[0].resourcecode;
                    
                    foreach (salesorder_m_detail rdm in redeem)
                    {
                        
                        salesorder_m_detail sodetail = db.saleordersItems.FirstOrDefault(x => x.id == rdm.id);
                        if (sodetail != null)
                        {
                            int usedqty = sodetail.redeemedqty;

                            sodetail.redeemedqty = usedqty + Convert.ToInt32(rdm.qty);
                            if (sodetail.redeemedqty == sodetail.qty)
                            {
                                string oldstatus = sodetail.status;
                                sodetail.status = "REDEEM";
                                db.SaveChanges();
                                saveToLog(rid, rdm.id, "Update", "Update Sales Order Details #" + rdm.id + " status from " + oldstatus + " to REDEEM, redeemed qty from " + usedqty + " to " + sodetail.redeemedqty);
                            }
                            else
                            {
                                db.SaveChanges();
                                saveToLog(rid, rdm.id, "Update", "Update Sales Order Details #" + rdm.id + " redeemed qty from " + usedqty + " to " + sodetail.redeemedqty);
                          
                            }
                         
                       }

                    }

                    updateSalesOrderStatus(refno, resource);

                    returnStr = "SUCCESS";
                }
                catch (Exception e)
                { returnStr = e.Message.ToString(); }
            }
            else
            {
                Response.RedirectToRoute(new { controller = "Access", action = "Login" });
                returnStr = "SESSIONEXPIRED";
            }
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }

        [HttpPost]
        [Authorize]
        public JsonResult RedeemSOPointsSave(List<Invoice_m_Invoice> redeemList, string resource = "REDEEM")
        {
            var returnStr = "FAIL";
            int itemcount = 0;
            if (Session["userid"] != null)
            {
                try
                {
                    string curr = "";
                    double exrate = 0;
                    string soresourcecode = "";
                    ICollection<Configuration_m_Default> config = db.ConfigDefault.Where(x => x.key == "CURR").ToList();

                    if (config.Count > 0)
                        curr = config.ElementAt(0).value;
                    else
                        curr = "";

                    config = db.ConfigDefault.Where(x => x.key == "EXCH").ToList();
                    if (config.Count > 0)
                        exrate = Convert.ToDouble(config.ElementAt(0).value);
                    else
                        exrate = 0;

                    var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                    int rid = 0;
                    if (ridtmp != null) rid = Convert.ToInt32(ridtmp);

                    foreach (Invoice_m_Invoice redeem in redeemList)
                    {
                        if (redeem.id == 0)
                        {
                            redeem.createdate = DateTime.Now;
                            redeem.lastmodifieddate = DateTime.Now;
                            redeem.cocode = Convert.ToString(Session["cocode"]);
                            redeem.createid = Convert.ToInt32(Session["userid"]);
                            redeem.branchcode = Convert.ToString(Session["branchcode"]);
                            redeem.currency = curr;
                            redeem.exchangerate = exrate;
                            redeem.aracctid = "";
                            redeem.salestaxacctid = "";
                            redeem.discountacctid = "";
                            redeem.total_amountrefund = 0;
                            redeem.total_amountvoid = 0;
                            redeem.total_discount = 0;
                            redeem.total_salestax = 0;
                            redeem.total_discount = 0;
                            redeem.resourcecode = GeneralController.getGeneratedNewID("Invoice_m_Invoice", "resourcecode", "RDPREFIX", "INVREDEEM");
                            redeem.resourcedate = DateTime.Now;
                        
                            db.sales.Add(redeem);
                            db.SaveChanges();
                            if (redeem.items != null) itemcount = redeem.items.Count();
                            saveToLog(rid, redeem.id, "CREATE", "Add New Redeem for cust id - " + redeem.cussupid.ToString() + ", Refno-" + redeem.resourcecode.ToString() + ", Item Count -" + itemcount.ToString() + ", Total - " + redeem.total_total.ToString(), "Redeem Ref no- " + redeem.resourcecode + ", ID- " + redeem.id.ToString());

                            if (redeem.items != null)
                            {
                                for (int i = 0; i < (redeem.items.Count()); i++)
                                {
                                    var sodetailsid = redeem.items.ElementAt(i).id;

                                    SaveNewTopupDetailItem(redeem.items.ElementAt(i), redeem.id, redeem.cussupid, resource, redeem.resourcecode, rid, curr, exrate, redeem.status, false, redeem.cussupname);

                                    salesorder_m_detail sodetail = db.saleordersItems.FirstOrDefault(x => x.id == sodetailsid);
                                    if (sodetail != null)
                                    {
                                        soresourcecode = sodetail.resourcecode;

                                        int usedqty = sodetail.redeemedqty;

                                        sodetail.redeemedqty = usedqty + Convert.ToInt32(redeem.items.ElementAt(i).qty);

                                        if (sodetail.redeemedqty == sodetail.qty)
                                        {
                                            string oldstatus = sodetail.status;
                                            sodetail.status = "REDEEM";
                                            db.SaveChanges();
                                            saveToLog(rid, redeem.id, "Update", "Update Sales Order Details #" + sodetailsid + " status from " + oldstatus + " to REDEEM, redeemed qty from " + usedqty + " to " + sodetail.redeemedqty);
                                        }
                                        else
                                        {
                                            db.SaveChanges();
                                            saveToLog(rid, redeem.id, "Update", "Update Sales Order Details #" + sodetailsid + " redeemed qty from " + usedqty + " to " + sodetail.redeemedqty);

                                        }

                                        string productid = sodetail.productid.ToString();
                                        ICollection<salesorder_m_detail> packagedetails = db.saleordersItems.Where(x => x.packagecode == productid).ToList();

                                        if (packagedetails.Count > 0)
                                        {
                                            for (int y = 0; y < (packagedetails.Count()); y++)
                                            {
                                                var itemsDetailID = packagedetails.ElementAt(y).id;
                                                salesorder_m_detail itemsDetail = db.saleordersItems.FirstOrDefault(x => x.id == itemsDetailID);

                                                if (itemsDetail != null)
                                                {
                                                    string oldItemDetailStatus = itemsDetail.status;
                                                    itemsDetail.status = "REDEEM";
                                                    db.SaveChanges();
                                                    saveToLog(rid, redeem.id, "Update", "Update Sales Order Details #" + itemsDetailID + " status from " + oldItemDetailStatus + " to REDEEM");
                                                }

                                            }
                                        }

                                    }

                                }


                            }

                        }
                    }

                    updateSalesOrderStatus(soresourcecode, resource);

                    returnStr = "Success";
                }
                catch (Exception e)
                { returnStr = e.InnerException.ToString(); }
            }
            else
            {
                Response.RedirectToRoute(new { controller = "Access", action = "Login" });
                returnStr = "SESSIONEXPIRED";
            }
           
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }

        public JsonResult updateSalesOrderStatus(string resourcecode,string resource)
        {
            string returnStr = "FAIL";
            try
            {
                using (var context = new BigMacEntities())
                {
                    var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                    int rid = 0;
                    if (ridtmp != null) rid = Convert.ToInt32(ridtmp);
                    
                    string status = "COMPLETE";

                    ICollection<salesorder_m_detail> itemsDetail = db.saleordersItems.Where(x => x.resourcecode == resourcecode && (x.status == "QUEUE" || x.status == "START" || x.status == "END" || x.status == "PARTIAL")).ToList();

                    if (itemsDetail.Count == 0)
                    {
                        status = "ORDER COMPLETED";
                    }
                    else if (itemsDetail.Where(x => x.status == "QUEUE").ToList().Count > 0)
                    {
                        status = "QUEUE";
                    }
                    else if (itemsDetail.Where(x => x.status == "START").ToList().Count > 0)
                    {
                        status = "START";
                    }
                    else if (itemsDetail.Where(x => x.status == "END").ToList().Count > 0)
                    {
                        status = "SERVICE COMPLETED";
                    }
                    else
                    {
                        status = "QUEUE";

                    }

                    Salesorder_m_salesorder so = db.saleorders.FirstOrDefault(x => x.resourcecode == resourcecode);
                    if (so != null)
                    {
                        string oldstatus = so.status;
                        so.status = status;
                        db.SaveChanges();
                        saveToLog(rid, so.id, "Update", "Update Sales Order #" + so.id + " status from " + oldstatus + " to "+so.status);
                    }

                    Schedule_m_Appointment app = db.appointment.FirstOrDefault(x => x.sonumber == so.resourcecode);
                    if (app != null)
                    {
                        if (status == "ORDER COMPLETED")
                        {
                            app.status = "Done";
                            db.SaveChanges();
                        }
                    }


                    returnStr = "SUCCESS";
                }

            }
            catch (Exception e)
            { returnStr = e.Message.ToString(); }

            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }

        public JsonResult updateSalesOrderTime(string starttime, string endtime, string resourcecode, int soid)
        {
            string returnStr = "FAIL";
            try
            {
                using (var context = new BigMacEntities())
                {
                    var ridtmp = db.Resources.Where(x => x.resource == resourcecode).FirstOrDefault().id;
                    int rid = 0;
                    if (ridtmp != null) rid = Convert.ToInt32(ridtmp);

                 
                    Salesorder_m_salesorder so = db.saleorders.FirstOrDefault(x => x.id == soid);
                    if (so != null)
                    {
                        so.starttime = starttime;
                        so.endtime = endtime;
                        db.SaveChanges();  
                    }

                    returnStr = "SUCCESS";
                }

            }
            catch (Exception e)
            { returnStr = e.Message.ToString(); }

            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }
        public JsonResult updateSalesOrderItemStatus(string resource, int itemid, string status)
        {
            string returnStr = "FAIL";
            string time = "";
            try
            {
                using (var context = new BigMacEntities())
                {
                    var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                    int rid = 0;
                    if (ridtmp != null) rid = Convert.ToInt32(ridtmp);

                    string resourcecode = "";
                    salesorder_m_detail so = db.saleordersItems.FirstOrDefault(x => x.id == itemid);
                    if (so != null)
                    {
                        resourcecode = so.resourcecode;
                        string oldstatus = so.status;
                        string oldstarttime = so.starttime;
                        string oldendtime = so.endtime;
                        so.status = status;

                        if (status == "START")
                        {
                            so.starttime = DateTime.Now.ToString("hh:mm tt");
                            time = so.starttime;
                            saveToLog(rid, so.id, "Update", "Update Sales Order #" + so.id + " status from " + oldstatus + " to " + so.status +", starttime from "+ oldstarttime +" to "+so.starttime);
                        }
                        else if(status == "END") {
                            so.endtime = DateTime.Now.ToString("hh:mm tt");
                            time = so.endtime;
                            saveToLog(rid, so.id, "Update", "Update Sales Order #" + so.id + " status from " + oldstatus + " to " + so.status + ", endtime from " + oldendtime + " to " + so.endtime);
                
                        }

                        db.SaveChanges();
                    }
                    updateSalesOrderStatus(resourcecode, resource);
                    returnStr = "SUCCESS,"+time;
                }

            }
            catch (Exception e)
            { returnStr = e.Message.ToString(); }

            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }

        public JsonResult updateSalesOrderTotal(string resourcecode, string resource)
        {
            string returnStr = "FAIL";
            try
            {
                using (var context = new BigMacEntities())
                {
                    var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                    int rid = 0;
                    if (ridtmp != null) rid = Convert.ToInt32(ridtmp);

                    string status = "COMPLETE";

                    salesorder_m_detail itemsDetail = db.saleordersItems.FirstOrDefault(x => x.resourcecode == resourcecode && x.status == "QUEUE");

                    if (itemsDetail != null)
                        status = "QUEUE";

                    Salesorder_m_salesorder so = db.saleorders.FirstOrDefault(x => x.resourcecode == resourcecode);
                    if (so != null)
                    {
                        string oldstatus = so.status;
                        so.status = status;
                        db.SaveChanges();
                        saveToLog(rid, so.id, "Update", "Update Sales Order #" + so.id + " status from " + oldstatus + " to " + so.status);
                    }

                    returnStr = "SUCCESS";
                }

            }
            catch (Exception e)
            { returnStr = e.Message.ToString(); }

            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }

        public JsonResult updateSalesOrderItemStaff(string resource, int itemid, int staffid, int branchassetid, string startTime, string endTime)
        {
            string returnStr = "FAIL";
            try
            {
                using (var context = new BigMacEntities())
                {
                    var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                    int rid = 0;
                    if (ridtmp != null) rid = Convert.ToInt32(ridtmp);

                    
                    salesorder_m_detail itemDetail = db.saleordersItems.FirstOrDefault(x => x.id == itemid);

                    if (itemDetail != null)
                    {
                        int oldStaffId = itemDetail.staffid;
                        int oldBranchAssetId = itemDetail.branchassetid;
                        string oldStartTime = itemDetail.starttime;
                        string oldEndTime = itemDetail.endtime;

                        if (oldBranchAssetId != branchassetid)
                        {
                            itemDetail.branchassetid = branchassetid;
                            saveToLog(rid, itemDetail.id, "Update", "Update Sales Order #" + itemDetail.id + " branch asset id from " + oldBranchAssetId + " to " + branchassetid);
              
                        }

                        if (oldStaffId != staffid)
                        {
                            itemDetail.staffid = staffid;
                            saveToLog(rid, itemDetail.id, "Update", "Update Sales Order #" + itemDetail.id + " staff id from " + oldStaffId + " to " + staffid);
              
                        }

                        if (oldStartTime != startTime)
                        {
                            itemDetail.starttime = startTime;
                            saveToLog(rid, itemDetail.id, "Update", "Update Sales Order #" + itemDetail.id + " start time from " + oldStartTime + " to " + startTime);

                        }

                        if (oldEndTime != endTime)
                        {
                            itemDetail.endtime = endTime;
                            saveToLog(rid, itemDetail.id, "Update", "Update Sales Order #" + itemDetail.id + " staff id from " + oldEndTime + " to " + endTime);

                        }

                        db.SaveChanges();
                   }

                    returnStr = "SUCCESS";
                }

            }
            catch (Exception e)
            { returnStr = e.Message.ToString(); }

            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }


        [Authorize]
        public void SaveNewTopupDetailItem(Invoice_m_Invoice_Items topupDtl, int tid, int memberid, string resource, string resourcecode, int rid = 0, string curr = "SGD", double exrate = 0, string status = "Close", Boolean pkgFlag = false, string membername = "")
        {
            topupDtl.currency = curr;
            topupDtl.exchangerate = exrate;
            topupDtl.createdate = DateTime.Now;
            topupDtl.lastmodifieddate = DateTime.Now;
            topupDtl.resourcecode = resourcecode;
            topupDtl.createid = Convert.ToInt32(Session["userid"]);
            topupDtl.discountamount = 0;
            topupDtl.discountpercent = 0;
            topupDtl.taxamount = 0;
            topupDtl.lineamount = topupDtl.qty * topupDtl.unitprice;
            topupDtl.gstcode = "";
            topupDtl.invoiceid = tid;
            topupDtl.staffserviceid = topupDtl.staffserviceid;
            db.saleItems.Add(topupDtl);
            db.SaveChanges();
            saveToLog(rid, topupDtl.id, "CREATE", "Add New Detail Item - product ID -" + topupDtl.productid, "RefNo no- " + resourcecode + ", Item ID- " + topupDtl.id.ToString());

            //if (topupDtl.treatment != null)
            //    SaveTreatment(topupDtl, memberid, membername, rid);

       
            //if (pkgFlag)
            //   // AddPackageToRedemptionTable(topupDtl.id, topupDtl.productid, topupDtl.productdesc, topupDtl.uom, memberid, resource, resourcecode, rid, topupDtl.qty);
            //else
            AddToRedemptionTableForOrderTaking(topupDtl, memberid, resource, resourcecode, rid);

        }

        public void SaveTreatment(Invoice_m_Invoice_Items item, int cussupid, string cussupname, int rid)
        {
            try
            {
                ICollection<cussup_m_treatment_Ops> tlist = item.treatment.ToList();
            
                for (int i = 0; i < tlist.Count; i++)
                {
                    if (tlist.ElementAt(i).statusfield.Trim() == "NEW")
                    {
                        cussup_m_treatment t = new cussup_m_treatment();
                        t.createby = Convert.ToInt32(Session["userid"]);
                        t.staffid = tlist.ElementAt(i).staffid;
                        t.createdate = DateTime.Now;
                        t.lastmodifieddate = DateTime.Now;
                        t.cussupid = cussupid;
                        t.cussupname = cussupname;
                        t.description = tlist.ElementAt(i).description;
                        t.productcode = item.productcode;
                        t.productdesc = item.productdesc;
                        t.productid = item.productid;
                        t.resourcecode = item.resourcecode;
                        t.resourcedate = item.createdate;
                        t.resourcedetailid = item.id;
                        db.Treatments.Add(t);
                        db.SaveChanges();
                        saveToLog(rid, t.id, "CREATE", "Add New Treatment - Member -" + cussupname, "RefNo no- " + item.resourcecode + ", Item ID- " + item.id.ToString());
                    }
                    else if (tlist.ElementAt(i).statusfield.Trim() == "UPDATE")
                    {
                        int tid = tlist.ElementAt(i).id;
                        cussup_m_treatment t = db.Treatments.Find(tid);
                        string from = ""; string to = "";
                        if (t != null)
                        {
                            from = "product code:" + t.productcode + ", Proudct desc :" + t.productdesc + ", desc:" + t.description;
                            to = "product code:" + item.productcode + ", Proudct desc :" + item.productdesc + ", desc:" + tlist.ElementAt(i).description;
                            t.cussupid = cussupid;
                            t.lastmodifieddate = DateTime.Now;
                            t.cussupname = cussupname;
                            t.description = tlist.ElementAt(i).description;
                            t.productcode = item.productcode;
                            t.productdesc = item.productdesc;
                            t.productid = item.productid;
                            db.SaveChanges();
                            saveToLog(rid, t.id, "UPDATE", "Update Detail Item ID-" + t.id.ToString() + " RefNo -" + item.resourcecode, from, to);
                        }
                    }
                }
            }
            catch (Exception e)
            { }
        }

        public void AddNewTreatment(cussup_m_treatment item)
        {
            try
            {
                    cussup_m_treatment t = new cussup_m_treatment();
                    t.createby = Convert.ToInt32(Session["userid"]);
                    t.staffid = item.staffid;
                    t.createdate = DateTime.Now;
                    t.lastmodifieddate = DateTime.Now;
                    t.resourcedate = DateTime.Now;
                    t.cussupid = item.cussupid;
                    t.cussupname = item.cussupname;
                    t.description = item.description ?? "";
                    t.productcode = item.productcode;
                    t.productdesc = item.productdesc;
                    t.productid = item.productid;
                    t.resourcecode = item.resourcecode;
                    t.resourcedate = item.createdate;
                    t.resourcedetailid = item.resourcedetailid;
                    t.starttime = item.starttime;
                    t.endtime = item.endtime;
                    t.type = item.type;
                    t.remarks2 = item.remarks2 ?? "";
                    t.remarks3 = item.remarks3 ?? "";
                    t.remarks4 = item.remarks4 ?? "";
                    db.Treatments.Add(t);
                    db.SaveChanges();
        }
            catch (Exception e)
            { }
        }

        public void UpdateTreatment(cussup_m_treatment item)
        {
            try
            {
                cussup_m_treatment t = db.Treatments.FirstOrDefault(x => x.id == item.id);
                if (t != null)
                {
                    t.lastmodifieddate = DateTime.Now;
                    t.type = item.type;
                    t.description = item.description ?? "";
                    t.remarks2 = item.remarks2 ?? "";
                    t.remarks3 = item.remarks3 ?? "";
                    t.remarks4 = item.remarks4 ?? "";
                    t.starttime = item.starttime;
                    t.endtime = item.endtime;
                    t.staffid = item.staffid;
                    db.SaveChanges();
                }
               
            }
            catch (Exception e)
            { }
        }
        public void SaveSOTreatment(salesorder_m_detail item, int cussupid, string cussupname, int rid)
        {
            try
            {
                ICollection<cussup_m_treatment_Ops> tlist = item.treatment.ToList();

                for (int i = 0; i < tlist.Count; i++)
                {
                    if (tlist.ElementAt(i).statusfield.Trim() == "NEW")
                    {
                        cussup_m_treatment t = new cussup_m_treatment();
                        t.createby = Convert.ToInt32(Session["userid"]);
                        t.staffid = tlist.ElementAt(i).staffid;
                        t.createdate = DateTime.Now;
                        t.lastmodifieddate = DateTime.Now;
                        t.cussupid = cussupid;
                        t.cussupname = cussupname;
                        t.description = tlist.ElementAt(i).description;
                        t.productcode = item.productcode;
                        t.productdesc = item.productdesc;
                        t.productid = item.productid;
                        t.resourcecode = item.resourcecode;
                        t.resourcedate = item.createdate;
                        t.resourcedetailid = item.id;
                        db.Treatments.Add(t);
                        db.SaveChanges();
                        saveToLog(rid, t.id, "CREATE", "Add New Treatment - Member -" + cussupname, "RefNo no- " + item.resourcecode + ", Item ID- " + item.id.ToString());
                    }
                    else if (tlist.ElementAt(i).statusfield.Trim() == "UPDATE")
                    {
                        int tid = tlist.ElementAt(i).id;
                        cussup_m_treatment t = db.Treatments.Find(tid);
                        string from = ""; string to = "";
                        if (t != null)
                        {
                            from = "product code:" + t.productcode + ", Proudct desc :" + t.productdesc + ", desc:" + t.description;
                            to = "product code:" + item.productcode + ", Proudct desc :" + item.productdesc + ", desc:" + tlist.ElementAt(i).description;
                            t.cussupid = cussupid;
                            t.lastmodifieddate = DateTime.Now;
                            t.cussupname = cussupname;
                            t.description = tlist.ElementAt(i).description;
                            t.productcode = item.productcode;
                            t.productdesc = item.productdesc;
                            t.productid = item.productid;
                            db.SaveChanges();
                            saveToLog(rid, t.id, "UPDATE", "Update Detail Item ID-" + t.id.ToString() + " RefNo -" + item.resourcecode, from, to);
                        }
                    }
                }
            }
            catch (Exception e)
            { }
        }

        public JsonResult UpdateSOTreatment(salesorder_m_detail item, string resource, int cussupid, string cussupname)
        {
            var returnStr = "0";
            try
            {
                var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                int rid = 0;
                if (ridtmp != null) rid = Convert.ToInt32(ridtmp);
                int treatmentid = 0;
                ICollection<cussup_m_treatment_Ops> tlist = item.treatment.ToList();

                for (int i = 0; i < tlist.Count; i++)
                {
                    if (tlist.ElementAt(i).statusfield.Trim() == "NEW")
                    {
                        cussup_m_treatment t = new cussup_m_treatment();
                        t.createby = Convert.ToInt32(Session["userid"]);
                        t.staffid = tlist.ElementAt(i).staffid;
                        t.createdate = DateTime.Now;
                        t.lastmodifieddate = DateTime.Now;
                        t.cussupid = cussupid;
                        t.cussupname = cussupname;
                        t.description = tlist.ElementAt(i).description;
                        t.productcode = item.productcode;
                        t.productdesc = item.productdesc;
                        t.productid = item.productid;
                        t.resourcecode = item.resourcecode;
                        t.resourcedate = DateTime.Now;
                        t.resourcedetailid = item.id;
                        db.Treatments.Add(t);
                        db.SaveChanges();
                        treatmentid = t.id;
                        saveToLog(rid, t.id, "CREATE", "Add New Treatment - Member -" + cussupname, "RefNo no- " + item.resourcecode + ", Item ID- " + item.id.ToString());
                    }
                   
                }

                returnStr =  treatmentid.ToString();
            }
            catch (Exception e)
            { returnStr = "0"; }

            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        [Authorize]
        public JsonResult updateSalesOrderOptions(List<salesorder_m_detail> sodetails)
        {
            var returnStr = "FAIL";

            if (Session["userid"] != null)
            {
                try
                {
                    foreach (salesorder_m_detail so in sodetails)
                    {
                        salesorder_m_detail sodetail = db.saleordersItems.FirstOrDefault(x => x.id == so.id);
                        if (sodetail != null)
                        {
                            sodetail.foc = so.foc;
                            sodetail.rdm = so.rdm;
                            sodetail.rwd = so.rwd;
                            sodetail.pos = so.pos;
                            sodetail.pts = so.pts;
                            sodetail.citi = so.citi;
                            db.SaveChanges();
                        }
                    }

                    returnStr = "SUCCESS";
                }
                catch (Exception e)
                { returnStr = e.Message.ToString(); }
            }
            else
            {
                Response.RedirectToRoute(new { controller = "Access", action = "Login" });
                returnStr = "SESSIONEXPIRED";
            }
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        [Authorize]
        public JsonResult updateSalesOrderDetails(List<salesorder_m_detail> sodetails, string resource, int salesorderid,string cussupname)
        {
            var returnStr = "FAIL";

            if (Session["userid"] != null)
            {
                try
                {
                    if (salesorderid > 0 && sodetails == null)
                    {
                        using (var context = new BigMacEntities())
                        {
                            var value = context.Database.ExecuteSqlCommand("Delete from salesorder_m_detail where salesorderid=" + salesorderid + "");
                        }
                    }
                    else
                    {
                        List<salesorder_m_detail> existingSoDetails = db.saleordersItems.Where(x => x.salesorderid == salesorderid).ToList();

                        foreach (salesorder_m_detail detail in existingSoDetails)
                        {
                            salesorder_m_detail availabelSoDetail = sodetails.FirstOrDefault(x => x.id == detail.id);
                            if(availabelSoDetail == null) {
                                using (var context = new BigMacEntities())
                                {
                                    var value = context.Database.ExecuteSqlCommand("Delete from salesorder_m_detail where id=" + detail.id + "");
                                }
                            }
                           
                        
                        }

                        foreach (salesorder_m_detail detail in sodetails)
                        {
                            salesorder_m_detail availableSoDetail = db.saleordersItems.FirstOrDefault(x => x.id == detail.id);
                            if (availableSoDetail != null)
                            {
                                availableSoDetail.ispackageselected = detail.ispackageselected;
                                availableSoDetail.qty = detail.qty;
                                db.SaveChanges();
                            }

                        }


                        sodetails = sodetails.Where(x => x.status == null).ToList();

                        var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                        int rid = 0;
                        if (ridtmp != null) rid = Convert.ToInt32(ridtmp);
                        string resourcecode = "";

                        
                       
                        for (int i = 0; i < (sodetails.Count()); i++)
                        {
                            resourcecode = sodetails.ElementAt(i).resourcecode;
                            Salesorder_m_salesorder so = db.saleorders.FirstOrDefault(x => x.resourcecode == resourcecode);
                            sodetails.ElementAt(i).status = "QUEUE";
                            if (sodetails.ElementAt(i).id == 0){                            
                                SaveNewSODetail(sodetails.ElementAt(i), sodetails.ElementAt(i).salesorderid, 0, resource, sodetails.ElementAt(i).resourcecode, rid, sodetails.ElementAt(i).status, sodetails.ElementAt(i).createid, 0, cussupname, so.starttime, so.endtime);
                            }
                            else{
                                UpdateExistingSalesOrderDetail(sodetails.ElementAt(i), 0, resource, sodetails.ElementAt(i).resourcecode, rid, cussupname);
                            }
                        }

                        //Update line no
                        List<salesorder_m_detail> allsodetails = db.saleordersItems.Where(x => x.salesorderid == salesorderid).OrderBy(x=>x.lineno).ToList();

                        if (allsodetails.Count > 0)
                        {
                            int i = 1;
                            int packageLineNo = 0;
                            foreach (salesorder_m_detail item in allsodetails)
                            {
                                Product_m_Product p = db.products.FirstOrDefault(x=>x.id == item.productid);
                                
                                if(p.category == "Package"){
                                  packageLineNo = i;
                                }

                                if(item.packagecode != null && item.packagecode != ""){
                                   item.packagelineno = packageLineNo.ToString();
                                }

                                item.lineno = i;
                                item.ispackageselected = item.ispackageselected;
                                db.SaveChanges();
                                i++;
                            }
                        }

                        updateSalesOrderStatus(resourcecode, resource);

                       
                    }

                    returnStr = "SUCCESS";
                }
                catch (Exception e)
                { returnStr = e.Message.ToString(); }
            }
            else
            {
                Response.RedirectToRoute(new { controller = "Access", action = "Login" });
                returnStr = "SESSIONEXPIRED";
            }
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]
        [Authorize]
        public JsonResult updateSalesOrderStaffAndAsset(string resource, int salesorderid, string staffid, string branchassetid)
        {
            var returnStr = "FAIL";

            if (Session["userid"] != null)
            {
                try
                {
                    Salesorder_m_salesorder so = db.saleorders.FirstOrDefault(x => x.id == salesorderid);
                    so.staffid = staffid;
                    db.SaveChanges();

                    int assetid = Convert.ToInt32(branchassetid);
                    if (so.branchassetid != assetid)
                    {
                      string returnValue = isValidOrderTaking(assetid, so.starttime, so.endtime);
                      if (returnValue == "TRUE")
                      {
                          so.branchassetid = assetid;
                          db.SaveChanges();
                          returnStr = "SUCCESS";
                      }
                      else
                      {
                          returnStr = "UNAVAILABLE";
                      }

                    }

                }
                catch (Exception e)
                { returnStr = e.Message.ToString(); }
            }
            else
            {
                Response.RedirectToRoute(new { controller = "Access", action = "Login" });
                returnStr = "SESSIONEXPIRED";
            }
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }


        [HttpPost]
        [Authorize]
        public JsonResult RedeemSave(Invoice_m_Invoice redeem, string resource = "Redeem", string itemids = "", string deltIDs = "")
        {
            var returnStr = "FAIL";
            int itemcount = 0;
            if (Session["userid"] != null)
            {
                try
                {
                    string curr = "";
                    double exrate = 0;
                    ICollection<Configuration_m_Default> config = db.ConfigDefault.Where(x => x.key == "CURR").ToList();

                    if (config.Count > 0)
                        curr = config.ElementAt(0).value;
                    else
                        curr = "";

                    config = db.ConfigDefault.Where(x => x.key == "EXCH").ToList();
                    if (config.Count > 0)
                        exrate = Convert.ToDouble(config.ElementAt(0).value);
                    else
                        exrate = 0;

                    var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                    int rid = 0;
                    if (ridtmp != null) rid = Convert.ToInt32(ridtmp);

                    if (redeem.id == 0)
                    {
                        redeem.createdate = DateTime.Now;
                        redeem.lastmodifieddate = DateTime.Now;
                        redeem.cocode = Convert.ToString(Session["cocode"]);
                        redeem.createid = Convert.ToInt32(Session["userid"]);
                        redeem.branchcode = Convert.ToString(Session["branchcode"]);
                        redeem.currency = curr;
                        redeem.exchangerate = exrate;
                        redeem.aracctid = ""; 
                        redeem.salestaxacctid = ""; 
                        redeem.discountacctid = ""; 
                        redeem.total_amountrefund = 0;
                        redeem.total_amountvoid = 0;
                        redeem.total_discount = 0;
                        redeem.total_salestax = 0;
                        redeem.total_discount = 0;
                        redeem.resourcecode = GeneralController.getGeneratedNewID("Invoice_m_Invoice", "resourcecode", "RDPREFIX", "INVREDEEM");
                        redeem.resourcedate = DateTime.Now;

                        db.sales.Add(redeem);
                        db.SaveChanges();
                        if (redeem.items != null) itemcount = redeem.items.Count();
                        saveToLog(rid, redeem.id, "CREATE", "Add New Redeem for cust id - " + redeem.cussupid.ToString() + ", Refno-" + redeem.resourcecode.ToString() + ", Item Count -" + itemcount.ToString() + ", Total - " + redeem.total_total.ToString(), "Redeem Ref no- " + redeem.resourcecode + ", ID- " + redeem.id.ToString());

                        //if (redeem.items != null)
                        //{
                        //    for (int i = 0; i < (redeem.items.Count()); i++)
                        //    {
                        //        SaveNewTopupDetailItem(redeem.items.ElementAt(i), redeem.id, redeem.cussupid, resource, redeem.resourcecode, rid, curr, exrate, redeem.status, false, redeem.cussupname);
                        //    }
                        //}
                 
                        if (redeem.status == "CLOSE")
                        {
                            if (redeem.salesorderid > 0)
                            {
                                Salesorder_m_salesorder so = db.saleorders.Where(x => x.id == redeem.salesorderid).FirstOrDefault();
                                so.status = "REDEEM";
                                db.SaveChanges();
                            }
                        }
                    }
            
                    returnStr = redeem.id.ToString();
                }
                catch (Exception e)
                { returnStr = e.Message.ToString(); }
            }
            else
            {
                Response.RedirectToRoute(new { controller = "Access", action = "Login" });
                returnStr = "SESSIONEXPIRED";
            }
            //return Content(returnStr);
            return Json(returnStr, JsonRequestBehavior.AllowGet);
        }

        public JsonResult getSOTreatmentList(string resourcecode = "")
        {
            try
            {
                var tList = db.Treatments.Where(x => x.resourcecode == resourcecode).Join(db.Staffs, t => t.staffid, staff => staff.id, (t, staff) => new { Treatments = t, Staffs = staff }).Select(x => new { x.Treatments.id,
                    x.Treatments.createdate,
                    x.Treatments.createby,
                    createbyname = x.Staffs.name,
                    x.Treatments.resourcedetailid,
                    x.Treatments.description,
                    keyid = "0",
                    statusfield = "E" }).ToList();
                return Json(tList, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        public JsonResult RemoveTreatmentItem(int treatmentid = 0)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    var value = context.Database.ExecuteSqlCommand("Delete from cussup_m_treatment where id=" + treatmentid);
                }
                return Json("Success", JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        [HttpPost]
        [Authorize]
        public JsonResult VoidItem(int soitemid = 0, string resource = "Void", string category = "Package",string uname = "", string pwd = "")
        {
            try
            {
                if (chkUserAccessRightForPOSVoid(uname.ToUpper(), pwd) == true)
                {
                    var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                    int rid = 0;
                    if (ridtmp != null) rid = Convert.ToInt32(ridtmp);

                    salesorder_m_detail item = db.saleordersItems.FirstOrDefault(x => x.id == soitemid);
                    if (item != null)
                    {
                        string oldstatus = item.status;
                        item.status = "VOID";
                        db.SaveChanges();
                        saveToLog(rid, item.id, "Update", "Update Sales Order Details #" + item.id + " status from " + oldstatus + " to VOID");

                        //pkg redemption
                        ICollection<CusSup_m_CusRedemption> redemp = db.CusSupRedemption.Where(x => x.invoiceitemid == soitemid && x.RefNo == item.resourcecode && x.resource == "PACKAGEREDEEM").ToList();

                        if (redemp.Count > 0)
                        {
                            foreach (CusSup_m_CusRedemption ir in redemp)
                            {
                                ir.resource = ir.resource + "VOID";
                                ir.productid = 0;
                                ir.productdesc = "VOID Sales Order Item #" + soitemid + " " + ir.productdesc;
                                db.SaveChanges();
                            }
                        }


                        //pts redemption
                        ICollection<Invoice_m_Invoice> ptsInvoiceList = db.sales.Where(x => x.salesorderdetailid == soitemid).ToList();
                        if (ptsInvoiceList.Count > 0)
                        {
                            foreach (Invoice_m_Invoice inv in ptsInvoiceList)
                            {
                                double? ctotal = 0;
                                double? btotal = 0;
                                double? rc = 0; double? ac = 0; double? rb = 0; double? ab = 0;

                                rc = db.saleItems.Where(x => x.invoiceid == inv.id).Sum(x => (x.redeemdollars * x.qty));
                                ac = db.saleItems.Where(x => x.invoiceid == inv.id).Sum(x => (x.awarddollars * x.qty));
                                ctotal = ac - rc;
                                rb = db.saleItems.Where(x => x.invoiceid == inv.id).Sum(x => (x.redeembonus * x.qty));
                                ab = db.saleItems.Where(x => x.invoiceid == inv.id).Sum(x => (x.awardbonus * x.qty));
                                btotal = ab - rb;
                                addToRedemptionTableForSOVoidItem(inv, ctotal, "C$", "REDEEM");
                                addToRedemptionTableForSOVoidItem(inv, btotal, "B$", "REDEEM");
                                inv.status = "VOID";
                                db.SaveChanges();
                            }
                        }

                        //pos voiding
                        Salesorder_m_salesorder sodetail = db.saleorders.FirstOrDefault(x => x.id == item.salesorderid);
                        if (sodetail != null)
                        {
                            if (sodetail.invoiceid != null)
                            {
                                Salesorder_m_salesorder soOfOT = db.saleorders.FirstOrDefault(x => x.id == sodetail.invoiceid);
                                salesorder_m_detail itemdetails = db.saleordersItems.FirstOrDefault(x => x.salesorderid == soOfOT.id && x.detailid == item.id);
                                if (itemdetails != null)
                                {
                                    itemdetails.status = "VOID";
                                    db.SaveChanges();

                                    var amountToBeDeducted = (itemdetails.unitprice * itemdetails.qty) - itemdetails.discountamount;
                                    soOfOT.total_total = soOfOT.total_total - amountToBeDeducted;
                                    soOfOT.total_subtotal = soOfOT.total_subtotal - amountToBeDeducted;
                                    db.SaveChanges();
                                }
                            }

                        }

                        if (category == "Package")
                        {
                            string pkgid = item.productid.ToString();
                            ICollection<salesorder_m_detail> pkgdetails = db.saleordersItems.Where(x => x.salesorderid == item.salesorderid && x.packagecode == pkgid).ToList();

                            foreach (salesorder_m_detail soitemdetails in pkgdetails)
                            {
                                string oldItemDetailStatus = soitemdetails.status;
                                soitemdetails.status = "VOID";
                                db.SaveChanges();
                                saveToLog(rid, soitemdetails.id, "Update", "Update Sales Order Details #" + soitemdetails.id + " status from " + oldItemDetailStatus + " to VOID");

                                ICollection<CusSup_m_CusRedemption> redempItem = db.CusSupRedemption.Where(x => x.invoiceitemid == soitemdetails.id && x.RefNo == soitemdetails.resourcecode).ToList();

                                if (redempItem.Count > 0)
                                {
                                    foreach (CusSup_m_CusRedemption irItem in redempItem)
                                    {
                                        irItem.resource = irItem.resource + "VOID";
                                        irItem.productid = 0;
                                        irItem.productdesc = "VOID Sales Order Item #" + soitemdetails.id + " " + irItem.productdesc;
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }
                    }

                    return Json("Success", JsonRequestBehavior.AllowGet);
                }
                else
                   return Json("Wrong username and password or user doesn't have access to void.", JsonRequestBehavior.AllowGet);

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }


        [HttpPost]
        [Authorize]
        public JsonResult VoidSO(int soid = 0, string resource = "Void", string uname = "", string pwd = "")
        {
            bool isPaymentRefund = false;
            try
            {
                if (chkUserAccessRightForPOSVoid(uname.ToUpper(), pwd) == true)
                {
                    var ridtmp = db.Resources.Where(x => x.resource == resource).FirstOrDefault().id;
                    int rid = 0;
                    if (ridtmp != null) rid = Convert.ToInt32(ridtmp);

                    Salesorder_m_salesorder ot = db.saleorders.FirstOrDefault(x => x.id == soid);

                    string oldSOstatus = ot.status;
                    ot.status = "CANCEL";
                    db.SaveChanges();
                    saveToLog(rid, ot.id, "Update", "Update Sales Order #" + ot.id + " status from " + oldSOstatus + " to CANCEL");

                    ICollection<salesorder_m_detail> listOfItems = db.saleordersItems.Where(x => x.salesorderid == soid && x.packagecode == null).ToList();

                foreach (salesorder_m_detail soitemdetail in listOfItems)
                {
                    salesorder_m_detail item = db.saleordersItems.FirstOrDefault(x => x.id == soitemdetail.id);
                 
                    if (item != null)
                    {
                        string category = db.products.FirstOrDefault(x => x.id == item.productid).category;

                
                        //pkg redemption
                        ICollection<CusSup_m_CusRedemption> redemp = db.CusSupRedemption.Where(x => x.invoiceitemid == soitemdetail.id && x.RefNo == item.resourcecode && x.resource == "PACKAGEREDEEM").ToList();

                        if (redemp.Count > 0)
                        {
                            foreach (CusSup_m_CusRedemption ir in redemp)
                            {
                                ir.resource = ir.resource + "VOID";
                                ir.productid = 0;
                                ir.productdesc = "VOID Sales Order Item #" + soitemdetail.id + " " + ir.productdesc;
                                db.SaveChanges();
                            }
                        }


                        //pts redemption
                        ICollection<Invoice_m_Invoice> ptsInvoiceList = db.sales.Where(x => x.salesorderdetailid == soitemdetail.id && x.status != "VOID").ToList();
                        if (ptsInvoiceList.Count > 0)
                        {
                            foreach (Invoice_m_Invoice inv in ptsInvoiceList)
                            {
                                double? ctotal = 0;
                                double? btotal = 0;
                                double? rc = 0; double? ac = 0; double? rb = 0; double? ab = 0;

                                rc = db.saleItems.Where(x => x.invoiceid == inv.id).Sum(x => (x.redeemdollars * x.qty));
                                ac = db.saleItems.Where(x => x.invoiceid == inv.id).Sum(x => (x.awarddollars * x.qty));
                                ctotal = ac - rc;
                                rb = db.saleItems.Where(x => x.invoiceid == inv.id).Sum(x => (x.redeembonus * x.qty));
                                ab = db.saleItems.Where(x => x.invoiceid == inv.id).Sum(x => (x.awardbonus * x.qty));
                                btotal = ab - rb;
                                addToRedemptionTableForSOVoidItem(inv, ctotal, "C$", "REDEEM");
                                addToRedemptionTableForSOVoidItem(inv, btotal, "B$", "REDEEM");
                                inv.status = "VOID";
                                db.SaveChanges();
                            }
                        }

                        //pos voiding
                        Salesorder_m_salesorder sodetail = db.saleorders.FirstOrDefault(x => x.id == item.salesorderid);
                        if (sodetail != null)
                        {
                            if (sodetail.invoiceid != null)
                            {
                                Salesorder_m_salesorder soOfOT = db.saleorders.FirstOrDefault(x => x.id == sodetail.invoiceid);
                                salesorder_m_detail itemdetails = db.saleordersItems.FirstOrDefault(x => x.salesorderid == soOfOT.id && x.detailid == item.id);
                                if (itemdetails != null)
                                {
                                    if (itemdetails.status != "VOID")
                                    {
                                        itemdetails.status = "VOID";
                                        db.SaveChanges();

                                        isPaymentRefund = true;
                                        var amountToBeDeducted = (itemdetails.unitprice * itemdetails.qty)-itemdetails.discountamount;
                                        soOfOT.total_total = soOfOT.total_total - amountToBeDeducted;
                                        soOfOT.total_subtotal = soOfOT.total_subtotal - amountToBeDeducted;
                                        db.SaveChanges();

                                        sodetail.total_total = soOfOT.total_total;
                                        sodetail.total_subtotal = soOfOT.total_subtotal;
                                        db.SaveChanges();
                                    }

                                }
                            }

                        }


                        if (category == "Package")
                        {
                            string pkgid = item.productid.ToString();
                            ICollection<salesorder_m_detail> pkgdetails = db.saleordersItems.Where(x => x.salesorderid == item.salesorderid && x.packagecode == pkgid).ToList();

                            foreach (salesorder_m_detail soitemdetails in pkgdetails)
                            {
                                string oldItemDetailStatus = soitemdetails.status;
                                soitemdetails.status = "VOID";
                                db.SaveChanges();
                                saveToLog(rid, soitemdetails.id, "Update", "Update Sales Order Details #" + soitemdetails.id + " status from " + oldItemDetailStatus + " to VOID");

                                ICollection<CusSup_m_CusRedemption> redempItem = db.CusSupRedemption.Where(x => x.invoiceitemid == soitemdetails.id && x.RefNo == soitemdetails.resourcecode && x.resource == "PACKAGEREDEEM").ToList();

                                if (redempItem.Count > 0)
                                {
                                    foreach (CusSup_m_CusRedemption irItem in redempItem)
                                    {
                                        irItem.resource = irItem.resource + "VOID";
                                        irItem.productid = 0;
                                        irItem.productdesc = "VOID Sales Order Item #" + soitemdetails.id + " " + irItem.productdesc;
                                        db.SaveChanges();
                                    }
                                }
                            }
                        }

                        string oldstatus = item.status;
                        item.status = "VOID";
                        db.SaveChanges();
                        saveToLog(rid, item.id, "Update", "Update Sales Order Details #" + item.id + " status from " + oldstatus + " to VOID");

              
                    }

                    }

                        //settle refund
                        if (isPaymentRefund)
                        {
                            Salesorder_m_salesorder sodetail = db.saleorders.FirstOrDefault(x => x.id == soid);
                            Salesorder_m_salesorder salesorderpos = db.saleorders.FirstOrDefault(x => x.id == sodetail.invoiceid);

                            if (salesorderpos != null)
                            {
                                Invoice_m_Invoice inv = db.sales.FirstOrDefault(x => x.id == salesorderpos.invoiceid);
                                if (inv != null)
                                {
                                    var paymentList = db.sales.Where(x => x.salesorderid == inv.salesorderid && x.status == "CLOSE").ToList();
                                    double prevPayment = 0;
                                    double prevRefund = 0;
                                    foreach (Invoice_m_Invoice i in paymentList)
                                    {
                                        prevPayment += i.total_amountreceived;
                                        prevRefund += i.total_amountrefund;
                                    }


                                    double refund = (salesorderpos.total_total - prevPayment)+prevRefund;
                                    if (refund < 0)
                                    {
                                        string curr = "";
                                        double exrate = 0;
                                        ICollection<Configuration_m_Default> config = db.ConfigDefault.Where(x => x.key == "CURR").ToList();

                                        if (config.Count > 0)
                                            curr = config.ElementAt(0).value;
                                        else
                                            curr = "";

                                        config = db.ConfigDefault.Where(x => x.key == "EXCH").ToList();
                                        if (config.Count > 0)
                                            exrate = Convert.ToDouble(config.ElementAt(0).value);
                                        else
                                            exrate = 0;

                                        //create new invoice refund
                                        Invoice_m_Invoice pos = new Invoice_m_Invoice();
                                        pos.createdate = DateTime.Now;
                                        pos.lastmodifieddate = DateTime.Now;
                                        pos.resourcedate = DateTime.Now;
                                        pos.cocode = Convert.ToString(Session["cocode"]);
                                        pos.status = "CLOSE";
                                        pos.type = "SOPOS";
                                        pos.createid = sodetail.createid;
                                        pos.salesorderid = salesorderpos.id;
                                        pos.cussupname = sodetail.cussupname;
                                        pos.cussupid = sodetail.cussupid;
                                        
                                        int uid = Convert.ToInt32(Session["userid"]);
                                        int staffid = 0;
                                        var stmp = db.Staffs.Where(x => x.userid == uid).ToList();
                                        
                                        if (stmp != null)
                                        {
                                            if (stmp.Count > 0)
                                                staffid = stmp.ElementAt(0).id;
                                        }

                                        pos.createid = staffid;
                                        pos.branchcode = Convert.ToString(Session["branchcode"]);
                                        pos.currency = curr;
                                        pos.exchangerate = exrate;
                                        pos.aracctid = "";
                                        pos.salestaxacctid = ""; 
                                        pos.discountacctid = ""; 
                                        double SOSubTot = 0, SOTot = 0, SOTax = 0, SODisc = 0;
                                        SOSubTot = pos.total_subtotal; 
                                        SOTot = pos.total_total;
                                        SOTax = pos.total_salestax;
                                        SODisc = pos.total_discount;
                                        pos.total_total = 0;
                                        pos.total_subtotal = Math.Abs(refund);
                                        pos.total_salestax = 0;
                                        pos.total_amountrefund = Math.Abs(refund);
                                        pos.total_amountvoid = 0;
                                        pos.printcount = 0;
                                        pos.resourcecode = GeneralController.getGeneratedNewID("Invoice_m_Invoice", "resourcecode", "POSPREFIX", "INVPOS");
                                        if (pos.post == 1)
                                        {
                                            pos.postdate = DateTime.Now;
                                            pos.postid = Convert.ToInt32(Session["userid"]);
                                        }
                                        db.sales.Add(pos);
                                        db.SaveChanges();


                                        List<Invoice_m_Invoice> oldinvoice = db.sales.Where(x => x.salesorderid == inv.salesorderid && x.status == "CLOSE").OrderByDescending(x=>x.createdate).ToList();
                                        int oldinvoiceid = oldinvoice[1].id;
                                        List<Invoice_m_Invoice_Items> oldinvoiceItems = db.saleItems.Where(x => x.invoiceid == oldinvoiceid).ToList();

                                        foreach (Invoice_m_Invoice_Items x in oldinvoiceItems)
                                        {
                                            SaveNewDetailItem(x, pos.id, pos.cussupid, resource, pos.resourcecode, rid, curr, exrate, pos.status, staffid, uid, 0);
                                        }

                                        Invoice_m_Payment payment = new Invoice_m_Payment();
                                        payment.paymentmode = "Refund";
                                        payment.amountrecd = pos.total_amountrefund;
                                        List<Invoice_m_Payment> listOfPayment = new List<Invoice_m_Payment>();
                                        listOfPayment.Add(payment);
                                        pos.payments = listOfPayment;

                                        SaveNewPayment(pos.payments.ElementAt(0), pos.id, resource, pos.resourcecode, rid, curr, exrate, pos.status, staffid);

                                        salesorderpos.total_amountrefund = salesorderpos.total_amountrefund + pos.total_amountrefund;
                                        db.SaveChanges();

                                        sodetail.total_amountrefund = sodetail.total_amountrefund + pos.total_amountrefund;
                                        db.SaveChanges();

                                      }

                                    }


                                
                            }
                        }
                   
                    return Json("Success", JsonRequestBehavior.AllowGet);
                }
                else
                    return Json("Wrong username and password or user doesn't have access to void.", JsonRequestBehavior.AllowGet);

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }


        public void addToRedemptionTableForSOVoidItem(Invoice_m_Invoice inv, double? total, string rtype, string ttype)
        {
            CusSup_m_CusRedemption obj = new CusSup_m_CusRedemption();
            int mid = inv.cussupid;
            CusSup_m_CusRedemption redempttmp = db.CusSupRedemption.Where(x => x.cussupid == mid && x.redemptiontype == rtype).OrderByDescending(x => x.id).FirstOrDefault();
            double? prebalance = 0;
            if (redempttmp != null)
            { prebalance = redempttmp.balance; }

            if (total != 0)
            {
                obj.createdate = DateTime.Now;
                obj.lastmodifieddate = DateTime.Now;
                obj.invoiceitemid = 0;
                obj.cussupid = inv.cussupid;
                obj.productid = 0;
                obj.productdesc = "Void " + ttype + "# " + inv.resourcecode + " - Reverse back point";
                obj.remark = "Void " + ttype + "# " + inv.resourcecode;
                obj.resource = ttype + "VOID";
                obj.RefNo = inv.resourcecode;
                obj.branchcode = Convert.ToString(Session["branchcode"]);
                obj.cocode = Convert.ToString(Session["cocode"]);
                obj.redemptiontype = rtype;
                obj.createid = Convert.ToInt32(Session["userid"]);
                if (total > 0)
                {
                    obj.credit = 0;
                    obj.debit = total;
                }
                else
                {
                    obj.debit = 0;
                    obj.credit = (total * (-1));
                }

                obj.balance = prebalance + obj.credit - obj.debit;
                db.CusSupRedemption.Add(obj);
                db.SaveChanges();
            }
        }

        public JsonResult getAppointmentDetails(int appid)
        {
            try
            {
                using (var context = new BigMacEntities())
                {
                    int cussupid = 0;

                    ICollection<Schedule_m_Appointment> appList = db.appointment.Where(x => x.id == appid).ToList();
                    string code = appList.ElementAt(0).customercode;
                    CusSup_m_CusSup cussup = db.CusSup.FirstOrDefault(x => x.inhousecode == code);

                    if (cussup != null)
                    {
                        cussupid = cussup.id;
                    }

                    var appointmentList = (from app in appList
                                           join staff in db.Staffs on app.staffid equals staff.id 
                                           join asset in db.BranchAsset on app.branchassetid equals asset.id 
                                           select new
                                           {
                                               id = app.id,
                                               appdate = app.appointmentdate,
                                               time = app.starttime + " - " + app.endtime,
                                               customername = app.customername,
                                               mobile = app.mobile,
                                               nric = app.nric ?? "",
                                               staffname = staff.name,
                                               room = asset.name,
                                               description = app.description ?? "",
                                               status = app.status,
                                               staffid = app.staffid,
                                               customercode = app.customercode ?? "",
                                               assetid = app.branchassetid,
                                               cussupid = cussupid,
                                               starttime = app.starttime,
                                               endtime = app.endtime
                                           }).ToList();
                    return Json(appointmentList, JsonRequestBehavior.AllowGet);

                }

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        public JsonResult IsAppointmentBooking(int soid)
        {
            int appid  = 0;

            try
            {
                using (var context = new BigMacEntities())
                {
                    var so = db.saleorders.FirstOrDefault(x => x.id == soid);

                    if (so!=null)
                    {
                        var app = db.appointment.FirstOrDefault(x => x.sonumber == so.resourcecode);

                        if (app != null)
                            appid = app.id;
                    }

                    return Json(appid, JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        public ActionResult getAppointmentListWithPaging(jQueryDataTableParamModel param,string date)
        {
            try
            {
                string bcode = Session["branchcode"].ToString();

                ICollection<Schedule_m_Appointment> staffAppointment = db.appointment.Where(x => x.branchcode == bcode ).OrderBy(x => x.appointmentdate).ThenBy(x => x.status).ToList();

                
                var appointmentList = (from app in staffAppointment
                                       join staff in db.Staffs on app.staffid equals staff.id
                                       join asset in db.BranchAsset on app.branchassetid equals asset.id
                                       where app.transactiontype != "attendance"
                                       select new
                                       {
                                           id = app.id,
                                           appdate = app.appointmentdate.ToString("dd/MM/yyyy"),
                                           time = app.starttime + " - " + app.endtime,
                                           customername = app.customername,
                                           mobile = app.mobile,
                                           nric = app.nric, 
                                           staffname =  staff.name,
                                           room =  asset.name,
                                           description = app.description ?? "",
                                           status = app.status,
                                           orderid = "",//,db.saleorders.Where(x => x.resourcecode == app.sonumber).Select(x=>x.id).DefaultIfEmpty(),
                                           statusorder =
                                            (
                                                app.status == "Booking" ? 1 :
                                                app.status == "Wait List" ? 2 :
                                                app.status == "Confirmed" ? 3 :
                                                app.status == "Arrived" ? 4 :
                                                app.status == "Done" ? 5 : 
                                                app.status == "No Show" ? 6 :
                                                app.status == "Cancelled" ? 7 : 0

                                            )
                                       
                                       }).ToList();

              
              


                var searchValue = "";

                if (param.sSearch == null) searchValue = "";
                else searchValue = param.sSearch;

                string selectedDate = "";
                if (date != "")
                {
                    selectedDate = date;
                }
                else
                {
                    var zeroM = "";
                    var zeroD = "";
                    if (DateTime.Now.Month <= 9)
                        zeroM = "0";
                    if (DateTime.Now.Day <= 9)
                        zeroD = "0";

                    selectedDate = zeroD+DateTime.Now.Day + "/" + zeroM + DateTime.Now.Month + "/" + DateTime.Now.Year;
                }

                appointmentList = appointmentList.Where(x => x.appdate.ToString().Contains(selectedDate)).OrderBy(x => x.statusorder).ThenByDescending(x => x.id).ToList();

                searchValue = searchValue.ToUpper();
                var filterTList = appointmentList.Where(x => x.customername.ToUpper().Contains(searchValue) || x.description.ToString().Contains(searchValue) || x.staffname.Contains(searchValue) || x.description.Contains(searchValue) || x.status.ToUpper().Contains(searchValue)).ToList();

                var sortColumnIndex = Convert.ToInt32(Request["iSortCol_0"]);

                var sortDirection = Request["sSortDir_0"]; // asc or desc

                if (sortDirection == "asc")
                {
                    if (sortColumnIndex == 0)
                        filterTList = filterTList.OrderBy(x => x.appdate).ToList();
                    else if (sortColumnIndex == 1)
                        filterTList = filterTList.OrderBy(x => x.time).ToList();
                    else if (sortColumnIndex == 2)
                        filterTList = filterTList.OrderBy(x => x.customername).ToList();
                    else if (sortColumnIndex == 3)
                        filterTList = filterTList.OrderBy(x => x.mobile).ToList();
                    else if (sortColumnIndex == 4)
                        filterTList = filterTList.OrderBy(x => x.nric).ToList();
                    else if (sortColumnIndex == 5)
                        filterTList = filterTList.OrderBy(x => x.staffname).ToList();
                    else if (sortColumnIndex == 6)
                        filterTList = filterTList.OrderBy(x => x.room).ToList();
                    else if (sortColumnIndex == 6)
                        filterTList = filterTList.OrderBy(x => x.description).ToList();
                    else if (sortColumnIndex == 7)
                        filterTList = filterTList.OrderBy(x => x.status).ToList();
                }
                else
                {
                    if (sortColumnIndex == 0)
                        filterTList = filterTList.OrderByDescending(x => x.appdate).ToList();
                    else if (sortColumnIndex == 1)
                        filterTList = filterTList.OrderByDescending(x => x.time).ToList();
                    else if (sortColumnIndex == 2)
                        filterTList = filterTList.OrderByDescending(x => x.customername).ToList();
                    else if (sortColumnIndex == 3)
                        filterTList = filterTList.OrderByDescending(x => x.mobile).ToList();
                    else if (sortColumnIndex == 4)
                        filterTList = filterTList.OrderByDescending(x => x.nric).ToList();
                    else if (sortColumnIndex == 5)
                        filterTList = filterTList.OrderByDescending(x => x.staffname).ToList();
                    else if (sortColumnIndex == 6)
                        filterTList = filterTList.OrderByDescending(x => x.room).ToList();
                    else if (sortColumnIndex == 6)
                        filterTList = filterTList.OrderByDescending(x => x.description).ToList();
                    else if (sortColumnIndex == 7)
                        filterTList = filterTList.OrderByDescending(x => x.status).ToList();
                }

                var paginatedQPList = filterTList.Skip(param.iDisplayStart).Take(param.iDisplayLength).ToList();

                return Json(new
                {
                    sEcho = param.sEcho,
                    iTotalRecords = appointmentList.Count, //paginatedQPList.TotalCount,
                    iTotalDisplayRecords = filterTList.Count, //paginatedQPList.TotalCount,
                    aaData = paginatedQPList
                },
                JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { return Json("Failed", JsonRequestBehavior.AllowGet); }
        }

        public ActionResult getAttendanceListWithPaging(jQueryDataTableParamModel param, string date)
        {
            try
            {
                string bcode = Session["branchcode"].ToString();

                ICollection<Schedule_m_Appointment> staffAppointment = db.appointment.Where(x => x.branchcode == bcode).OrderBy(x => x.appointmentdate).ThenBy(x => x.status).ToList();

        
                var appointmentList = ((from app in staffAppointment
                                        where app.transactiontype == "attendance"
                                          select new
                                          {
                                              id = app.id,
                                              appdate = app.appointmentdate.ToString("dd/MM/yyyy"),
                                              starttime = app.starttime,
                                              endtime = app.endtime,
                                              customername = app.customername,
                                              mobile = app.mobile,
                                              nric =  app.nric ?? "",
                                              branchcode = bcode,
                                              staffname = "",
                                              room = "",
                                              description = app.description ?? "",
                                              nationality = app.nationality ?? "",
                                              status = app.status,
                                              orderid = 0,//db.saleorders.Where(x => x.resourcecode == app.sonumber).Select(x => x.id).DefaultIfEmpty(),
                                              filename = app.filename ?? "",
                                              statusorder =
                                               (
                                                   app.status == "Booking" ? 1 :
                                                   app.status == "Wait List" ? 2 :
                                                   app.status == "Confirmed" ? 3 :
                                                   app.status == "Arrived" ? 4 :
                                                   app.status == "Done" ? 5 :
                                                   app.status == "No Show" ? 6 :
                                                   app.status == "Cancelled" ? 7 : 0

                                               )

                                          }).ToList());




                var searchValue = "";

                if (param.sSearch == null) searchValue = "";
                else searchValue = param.sSearch;

                string selectedDate = "";
                if (date != "")
                {
                    selectedDate = date;
                }
                else
                {
                    var zeroM = "";
                    var zeroD = "";
                    if (DateTime.Now.Month <= 9)
                        zeroM = "0";
                    if (DateTime.Now.Day <= 9)
                        zeroD = "0";

                    selectedDate = zeroD + DateTime.Now.Day + "/" + zeroM + DateTime.Now.Month + "/" + DateTime.Now.Year;
                }

                appointmentList = appointmentList.Where(x => x.appdate.ToString().Contains(selectedDate)).OrderBy(x => x.statusorder).ThenByDescending(x => x.id).ToList();

                searchValue = searchValue.ToUpper();
                var filterTList = appointmentList.Where(x => x.customername.ToUpper().Contains(searchValue) || x.description.ToString().Contains(searchValue) || x.staffname.Contains(searchValue) || x.description.Contains(searchValue) || x.status.ToUpper().Contains(searchValue)).ToList();

                var sortColumnIndex = Convert.ToInt32(Request["iSortCol_0"]);

                var sortDirection = Request["sSortDir_0"]; // asc or desc

                if (sortDirection == "asc")
                {
                    if (sortColumnIndex == 1)
                        filterTList = filterTList.OrderBy(x => x.appdate).ToList();
                    else if (sortColumnIndex == 2)
                        filterTList = filterTList.OrderBy(x => x.nric).ToList();
                    else if (sortColumnIndex == 3)
                        filterTList = filterTList.OrderBy(x => x.customername).ToList();
                    else if (sortColumnIndex == 4)
                        filterTList = filterTList.OrderBy(x => x.description).ToList();
                    else if (sortColumnIndex == 5)
                        filterTList = filterTList.OrderBy(x => x.starttime).ToList();
                    else if (sortColumnIndex == 6)
                        filterTList = filterTList.OrderBy(x => x.status).ToList();
                    else if (sortColumnIndex == 7)
                        filterTList = filterTList.OrderBy(x => x.endtime).ToList();
                    else if (sortColumnIndex == 8)
                        filterTList = filterTList.OrderBy(x => x.staffname).ToList();
                    else if (sortColumnIndex == 9)
                        filterTList = filterTList.OrderBy(x => x.room).ToList();
                
                }
                else
                {
                    if (sortColumnIndex == 1)
                        filterTList = filterTList.OrderByDescending(x => x.appdate).ToList();
                    else if (sortColumnIndex == 2)
                        filterTList = filterTList.OrderByDescending(x => x.nric).ToList();
                    else if (sortColumnIndex == 3)
                        filterTList = filterTList.OrderByDescending(x => x.customername).ToList();
                    else if (sortColumnIndex == 4)
                        filterTList = filterTList.OrderByDescending(x => x.description).ToList();
                    else if (sortColumnIndex == 5)
                        filterTList = filterTList.OrderByDescending(x => x.starttime).ToList();
                    else if (sortColumnIndex == 6)
                        filterTList = filterTList.OrderByDescending(x => x.status).ToList();
                    else if (sortColumnIndex == 7)
                        filterTList = filterTList.OrderByDescending(x => x.endtime).ToList();
                    else if (sortColumnIndex == 8)
                        filterTList = filterTList.OrderByDescending(x => x.staffname).ToList();
                    else if (sortColumnIndex == 9)
                        filterTList = filterTList.OrderByDescending(x => x.room).ToList();
                }

                var paginatedQPList = filterTList.Skip(param.iDisplayStart).Take(param.iDisplayLength).ToList();

                string str = appointmentList.Count.ToString();

                return Json(new
                {
                    sEcho = param.sEcho,
                    iTotalRecords = appointmentList.Count, //paginatedQPList.TotalCount,
                    iTotalDisplayRecords = filterTList.Count, //paginatedQPList.TotalCount,
                    aaData = paginatedQPList
                },
                JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            { 
                return Json("Failed", JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        public ActionResult UploadSignImage(string fileData, string fileName)
        {
            string dataWithoutPngMarker = fileData.Replace("data:image/png;base64,", String.Empty);
            byte[] filebytes = Convert.FromBase64String(dataWithoutPngMarker);
            string writePath = Path.Combine(Server.MapPath("~/Reports/"), fileName + ".png");
            using (FileStream fs = new FileStream(writePath,
                                            FileMode.OpenOrCreate,
                                            FileAccess.Write,
                                            FileShare.None))
            {
                fs.Write(filebytes, 0, filebytes.Length);
            }
            return new EmptyResult();
        }

        public Boolean saveToLog(int resourceid, int resourcecode, string logtype, string description, string from = "", string to = "", string ip = "")
        {
            GeneralController gc = new GeneralController();
            int uid = Convert.ToInt32(Session["userid"].ToString());
            string visitorIPAddress = System.Web.HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"];

            if (String.IsNullOrEmpty(visitorIPAddress))
                visitorIPAddress = System.Web.HttpContext.Current.Request.ServerVariables["REMOTE_ADDR"];

            if (string.IsNullOrEmpty(visitorIPAddress))
                visitorIPAddress = System.Web.HttpContext.Current.Request.UserHostAddress;

            return gc.SaveToLog(uid, Session["cocode"].ToString(), Session.SessionID, resourceid, resourcecode, logtype, description, from, to, visitorIPAddress);
        }

    }
}
